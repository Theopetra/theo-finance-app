/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFounderVestingInterface extends ethers.utils.Interface {
  functions: {
    "getReleasable(address,address)": FunctionFragment;
    "getReleased(address,address)": FunctionFragment;
    "getShares(address)": FunctionFragment;
    "getTotalReleased(address)": FunctionFragment;
    "getTotalShares()": FunctionFragment;
    "release(address)": FunctionFragment;
    "releaseAmount(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getReleasable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleased",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getShares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalReleased",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseAmount",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReleasable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseAmount",
    data: BytesLike
  ): Result;

  events: {
    "ERC20PaymentReleased(address,address,uint256)": EventFragment;
    "PayeeAdded(address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
}

export type ERC20PaymentReleasedEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; amount: BigNumber }
>;

export type PayeeAddedEvent = TypedEvent<
  [string, BigNumber] & { account: string; shares: BigNumber }
>;

export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber] & { from: string; amount: BigNumber }
>;

export class IFounderVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFounderVestingInterface;

  functions: {
    getReleasable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReleased(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShares(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalReleased(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    release(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAmount(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getReleasable(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReleased(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalReleased(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

  release(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAmount(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getReleasable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleased(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReleased(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    release(token: string, overrides?: CallOverrides): Promise<void>;

    releaseAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20PaymentReleased(address,address,uint256)"(
      token?: string | null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    ERC20PaymentReleased(
      token?: string | null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; amount: BigNumber }
    >;

    "PayeeAdded(address,uint256)"(
      account?: null,
      shares?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; shares: BigNumber }
    >;

    PayeeAdded(
      account?: null,
      shares?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; shares: BigNumber }
    >;

    "PaymentReceived(address,uint256)"(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    PaymentReceived(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    getReleasable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleased(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReleased(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalShares(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAmount(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getReleasable(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleased(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalReleased(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAmount(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
