/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StakingMock, StakingMockInterface } from "../StakingMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_theo",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sTheo",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "THEO",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "basis",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimIndexCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "pushClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "pushClaimForBond",
    outputs: [
      {
        internalType: "uint256",
        name: "newIndex_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sTHEO",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_claim",
        type: "bool",
      },
    ],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516105273803806105278339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c61049f610088600039806101b752806102615250806101f6528061023d525061049f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063995846bd1161005b578063995846bd14610108578063b3e5040914610162578063d9edbc1d1461019b578063f385cecb146101a35761007d565b806364c2ee251461008257806378f1f7781461009c57806394ead119146100d7575b600080fd5b61008a6101ab565b60408051918252519081900360200190f35b6100d5600480360360408110156100b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356101b1565b005b6100df6101b5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101496004803603606081101561011e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135906040013515156101d9565b6040805192835260208301919091528051918290030190f35b61008a6004803603604081101561017857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610233565b6100df61023b565b6100df61025f565b60005481565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061021e73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333087610283565b50506000805460010190819055919391925050565b600092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061036157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610324565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146103c3576040519150601f19603f3d011682016040523d82523d6000602084013e6103c8565b606091505b50915091508180156103f65750805115806103f657508080602001905160208110156103f357600080fd5b50515b61046157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b50505050505056fea2646970667358221220154b7c6389032011bdce35df9d6a392bf2e8d048d5fa683c21ebe117013c98e964736f6c63430007050033";

export class StakingMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _theo: string,
    _sTheo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingMock> {
    return super.deploy(_theo, _sTheo, overrides || {}) as Promise<StakingMock>;
  }
  getDeployTransaction(
    _theo: string,
    _sTheo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_theo, _sTheo, overrides || {});
  }
  attach(address: string): StakingMock {
    return super.attach(address) as StakingMock;
  }
  connect(signer: Signer): StakingMock__factory {
    return super.connect(signer) as StakingMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingMockInterface {
    return new utils.Interface(_abi) as StakingMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingMock {
    return new Contract(address, _abi, signerOrProvider) as StakingMock;
  }
}
