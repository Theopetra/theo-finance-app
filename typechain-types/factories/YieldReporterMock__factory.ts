/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  YieldReporterMock,
  YieldReporterMockInterface,
} from "../YieldReporterMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "yield",
        type: "int256",
      },
    ],
    name: "ReportYield",
    type: "event",
  },
  {
    inputs: [],
    name: "currentYield",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getYieldById",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastYield",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_amount",
        type: "int256",
      },
    ],
    name: "reportYield",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e28061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c80630156888314604b57806318148c431460645780636934b4e114607957806378a642f214608a575b600080fd5b64037e11d6005b60405190815260200160405180910390f35b6052606f3660046094565b50640342770c0090565b605260843660046094565b50600a90565b64059682f0006052565b60006020828403121560a557600080fd5b503591905056fea264697066735822122005a6ff240602f7a5f18dac548bc1d7a8f5d6c56f399465177872da0b57ac978164736f6c634300080a0033";

export class YieldReporterMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<YieldReporterMock> {
    return super.deploy(overrides || {}) as Promise<YieldReporterMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): YieldReporterMock {
    return super.attach(address) as YieldReporterMock;
  }
  connect(signer: Signer): YieldReporterMock__factory {
    return super.connect(signer) as YieldReporterMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldReporterMockInterface {
    return new utils.Interface(_abi) as YieldReporterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldReporterMock {
    return new Contract(address, _abi, signerOrProvider) as YieldReporterMock;
  }
}
