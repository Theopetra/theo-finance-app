/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AggregatorMockETH,
  AggregatorMockETHInterface,
} from "../AggregatorMockETH";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060b48061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063313ce567146037578063feaf968c14604b575b600080fd5b604051600881526020015b60405180910390f35b604080516001808252644308ae3b42602083015260009282018390526060820192909252608081019190915260a001604256fea264697066735822122017dd87c7d8d38c919c82f792343b301e8a4d694ada4e8e72825cfe2bca459e2c64736f6c634300080a0033";

export class AggregatorMockETH__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AggregatorMockETH> {
    return super.deploy(overrides || {}) as Promise<AggregatorMockETH>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AggregatorMockETH {
    return super.attach(address) as AggregatorMockETH;
  }
  connect(signer: Signer): AggregatorMockETH__factory {
    return super.connect(signer) as AggregatorMockETH__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorMockETHInterface {
    return new utils.Interface(_abi) as AggregatorMockETHInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorMockETH {
    return new Contract(address, _abi, signerOrProvider) as AggregatorMockETH;
  }
}
