/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TreasuryMock, TreasuryMockInterface } from "../TreasuryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_theo",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Minted",
    type: "event",
  },
  {
    inputs: [],
    name: "THEO",
    outputs: [
      {
        internalType: "contract ITHEO",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deltaTokenPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deltaTreasuryYield",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTheoBondingCalculator",
    outputs: [
      {
        internalType: "contract IBondCalculator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_theoBondingCalculator",
        type: "address",
      },
    ],
    name: "setTheoBondingCalculator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516103913803806103918339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661032561006c6000398061015d52806102cd52506103256000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063860f50481161005b578063860f5048146101085780639a5739d8146101105780639b70b2af14610118578063d9edbc1d1461014b5761007d565b8063192d57c51461008257806340c10f191461009c578063817f7635146100d7575b600080fd5b61008a610153565b60408051918252519081900360200190f35b6100d5600480360360408110156100b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561015b565b005b6100df610255565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61008a610271565b61008a61027c565b6100d56004803603602081101561012e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610284565b6100df6102cb565b6305f5e10090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505060408051848152905173ffffffffffffffffffffffffffffffffffffffff861693503392507f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09181900360200190a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b662386f26fc1000090565b630bebc20090565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000008156fea264697066735822122023b8f7bfc6c2f855ed62bc29f9ab6fbfdf6ebb7f64630ce68dd2d072cccfdea964736f6c63430007050033";

export class TreasuryMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _theo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TreasuryMock> {
    return super.deploy(_theo, overrides || {}) as Promise<TreasuryMock>;
  }
  getDeployTransaction(
    _theo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_theo, overrides || {});
  }
  attach(address: string): TreasuryMock {
    return super.attach(address) as TreasuryMock;
  }
  connect(signer: Signer): TreasuryMock__factory {
    return super.connect(signer) as TreasuryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryMockInterface {
    return new utils.Interface(_abi) as TreasuryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreasuryMock {
    return new Contract(address, _abi, signerOrProvider) as TreasuryMock;
  }
}
