/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IWhitelistBondDepositoryInterface extends ethers.utils.Interface {
  functions: {
    "calculatePrice(uint256)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "create(address,address,uint256[2],bool[2],uint256[2])": FunctionFragment;
    "deposit(uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "liveMarkets()": FunctionFragment;
    "liveMarketsFor(address)": FunctionFragment;
    "payoutFor(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      [BigNumberish, BigNumberish],
      [boolean, boolean],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liveMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liveMarketsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;

  events: {};
}

export class IWhitelistBondDepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWhitelistBondDepositoryInterface;

  functions: {
    calculatePrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    close(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      _quoteToken: string,
      _priceFeed: string,
      _market: [BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    liveMarkets(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calculatePrice(
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  close(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    _quoteToken: string,
    _priceFeed: string,
    _market: [BigNumberish, BigNumberish],
    _booleans: [boolean, boolean],
    _terms: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _bid: BigNumberish,
    _amount: BigNumberish,
    _maxPrice: BigNumberish,
    _user: string,
    _referral: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  liveMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

  liveMarketsFor(
    _quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  payoutFor(
    _amount: BigNumberish,
    _bid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculatePrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    create(
      _quoteToken: string,
      _priceFeed: string,
      _market: [BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        payout_: BigNumber;
        expiry_: BigNumber;
        index_: BigNumber;
      }
    >;

    isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    liveMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculatePrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      _quoteToken: string,
      _priceFeed: string,
      _market: [BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLive(_bid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    liveMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePrice(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _quoteToken: string,
      _priceFeed: string,
      _market: [BigNumberish, BigNumberish],
      _booleans: [boolean, boolean],
      _terms: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _bid: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _user: string,
      _referral: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLive(
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liveMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveMarketsFor(
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutFor(
      _amount: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
