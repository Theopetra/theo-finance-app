/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryMockInterface extends ethers.utils.Interface {
  functions: {
    "THEO()": FunctionFragment;
    "baseSupply()": FunctionFragment;
    "deltaTokenPrice()": FunctionFragment;
    "deltaTreasuryYield()": FunctionFragment;
    "getTheoBondingCalculator()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "setTheoBondingCalculator(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "THEO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deltaTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deltaTreasuryYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTheoBondingCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTheoBondingCalculator",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "THEO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deltaTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deltaTreasuryYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTheoBondingCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTheoBondingCalculator",
    data: BytesLike
  ): Result;

  events: {
    "Minted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
}

export type MintedEvent = TypedEvent<
  [string, string, BigNumber] & {
    caller: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export class TreasuryMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryMockInterface;

  functions: {
    THEO(overrides?: CallOverrides): Promise<[string]>;

    baseSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    deltaTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    deltaTreasuryYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTheoBondingCalculator(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTheoBondingCalculator(
      _theoBondingCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  THEO(overrides?: CallOverrides): Promise<string>;

  baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

  deltaTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  deltaTreasuryYield(overrides?: CallOverrides): Promise<BigNumber>;

  getTheoBondingCalculator(overrides?: CallOverrides): Promise<string>;

  mint(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTheoBondingCalculator(
    _theoBondingCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    THEO(overrides?: CallOverrides): Promise<string>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    deltaTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    deltaTreasuryYield(overrides?: CallOverrides): Promise<BigNumber>;

    getTheoBondingCalculator(overrides?: CallOverrides): Promise<string>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTheoBondingCalculator(
      _theoBondingCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Minted(address,address,uint256)"(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; recipient: string; amount: BigNumber }
    >;

    Minted(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; recipient: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    THEO(overrides?: CallOverrides): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    deltaTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    deltaTreasuryYield(overrides?: CallOverrides): Promise<BigNumber>;

    getTheoBondingCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTheoBondingCalculator(
      _theoBondingCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    THEO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltaTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltaTreasuryYield(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTheoBondingCalculator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTheoBondingCalculator(
      _theoBondingCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
