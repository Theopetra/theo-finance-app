{
  "address": "0xC3CF3Aa4b90B5dba6151DE54539d166Fa8A56022",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "LogRebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "LogStakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "LogSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "SetIndex",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        }
      ],
      "name": "balanceForGons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "gonsForBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch_",
          "type": "uint256"
        }
      ],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rebases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rebase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRebased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumberOccured",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_INDEX",
          "type": "uint256"
        }
      ],
      "name": "setIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x704bc61cf807d6bc39893281fe0b49a94cb3139ffb82369b8353c62e884d7ae7",
  "receipt": {
    "to": null,
    "from": "0x0a4B56B375aEAfB5A02ACaeEc5Ca0F6a6efb0025",
    "contractAddress": "0xC3CF3Aa4b90B5dba6151DE54539d166Fa8A56022",
    "transactionIndex": 3,
    "gasUsed": "1695036",
    "logsBloom": "0x
    "blockHash": "0xd1928f69ab205261af6ec01514a3865e4cae1dbe8416c38ab686980be65778cd",
    "transactionHash": "0x704bc61cf807d6bc39893281fe0b49a94cb3139ffb82369b8353c62e884d7ae7",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12433625,
        "transactionHash": "0x704bc61cf807d6bc39893281fe0b49a94cb3139ffb82369b8353c62e884d7ae7",
        "address": "0xC3CF3Aa4b90B5dba6151DE54539d166Fa8A56022",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000d19e2973068657e68f4344bcb82e233864d302d7"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xd1928f69ab205261af6ec01514a3865e4cae1dbe8416c38ab686980be65778cd"
      }
    ],
    "blockNumber": 12433625,
    "cumulativeGasUsed": "2014234",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD19E2973068657E68f4344bCB82E233864d302d7"
  ],
  "numDeployments": 1,
  "solcInputHash": "c04001e641f420ac37ed814fe4f5da7e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"LogStakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SetIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"}],\"name\":\"balanceForGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gonsForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rebases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRebased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberOccured\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_INDEX\",\"type\":\"uint256\"}],\"name\":\"setIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"See {IERC2612Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC2612Permit-permit}.\"},\"rebase(uint256,uint256)\":{\"params\":{\"profit_\":\"uint256\"},\"returns\":{\"_0\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rebase(uint256,uint256)\":{\"notice\":\"increases sTHEO supply to increase staking balances relative to profit_\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/pTheopetraERC20.sol\":\"pTheopetra\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC2612Permit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ninterface IERC2612Permit {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaae0319e92b1a8c90e19ebd0912a261e7a0b3affe3ff8fc3bd0f2a56f2bd7ec3\",\"license\":\"AGPL-3.0-or-later\"},\"src/Interfaces/IStakedTHEOToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IStakedTHEOToken is IERC20 {\\n    function rebase(uint256 theoProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view override returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3143d844fbf32d8dc30ab9e1ea6bcc30825a74cd5586f185be87ce88a9887ebb\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITheopetraAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event ManagerPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event SignerPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function whitelistSigner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb2878b057ac95bafe9f359c26c4e7b470dcd6d00df5797f992a576d79182b287\",\"license\":\"AGPL-3.0\"},\"src/Libraries/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x135e84f2d487ba3beb65609d2f75f61650a54c985196cf15f5cb6152518dc4f7\",\"license\":\"AGPL-3.0-or-later\"},\"src/Libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\\n        return div(mul(total_, percentage_), 1000);\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\\n    }\\n\\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\\n        return div(mul(part_, 100), total_);\\n    }\\n\\n    /**\\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\\n        return sqrrt(mul(multiplier_, payment_));\\n    }\\n\\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\\n        return mul(multiplier_, supply_);\\n    }\\n}\\n\",\"keccak256\":\"0xc6ed927b09d3135cf05c030db1f6ff0816a8aa7d303c52c34e43a5ba03a19e78\",\"license\":\"AGPL-3.0-or-later\"},\"src/Theopetra/pTheopetraERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"../Interfaces/IStakedTHEOToken.sol\\\";\\n\\nimport \\\"../Types/ERC20Permit.sol\\\";\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\n\\ncontract pTheopetra is IStakedTHEOToken, ERC20Permit, TheopetraAccessControlled {\\n    using SafeMath for uint256;\\n\\n    modifier onlyStakingContract() {\\n        require(msg.sender == stakingContract, \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    address public stakingContract;\\n    address public initializer;\\n\\n    event LogSupply(uint256 indexed epoch, uint256 timestamp, uint256 totalSupply);\\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\\n    event LogStakingContractUpdated(address stakingContract);\\n    event SetIndex(uint256 index);\\n\\n    struct Rebase {\\n        uint256 epoch;\\n        uint256 rebase; // 18 decimals\\n        uint256 totalStakedBefore;\\n        uint256 totalStakedAfter;\\n        uint256 amountRebased;\\n        uint256 index;\\n        uint256 blockNumberOccured;\\n    }\\n    Rebase[] public rebases;\\n\\n    uint256 public INDEX;\\n\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5000000 * 10**9;\\n\\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\\n    // Use the highest value that fits in a uint256 for max granularity.\\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n\\n    uint256 private _gonsPerFragment;\\n    mapping(address => uint256) private _gonBalances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowedValue;\\n\\n    address public treasury;\\n\\n    constructor(address _authority)\\n        ERC20(\\\"Platinum Staked Theo\\\", \\\"pTHEO\\\", 9)\\n        ERC20Permit()\\n        TheopetraAccessControlled(ITheopetraAuthority(_authority))\\n    {\\n        initializer = msg.sender;\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n    }\\n\\n    function initialize(address stakingContract_) external returns (bool) {\\n        require(msg.sender == initializer, \\\"UNAUTHORIZED\\\");\\n        require(stakingContract_ != address(0), \\\"stakingContract cannot be the zero address\\\");\\n        stakingContract = stakingContract_;\\n        _gonBalances[stakingContract] = TOTAL_GONS;\\n\\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\\n        emit LogStakingContractUpdated(stakingContract_);\\n\\n        initializer = address(0);\\n        return true;\\n    }\\n\\n    function setIndex(uint256 _INDEX) external onlyGuardian returns (bool) {\\n        require(INDEX == 0, \\\"Index already set\\\");\\n        INDEX = gonsForBalance(_INDEX);\\n        emit SetIndex(INDEX);\\n        return true;\\n    }\\n\\n    /**\\n        @notice increases sTHEO supply to increase staking balances relative to profit_\\n        @param profit_ uint256\\n        @return uint256\\n     */\\n    function rebase(uint256 profit_, uint256 epoch_) external override onlyStakingContract returns (uint256) {\\n        uint256 rebaseAmount;\\n        uint256 circulatingSupply_ = circulatingSupply();\\n\\n        if (profit_ == 0) {\\n            emit LogSupply(epoch_, block.timestamp, _totalSupply);\\n            emit LogRebase(epoch_, 0, index());\\n            return _totalSupply;\\n        } else if (circulatingSupply_ > 0) {\\n            rebaseAmount = profit_.mul(_totalSupply).div(circulatingSupply_);\\n        } else {\\n            rebaseAmount = profit_;\\n        }\\n\\n        _totalSupply = _totalSupply.add(rebaseAmount);\\n\\n        if (_totalSupply > MAX_SUPPLY) {\\n            _totalSupply = MAX_SUPPLY;\\n        }\\n\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        _storeRebase(circulatingSupply_, profit_, epoch_);\\n\\n        return _totalSupply;\\n    }\\n\\n    /**\\n        @notice emits event with data about rebase\\n        @param previousCirculating_ uint\\n        @param profit_ uint\\n        @param epoch_ uint\\n        @return bool\\n     */\\n    function _storeRebase(\\n        uint256 previousCirculating_,\\n        uint256 profit_,\\n        uint256 epoch_\\n    ) internal returns (bool) {\\n        uint256 rebasePercent = previousCirculating_ > 0 ? profit_.mul(1e18).div(previousCirculating_) : 0;\\n\\n        rebases.push(\\n            Rebase({\\n                epoch: epoch_,\\n                rebase: rebasePercent, // 18 decimals\\n                totalStakedBefore: previousCirculating_,\\n                totalStakedAfter: circulatingSupply(),\\n                amountRebased: profit_,\\n                index: index(),\\n                blockNumberOccured: block.number\\n            })\\n        );\\n\\n        emit LogSupply(epoch_, block.timestamp, _totalSupply);\\n        emit LogRebase(epoch_, rebasePercent, index());\\n\\n        return true;\\n    }\\n\\n    function balanceOf(address who) public view override(IStakedTHEOToken, ERC20) returns (uint256) {\\n        return _gonBalances[who].div(_gonsPerFragment);\\n    }\\n\\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\\n        return amount.mul(_gonsPerFragment);\\n    }\\n\\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\\n        return gons.div(_gonsPerFragment);\\n    }\\n\\n    // Staking contract holds excess sTHEO\\n    function circulatingSupply() public view override returns (uint256) {\\n        return _totalSupply.sub(balanceOf(stakingContract));\\n    }\\n\\n    function index() public view override returns (uint256) {\\n        return balanceForGons(INDEX);\\n    }\\n\\n    function transfer(address to, uint256 value) external override(ERC20, IERC20) returns (bool) {\\n        uint256 gonValue = gonsForBalance(value);\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function allowance(address owner_, address spender) public view override(ERC20, IERC20) returns (uint256) {\\n        return _allowedValue[owner_][spender];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override(ERC20, IERC20) returns (bool) {\\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender].sub(value);\\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\\n\\n        uint256 gonValue = gonsForBalance(value);\\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value) external override(ERC20, IERC20) returns (bool) {\\n        _allowedValue[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    // What gets called in a permit\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal virtual override {\\n        _allowedValue[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n        _allowedValue[msg.sender][spender] = _allowedValue[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n        uint256 oldValue = _allowedValue[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedValue[msg.sender][spender] = 0;\\n        } else {\\n            _allowedValue[msg.sender][spender] = oldValue.sub(subtractedValue);\\n        }\\n        emit Approval(msg.sender, spender, _allowedValue[msg.sender][spender]);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb0e1fd9f5e4139e124112b84682b43f24338b04a9352d333a4a2cc0878ed57c2\",\"license\":\"AGPL-3.0\"},\"src/Types/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Libraries/SafeMath.sol\\\";\\n\\nimport \\\"../Interfaces/IERC20.sol\\\";\\n\\nabstract contract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    // TODO comment actual hash value.\\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\\\"ERC20Token\\\");\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string internal _name;\\n\\n    string internal _symbol;\\n\\n    uint8 internal immutable _decimals;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xcafbaa1c6769cb5038c089f0196b939f2c4549791a26036fdd8f01100df8a3c9\",\"license\":\"AGPL-3.0-or-later\"},\"src/Types/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../Interfaces/IERC2612Permit.sol\\\";\\nimport \\\"../Libraries/Counters.sol\\\";\\n\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /**\\n     * @dev See {IERC2612Permit-permit}.\\n     *\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override {\\n        require(block.timestamp <= deadline, \\\"Permit: expired deadline\\\");\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline)\\n        );\\n\\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901),\\n        keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(\\\"1\\\")), // Version\\n                chainID,\\n                address(this)\\n            )\\n        ), hashStruct));\\n\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\n\\n        address signer = ecrecover(_hash, v, r, s);\\n        require(signer != address(0) && signer == owner, \\\"ZeroSwapPermit: Invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC2612Permit-nonces}.\\n     */\\n    function nonces(address owner) external view override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n}\\n\",\"keccak256\":\"0x5726673ec108975ff0d444a6494a0ad51cdaa8c6ec4180154124d3bd3d8720ba\",\"license\":\"AGPL-3.0-or-later\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\n\\nabstract contract TheopetraAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\n\\n    string constant UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITheopetraAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(ITheopetraAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x335437cea6c94c4fdc75340f25a13dc97094825f30d71c36993a94a2724ebf3c\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e4538038062001e45833981810160405260208110156200003757600080fd5b5051604080518082018252601481527f506c6174696e756d205374616b6564205468656f000000000000000000000000602082810191825283518085019094526005845264705448454f60d81b9084015281518493916009916200009e916003916200026a565b508151620000b49060049060208501906200026a565b5060f81b7fff00000000000000000000000000000000000000000000000000000000000000166080525050600680546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250600880546001600160a01b031916331790556611c37937e08000600281905562000168908060001906600019036200017260201b620016ad1790919060201c565b600b555062000316565b6000620001bc83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250620001c360201b60201c565b9392505050565b60008183620002535760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000217578181015183820152602001620001fd565b50505050905090810190601f168015620002455780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200026057fe5b0495945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620002a25760008555620002ed565b82601f10620002bd57805160ff1916838001178555620002ed565b82800160010185558215620002ed579182015b82811115620002ed578251825591602001919060010190620002d0565b50620002fb929150620002ff565b5090565b5b80821115620002fb576000815560010162000300565b60805160f81c611b1162000334600039806109fa5250611b116000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806373c69eb7116100f9578063a457c2d711610097578063c4d66de811610071578063c4d66de814610517578063d505accf1461053d578063dd62ed3e1461058e578063ee99205c146105bc576101c4565b8063a457c2d7146104b7578063a9059cbb146104e3578063bf7e214f1461050f576101c4565b80637ecebe00116100d35780637ecebe00146104795780639358928b1461049f57806395d89b41146104a75780639ce110d7146104af576101c4565b806373c69eb7146103df5780637965d56d146104345780637a9e5e4b14610451576101c4565b80632df75cb1116101665780633950935111610140578063395093511461034c57806340a5737f1461037857806361d027b31461039557806370a08231146103b9576101c4565b80632df75cb11461031e57806330adf81f14610326578063313ce5671461032e576101c4565b806318160ddd116101a257806318160ddd146102bb5780631bd39674146102c357806323b872dd146102e05780632986c0e514610316576101c4565b8063058ecdb4146101c957806306fdde03146101fe578063095ea7b31461027b575b600080fd5b6101ec600480360360408110156101df57600080fd5b50803590602001356105c4565b60408051918252519081900360200190f35b610206610757565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610240578181015183820152602001610228565b50505050905090810190601f16801561026d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102a76004803603604081101561029157600080fd5b506001600160a01b0381351690602001356107ed565b604080519115158252519081900360200190f35b6101ec610853565b6101ec600480360360208110156102d957600080fd5b5035610859565b6102a7600480360360608110156102f657600080fd5b506001600160a01b03813581169160208101359091169060400135610870565b6101ec6109bc565b6101ec6109ce565b6101ec6109d4565b6103366109f8565b6040805160ff9092168252519081900360200190f35b6102a76004803603604081101561036257600080fd5b506001600160a01b038135169060200135610a1c565b6102a76004803603602081101561038e57600080fd5b5035610aaf565b61039d610c8e565b604080516001600160a01b039092168252519081900360200190f35b6101ec600480360360208110156103cf57600080fd5b50356001600160a01b0316610c9d565b6103fc600480360360208110156103f557600080fd5b5035610cc5565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6101ec6004803603602081101561044a57600080fd5b5035610d17565b6104776004803603602081101561046757600080fd5b50356001600160a01b0316610d2e565b005b6101ec6004803603602081101561048f57600080fd5b50356001600160a01b0316610e7a565b6101ec610e9b565b610206610ec0565b61039d610f21565b6102a7600480360360408110156104cd57600080fd5b506001600160a01b038135169060200135610f30565b6102a7600480360360408110156104f957600080fd5b506001600160a01b038135169060200135611019565b61039d6110cd565b6102a76004803603602081101561052d57600080fd5b50356001600160a01b03166110dc565b610477600480360360e081101561055357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611258565b6101ec600480360360408110156105a457600080fd5b506001600160a01b0381358116916020013516611673565b61039d61169e565b6007546000906001600160a01b03163314610615576040805162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015290519081900360640190fd5b600080610620610e9b565b9050846106b657600254604080514281526020810192909252805186927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da492908290030190a2837f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb260006106926109bc565b6040805192835260208301919091528051918290030190a260025492505050610751565b80156106e2576106db816106d5600254886116f690919063ffffffff16565b906116ad565b91506106e6565b8491505b6002546106f3908361174f565b60028190556fffffffffffffffffffffffffffffffff1015610724576fffffffffffffffffffffffffffffffff6002555b60025461073a90660e3d2cfe61ffff19906116ad565b600b556107488186866117a9565b50600254925050505b92915050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b5050505050905090565b336000818152600d602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b6000610751600b54836116f690919063ffffffff16565b6001600160a01b0383166000908152600d6020908152604080832033845290915281205461089e90836118ff565b6001600160a01b0385166000818152600d60209081526040808320338085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3600061090583610859565b6001600160a01b0386166000908152600c602052604090205490915061092b90826118ff565b6001600160a01b038087166000908152600c6020526040808220939093559086168152205461095a908261174f565b6001600160a01b038086166000818152600c602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b60006109c9600a54610d17565b905090565b600a5481565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000090565b336000908152600d602090815260408083206001600160a01b0386168452909152812054610a4a908361174f565b336000818152600d602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600654604080517f452a932000000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163452a9320916004808301926020929190829003018186803b158015610b0d57600080fd5b505afa158015610b21573d6000803e3d6000fd5b505050506040513d6020811015610b3757600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b03163314610bf05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bb5578181015183820152602001610b9d565b50505050905090810190601f168015610be25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600a5415610c46576040805162461bcd60e51b815260206004820152601160248201527f496e64657820616c726561647920736574000000000000000000000000000000604482015290519081900360640190fd5b610c4f82610859565b600a81905560408051918252517fe0f56ff65799b4f6ff5b24871ec08f73b36d933db31d1452d59d2af94db99a149181900360200190a1506001919050565b600e546001600160a01b031681565b600b546001600160a01b0382166000908152600c6020526040812054909161075191906116ad565b60098181548110610cd557600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b6000610751600b54836116ad90919063ffffffff16565b600660009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d6020811015610da657600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b03163314610e225760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bb5578181015183820152602001610b9d565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6001600160a01b038116600090815260056020526040812061075190611941565b6007546000906109c990610eb7906001600160a01b0316610c9d565b600254906118ff565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107e35780601f106107b8576101008083540402835291602001916107e3565b6008546001600160a01b031681565b336000908152600d602090815260408083206001600160a01b0386168452909152812054808310610f8457336000908152600d602090815260408083206001600160a01b0388168452909152812055610fb3565b610f8e81846118ff565b336000908152600d602090815260408083206001600160a01b03891684529091529020555b336000818152600d602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60008061102583610859565b336000908152600c602052604090205490915061104290826118ff565b336000908152600c6020526040808220929092556001600160a01b0386168152205461106e908261174f565b6001600160a01b0385166000818152600c60209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b6006546001600160a01b031681565b6008546000906001600160a01b0316331461112d576040805162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015290519081900360640190fd5b6001600160a01b0382166111725760405162461bcd60e51b815260040180806020018281038252602a815260200180611a70602a913960400191505060405180910390fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038481169190911780835581166000908152600c60209081526040808320660e3d2cfe61ffff19905593546002548551908152945193169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3604080516001600160a01b038416815290517f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a19181900360200190a150506008805473ffffffffffffffffffffffffffffffffffffffff19169055600190565b834211156112ad576040805162461bcd60e51b815260206004820152601860248201527f5065726d69743a206578706972656420646561646c696e650000000000000000604482015290519081900360640190fd5b6001600160a01b03871660009081526005602052604081204691907f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9908a908a908a906112f990611941565b8a60405160200180878152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001828152602001965050505050505060405160208183030381529060405280519060200120905060006119017f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611385610757565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805180840194909452838101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060840152608083018790523060a0808501919091528151808503909101815260c08401825280519083012060f09490941b7fffff0000000000000000000000000000000000000000000000000000000000001660e084015260e283019390935261010280830186905283518084039091018152610122909201909252805191012090507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156114e9576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c75650000000000604482015290519081900360640190fd5b8560ff16601b14806114fe57508560ff16601c145b61154f576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c75650000000000604482015290519081900360640190fd5b600060018288888860405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156115ab573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906115ff57508a6001600160a01b0316816001600160a01b0316145b61163a5760405162461bcd60e51b8152600401808060200182810382526021815260200180611a9a6021913960400191505060405180910390fd5b6001600160a01b038b16600090815260056020526040902061165b90611945565b6116668b8b8b61194e565b5050505050505050505050565b6001600160a01b039182166000908152600d6020908152604080832093909416825291909152205490565b6007546001600160a01b031681565b60006116ef83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119b0565b9392505050565b60008261170557506000610751565b8282028284828161171257fe5b04146116ef5760405162461bcd60e51b8152600401808060200182810382526021815260200180611abb6021913960400191505060405180910390fd5b6000828201838110156116ef576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080600085116117bb5760006117d1565b6117d1856106d586670de0b6b3a76400006116f6565b905060096040518060e001604052808581526020018381526020018781526020016117fa610e9b565b815260200186815260200161180d6109bc565b81524360209182015282546001818101855560009485529382902083516007909202019081558282015193810193909355604080830151600280860191909155606084015160038601556080840151600486015560a0840151600586015560c0909301516006909401939093559054825142815291820152815185927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4928290030190a2827f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb2826118dc6109bc565b6040805192835260208301919091528051918290030190a2506001949350505050565b60006116ef83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a15565b5490565b80546001019055565b6001600160a01b038084166000818152600d6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600081836119ff5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bb5578181015183820152602001610b9d565b506000838581611a0b57fe5b0495945050505050565b60008184841115611a675760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bb5578181015183820152602001610b9d565b50505090039056fe7374616b696e67436f6e74726163742063616e6e6f7420626520746865207a65726f20616464726573735a65726f537761705065726d69743a20496e76616c6964207369676e6174757265536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207c45cfb8ea0a555a20f09b916a44567170e7edab767add1c41ff19a682d34c6564736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806373c69eb7116100f9578063a457c2d711610097578063c4d66de811610071578063c4d66de814610517578063d505accf1461053d578063dd62ed3e1461058e578063ee99205c146105bc576101c4565b8063a457c2d7146104b7578063a9059cbb146104e3578063bf7e214f1461050f576101c4565b80637ecebe00116100d35780637ecebe00146104795780639358928b1461049f57806395d89b41146104a75780639ce110d7146104af576101c4565b806373c69eb7146103df5780637965d56d146104345780637a9e5e4b14610451576101c4565b80632df75cb1116101665780633950935111610140578063395093511461034c57806340a5737f1461037857806361d027b31461039557806370a08231146103b9576101c4565b80632df75cb11461031e57806330adf81f14610326578063313ce5671461032e576101c4565b806318160ddd116101a257806318160ddd146102bb5780631bd39674146102c357806323b872dd146102e05780632986c0e514610316576101c4565b8063058ecdb4146101c957806306fdde03146101fe578063095ea7b31461027b575b600080fd5b6101ec600480360360408110156101df57600080fd5b50803590602001356105c4565b60408051918252519081900360200190f35b610206610757565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610240578181015183820152602001610228565b50505050905090810190601f16801561026d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102a76004803603604081101561029157600080fd5b506001600160a01b0381351690602001356107ed565b604080519115158252519081900360200190f35b6101ec610853565b6101ec600480360360208110156102d957600080fd5b5035610859565b6102a7600480360360608110156102f657600080fd5b506001600160a01b03813581169160208101359091169060400135610870565b6101ec6109bc565b6101ec6109ce565b6101ec6109d4565b6103366109f8565b6040805160ff9092168252519081900360200190f35b6102a76004803603604081101561036257600080fd5b506001600160a01b038135169060200135610a1c565b6102a76004803603602081101561038e57600080fd5b5035610aaf565b61039d610c8e565b604080516001600160a01b039092168252519081900360200190f35b6101ec600480360360208110156103cf57600080fd5b50356001600160a01b0316610c9d565b6103fc600480360360208110156103f557600080fd5b5035610cc5565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6101ec6004803603602081101561044a57600080fd5b5035610d17565b6104776004803603602081101561046757600080fd5b50356001600160a01b0316610d2e565b005b6101ec6004803603602081101561048f57600080fd5b50356001600160a01b0316610e7a565b6101ec610e9b565b610206610ec0565b61039d610f21565b6102a7600480360360408110156104cd57600080fd5b506001600160a01b038135169060200135610f30565b6102a7600480360360408110156104f957600080fd5b506001600160a01b038135169060200135611019565b61039d6110cd565b6102a76004803603602081101561052d57600080fd5b50356001600160a01b03166110dc565b610477600480360360e081101561055357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611258565b6101ec600480360360408110156105a457600080fd5b506001600160a01b0381358116916020013516611673565b61039d61169e565b6007546000906001600160a01b03163314610615576040805162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015290519081900360640190fd5b600080610620610e9b565b9050846106b657600254604080514281526020810192909252805186927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da492908290030190a2837f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb260006106926109bc565b6040805192835260208301919091528051918290030190a260025492505050610751565b80156106e2576106db816106d5600254886116f690919063ffffffff16565b906116ad565b91506106e6565b8491505b6002546106f3908361174f565b60028190556fffffffffffffffffffffffffffffffff1015610724576fffffffffffffffffffffffffffffffff6002555b60025461073a90660e3d2cfe61ffff19906116ad565b600b556107488186866117a9565b50600254925050505b92915050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b5050505050905090565b336000818152600d602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025490565b6000610751600b54836116f690919063ffffffff16565b6001600160a01b0383166000908152600d6020908152604080832033845290915281205461089e90836118ff565b6001600160a01b0385166000818152600d60209081526040808320338085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3600061090583610859565b6001600160a01b0386166000908152600c602052604090205490915061092b90826118ff565b6001600160a01b038087166000908152600c6020526040808220939093559086168152205461095a908261174f565b6001600160a01b038086166000818152600c602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b60006109c9600a54610d17565b905090565b600a5481565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b7f000000000000000000000000000000000000000000000000000000000000000090565b336000908152600d602090815260408083206001600160a01b0386168452909152812054610a4a908361174f565b336000818152600d602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600654604080517f452a932000000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163452a9320916004808301926020929190829003018186803b158015610b0d57600080fd5b505afa158015610b21573d6000803e3d6000fd5b505050506040513d6020811015610b3757600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b03163314610bf05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bb5578181015183820152602001610b9d565b50505050905090810190601f168015610be25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600a5415610c46576040805162461bcd60e51b815260206004820152601160248201527f496e64657820616c726561647920736574000000000000000000000000000000604482015290519081900360640190fd5b610c4f82610859565b600a81905560408051918252517fe0f56ff65799b4f6ff5b24871ec08f73b36d933db31d1452d59d2af94db99a149181900360200190a1506001919050565b600e546001600160a01b031681565b600b546001600160a01b0382166000908152600c6020526040812054909161075191906116ad565b60098181548110610cd557600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b6000610751600b54836116ad90919063ffffffff16565b600660009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d6020811015610da657600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b03163314610e225760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bb5578181015183820152602001610b9d565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6001600160a01b038116600090815260056020526040812061075190611941565b6007546000906109c990610eb7906001600160a01b0316610c9d565b600254906118ff565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107e35780601f106107b8576101008083540402835291602001916107e3565b6008546001600160a01b031681565b336000908152600d602090815260408083206001600160a01b0386168452909152812054808310610f8457336000908152600d602090815260408083206001600160a01b0388168452909152812055610fb3565b610f8e81846118ff565b336000908152600d602090815260408083206001600160a01b03891684529091529020555b336000818152600d602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60008061102583610859565b336000908152600c602052604090205490915061104290826118ff565b336000908152600c6020526040808220929092556001600160a01b0386168152205461106e908261174f565b6001600160a01b0385166000818152600c60209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b6006546001600160a01b031681565b6008546000906001600160a01b0316331461112d576040805162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015290519081900360640190fd5b6001600160a01b0382166111725760405162461bcd60e51b815260040180806020018281038252602a815260200180611a70602a913960400191505060405180910390fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038481169190911780835581166000908152600c60209081526040808320660e3d2cfe61ffff19905593546002548551908152945193169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3604080516001600160a01b038416815290517f817c653428858ed536dc085c5d8273734c517b55de44b55f5c5877a75e3373a19181900360200190a150506008805473ffffffffffffffffffffffffffffffffffffffff19169055600190565b834211156112ad576040805162461bcd60e51b815260206004820152601860248201527f5065726d69743a206578706972656420646561646c696e650000000000000000604482015290519081900360640190fd5b6001600160a01b03871660009081526005602052604081204691907f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9908a908a908a906112f990611941565b8a60405160200180878152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001828152602001965050505050505060405160208183030381529060405280519060200120905060006119017f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611385610757565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805180840194909452838101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060840152608083018790523060a0808501919091528151808503909101815260c08401825280519083012060f09490941b7fffff0000000000000000000000000000000000000000000000000000000000001660e084015260e283019390935261010280830186905283518084039091018152610122909201909252805191012090507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156114e9576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c75650000000000604482015290519081900360640190fd5b8560ff16601b14806114fe57508560ff16601c145b61154f576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c75650000000000604482015290519081900360640190fd5b600060018288888860405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156115ab573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906115ff57508a6001600160a01b0316816001600160a01b0316145b61163a5760405162461bcd60e51b8152600401808060200182810382526021815260200180611a9a6021913960400191505060405180910390fd5b6001600160a01b038b16600090815260056020526040902061165b90611945565b6116668b8b8b61194e565b5050505050505050505050565b6001600160a01b039182166000908152600d6020908152604080832093909416825291909152205490565b6007546001600160a01b031681565b60006116ef83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119b0565b9392505050565b60008261170557506000610751565b8282028284828161171257fe5b04146116ef5760405162461bcd60e51b8152600401808060200182810382526021815260200180611abb6021913960400191505060405180910390fd5b6000828201838110156116ef576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080600085116117bb5760006117d1565b6117d1856106d586670de0b6b3a76400006116f6565b905060096040518060e001604052808581526020018381526020018781526020016117fa610e9b565b815260200186815260200161180d6109bc565b81524360209182015282546001818101855560009485529382902083516007909202019081558282015193810193909355604080830151600280860191909155606084015160038601556080840151600486015560a0840151600586015560c0909301516006909401939093559054825142815291820152815185927f917acfbe39be6509ccf7fecb66a7e42ce2be1083c2d7dd3b9b7491dabddb8da4928290030190a2827f6012dbce857565c4a40974aa5de8373a761fc429077ef0c8c8611d1e20d63fb2826118dc6109bc565b6040805192835260208301919091528051918290030190a2506001949350505050565b60006116ef83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a15565b5490565b80546001019055565b6001600160a01b038084166000818152600d6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600081836119ff5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bb5578181015183820152602001610b9d565b506000838581611a0b57fe5b0495945050505050565b60008184841115611a675760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bb5578181015183820152602001610b9d565b50505090039056fe7374616b696e67436f6e74726163742063616e6e6f7420626520746865207a65726f20616464726573735a65726f537761705065726d69743a20496e76616c6964207369676e6174757265536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207c45cfb8ea0a555a20f09b916a44567170e7edab767add1c41ff19a682d34c6564736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "nonces(address)": {
        "details": "See {IERC2612Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC2612Permit-permit}."
      },
      "rebase(uint256,uint256)": {
        "params": {
          "profit_": "uint256"
        },
        "returns": {
          "_0": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rebase(uint256,uint256)": {
        "notice": "increases sTHEO supply to increase staking balances relative to profit_"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11023,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11029,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11031,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11033,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 11035,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 11499,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)2652_storage)"
      },
      {
        "astId": 11676,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "authority",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITheopetraAuthority)2501"
      },
      {
        "astId": 9387,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "stakingContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9389,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "initializer",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9431,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "rebases",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Rebase)9428_storage)dyn_storage"
      },
      {
        "astId": 9433,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "INDEX",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9464,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_gonsPerFragment",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9468,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_gonBalances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9474,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "_allowedValue",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9476,
        "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
        "label": "treasury",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Rebase)9428_storage)dyn_storage": {
        "base": "t_struct(Rebase)9428_storage",
        "encoding": "dynamic_array",
        "label": "struct pTheopetra.Rebase[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITheopetraAuthority)2501": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)2652_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)2652_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2652_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2651,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Rebase)9428_storage": {
        "encoding": "inplace",
        "label": "struct pTheopetra.Rebase",
        "members": [
          {
            "astId": 9415,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "epoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9417,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "rebase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9419,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "totalStakedBefore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9421,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "totalStakedAfter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9423,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "amountRebased",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9425,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "index",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9427,
            "contract": "src/Theopetra/pTheopetraERC20.sol:pTheopetra",
            "label": "blockNumberOccured",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}