{
  "address": "0x7f48bBa5a7755acF6E9881ef8e86Ae5db2Ec2e67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondDepo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistBondDepo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "SetSecret",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepo",
      "outputs": [
        {
          "internalType": "contract IBondDepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_autoStake",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicPreListBondDepo",
      "outputs": [
        {
          "internalType": "contract IWhitelistBondDepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_publicPreList",
          "type": "address"
        }
      ],
      "name": "setPublicPreList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "setSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistBondDepo",
      "outputs": [
        {
          "internalType": "contract IWhitelistBondDepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a4479af2e5d0ba47c285c6755c28cde4fc46cd345a43f54224dcadb1969ce6c",
  "receipt": {
    "to": null,
    "from": "0x0a4B56B375aEAfB5A02ACaeEc5Ca0F6a6efb0025",
    "contractAddress": "0x7f48bBa5a7755acF6E9881ef8e86Ae5db2Ec2e67",
    "transactionIndex": 8,
    "gasUsed": "1270029",
    "logsBloom": "0x
    "blockHash": "0xe19a1f2398086d69f97910ba051f57bb2cfa54adb0ffdc4a70d6fe9c71b654bb",
    "transactionHash": "0x0a4479af2e5d0ba47c285c6755c28cde4fc46cd345a43f54224dcadb1969ce6c",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 12432950,
        "transactionHash": "0x0a4479af2e5d0ba47c285c6755c28cde4fc46cd345a43f54224dcadb1969ce6c",
        "address": "0x7f48bBa5a7755acF6E9881ef8e86Ae5db2Ec2e67",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000d19e2973068657e68f4344bcb82e233864d302d7"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xe19a1f2398086d69f97910ba051f57bb2cfa54adb0ffdc4a70d6fe9c71b654bb"
      }
    ],
    "blockNumber": 12432950,
    "cumulativeGasUsed": "2180987",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    "0xD19E2973068657E68f4344bCB82E233864d302d7",
    "0x2C33Ef90294Ca8e8fF6e3EA9dE099b6AF5b697F8",
    "0x4805Ea3b3D3f6eDf4f632FD02e53c2aD53422356"
  ],
  "numDeployments": 1,
  "solcInputHash": "682d6eb6b0e1e7c1737c9e46435be681",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondDepo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistBondDepo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"SetSecret\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepo\",\"outputs\":[{\"internalType\":\"contract IBondDepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_autoStake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPreListBondDepo\",\"outputs\":[{\"internalType\":\"contract IWhitelistBondDepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_publicPreList\",\"type\":\"address\"}],\"name\":\"setPublicPreList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"setSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistBondDepo\",\"outputs\":[{\"internalType\":\"contract IWhitelistBondDepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256,address,address,bool,bool,bytes)\":{\"details\":\"When the address of the Public Pre-List bond depository is non-zero (as set by `setPublicPreList`),                     and `_isWhitelist` is true, then `deposit` will be called on the Public Pre-List                     (as oposed to the Private Whitelist bond depository)\",\"params\":{\"_autoStake\":\"bool, true if the payout should be automatically staked (this value is not used by the whitelist bond depository)\",\"_id\":\"the id of the bond market into which a deposit should be made\",\"_isWhitelist\":\"bool, true if the bond depository is the whitelist bond depo or public pre-list bond depo\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\",\"signature\":\"the signature for verification of a whitelisted depositor\"}},\"setPublicPreList(address)\":{\"details\":\"After setting to a non-zero address, calls to the `deposit` method with                     `_isWhitelist` == true will result in deposits being made to the Public Pre-List bond depository                     (as oposed to the Private Whitelist bond depository)                     See also `deposit` method\",\"params\":{\"_publicPreList\":\"the address of the Public Pre-List Bond Depository Contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,address,address,bool,bool,bytes)\":{\"notice\":\"Deposit to WETH, and subsequently deposit to the relevant Bond Depository\"},\"setPublicPreList(address)\":{\"notice\":\"Set the address of the Public Pre-List Bond Depository\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/WethHelper.sol\":\"WethHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"src/Interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in THEO (false, default)\\n        uint256 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n        uint256 totalDebt; // total debt from market\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        int64 bondRateFixed; // 9 decimal fixed discount expressed as a proportion (that is, a percentage in its decimal form)\\n        int64 maxBondRateVariable; // 9 decimal maximum proportion (that is, a percentage in its decimal form) discount on current market price\\n        int64 discountRateBond; // 9 decimal\\n        int64 discountRateYield; // 9 decimal\\n        uint256 maxDebt; // 9 decimal debt maximum in THEO\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint64 depositInterval; // target frequency of deposits\\n        uint64 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    struct DepositArgs {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 maxPrice;\\n        address user;\\n        address referral;\\n        bool autoStake;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return payout_ uint256\\n     * @return expiry_ uint256\\n     * @return index_ uint256\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral,\\n        bool _autoStake\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        int64[4] memory _rates, // [bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\\n        uint64[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function getMarkets() external view returns (uint256[] memory);\\n\\n    function getMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n\\n    function setDiscountRateBond(uint256 _id, int64 _discountRateBond) external;\\n\\n    function setDiscountRateYield(uint256 _id, int64 _discountRateYield) external;\\n\\n    function bondRateVariable(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x98790abf6d4903a8f5b437b9f9c1b02c44f80bdcd5907ced47fefa041f45f35b\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITheopetraAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event ManagerPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event SignerPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function whitelistSigner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb2878b057ac95bafe9f359c26c4e7b470dcd6d00df5797f992a576d79182b287\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface IWETH9 {\\n    function deposit() external payable;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x48719f45934d05b9f5e67637a2c604398274dc6f7c3e95143735d7ccb0492dc1\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IWhitelistBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWhitelistBondDepository {\\n    /**\\n     * @notice      Info about each type of market\\n     * @dev         Market::capacity is capacity remaining\\n     *              Market::quoteToken is token to accept as payment\\n     *              Market::priceFeed is address of the price consumer, to return the USD value for the quote token when deposits are made\\n     *              Market::capacityInQuote is in payment token (true) or in THEO (false, default)\\n     *              Market::sold is base tokens out\\n     *              Market::purchased quote tokens in\\n     *              Market::usdPricePerTHEO is 9 decimal USD value for each THEO bond\\n     */\\n    struct Market {\\n        uint256 capacity;\\n        IERC20 quoteToken;\\n        address priceFeed;\\n        bool capacityInQuote;\\n        uint64 sold;\\n        uint256 purchased;\\n        uint256 usdPricePerTHEO;\\n    }\\n\\n    /**\\n     * @notice      Info for creating new markets\\n     * @dev         Terms::fixedTerm is fixed term or fixed expiration\\n     *              Terms::vesting is length of time from deposit to maturity if fixed-term\\n     *              Terms::conclusion is timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n     */\\n    struct Terms {\\n        bool fixedTerm;\\n        uint48 vesting;\\n        uint48 conclusion;\\n    }\\n\\n    /**\\n     * @notice      Additional info about market\\n     * @dev         Metadata::quoteDecimals is decimals of quote token\\n     */\\n    struct Metadata {\\n        uint8 quoteDecimals;\\n    }\\n\\n    struct DepositInfo {\\n        uint256 payout_;\\n        uint256 expiry_;\\n        uint256 index_;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @param signature bytes\\n     * @return depositInfo DepositInfo\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral,\\n        bytes calldata signature\\n    ) external returns (DepositInfo memory depositInfo);\\n\\n    /**\\n     * @notice create market\\n     * @param _quoteToken IERC20 is the token used to deposit\\n     * @param _priceFeed address is address of the price consumer, to return the USD value for the quote token when deposits are made\\n     * @param _market uint256[2] is [capacity, fixed bond price (9 decimals) USD per THEO]\\n     * @param _booleans bool[2] is [capacity in quote, fixed term]\\n     * @param _terms uint256[2] is [vesting, conclusion]\\n     * @return id_ uint256 is ID of the market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        address _priceFeed,\\n        uint256[2] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function getMarkets() external view returns (uint256[] memory);\\n\\n    function getMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function calculatePrice(uint256 _bid) external view returns (uint256);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c5a0e9a7748ab56e04a65eb1a38fbdc3a5fdaca32a20d269a595c0eacc2c1f9\",\"license\":\"AGPL-3.0\"},\"src/Theopetra/WethHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../Interfaces/IWETH9.sol\\\";\\nimport \\\"../Interfaces/IBondDepository.sol\\\";\\nimport \\\"../Interfaces/IWhitelistBondDepository.sol\\\";\\n\\nimport \\\"../Types/Signed.sol\\\";\\n\\ncontract WethHelper is Signed {\\n    IWETH9 public weth;\\n    IBondDepository public bondDepo;\\n    IWhitelistBondDepository public whitelistBondDepo;\\n    IWhitelistBondDepository public publicPreListBondDepo;\\n\\n    constructor(\\n        address _weth,\\n        ITheopetraAuthority _authority,\\n        address _bondDepo,\\n        address _whitelistBondDepo\\n    ) TheopetraAccessControlled(_authority) {\\n        weth = IWETH9(_weth);\\n        bondDepo = IBondDepository(_bondDepo);\\n        whitelistBondDepo = IWhitelistBondDepository(_whitelistBondDepo);\\n    }\\n\\n    /**\\n     * @notice             Deposit to WETH, and subsequently deposit to the relevant Bond Depository\\n     * @dev                When the address of the Public Pre-List bond depository is non-zero (as set by `setPublicPreList`),\\n     *                     and `_isWhitelist` is true, then `deposit` will be called on the Public Pre-List\\n     *                     (as oposed to the Private Whitelist bond depository)\\n     * @param _id          the id of the bond market into which a deposit should be made\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @param _autoStake   bool, true if the payout should be automatically staked (this value is not used by the whitelist bond depository)\\n     * @param _isWhitelist bool, true if the bond depository is the whitelist bond depo or public pre-list bond depo\\n     * @param signature    the signature for verification of a whitelisted depositor\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral,\\n        bool _autoStake,\\n        bool _isWhitelist,\\n        bytes calldata signature\\n    ) public payable {\\n        require(msg.value > 0, \\\"No value\\\");\\n\\n        weth.deposit{ value: msg.value }();\\n\\n        if (_isWhitelist && address(publicPreListBondDepo) == address(0)) {\\n            verifySignature(\\\"\\\", signature);\\n            weth.approve(address(whitelistBondDepo), msg.value);\\n            whitelistBondDepo.deposit(_id, msg.value, _maxPrice, _user, _referral, signature);\\n        } else if (_isWhitelist) {\\n            weth.approve(address(publicPreListBondDepo), msg.value);\\n            publicPreListBondDepo.deposit(_id, msg.value, _maxPrice, _user, _referral, signature);\\n        } else {\\n            weth.approve(address(bondDepo), msg.value);\\n            bondDepo.deposit(_id, msg.value, _maxPrice, _user, _referral, _autoStake);\\n        }\\n    }\\n\\n    /**\\n     * @notice             Set the address of the Public Pre-List Bond Depository\\n     * @dev                After setting to a non-zero address, calls to the `deposit` method with\\n     *                     `_isWhitelist` == true will result in deposits being made to the Public Pre-List bond depository\\n     *                     (as oposed to the Private Whitelist bond depository)\\n     *                     See also `deposit` method\\n     * @param _publicPreList          the address of the Public Pre-List Bond Depository Contract\\n     */\\n    function setPublicPreList(address _publicPreList) external onlyGovernor {\\n        publicPreListBondDepo = IWhitelistBondDepository(_publicPreList);\\n    }\\n}\\n\",\"keccak256\":\"0x0a0decc5e2357799f15982bb0ccd088c73bb43bbc9d0277a458cc8e0a741b24f\",\"license\":\"AGPL-3.0\"},\"src/Types/Signed.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./TheopetraAccessControlled.sol\\\";\\n\\nabstract contract Signed is TheopetraAccessControlled {\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n\\n    string private _secret;\\n\\n    event SetSecret(string secret);\\n\\n    function setSecret(string calldata secret) external onlyGovernor {\\n        _secret = secret;\\n        emit SetSecret(secret);\\n    }\\n\\n    function createHash(string memory data) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), msg.sender, data, _secret));\\n    }\\n\\n    function getSigner(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        return hash.toEthSignedMessageHash().recover(signature);\\n    }\\n\\n    function isAuthorizedSigner(address extracted) internal view virtual returns (bool) {\\n        return extracted == authority.whitelistSigner();\\n    }\\n\\n    function verifySignature(string memory data, bytes calldata signature) internal view {\\n        address extracted = getSigner(createHash(data), signature);\\n        require(isAuthorizedSigner(extracted), \\\"Signature verification failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x536cd970bf4e05862d0a3f31c6eef2f31eb374caab3ec3462327b76560dd2255\",\"license\":\"BSD-3\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\n\\nabstract contract TheopetraAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\n\\n    string constant UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITheopetraAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(ITheopetraAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x335437cea6c94c4fdc75340f25a13dc97094825f30d71c36993a94a2724ebf3c\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015a6380380620015a68339810160408190526200003491620000d8565b600080546001600160a01b0319166001600160a01b038516908117825560405185927f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250600280546001600160a01b039586166001600160a01b031991821617909155600380549386169382169390931790925560048054919094169116179091555062000140565b6001600160a01b0381168114620000d557600080fd5b50565b60008060008060808587031215620000ef57600080fd5b8451620000fc81620000bf565b60208601519094506200010f81620000bf565b60408601519093506200012281620000bf565b60608601519092506200013581620000bf565b939692955090935050565b61145680620001506000396000f3fe6080604052600436106100965760003560e01c80638060e8e01161006957806392864e561161004e57806392864e561461016c578063bf7e214f1461018c578063d83a775b146101ac57600080fd5b80638060e8e0146101395780638eee17101461014c57600080fd5b806322a418661461009b5780633fc8cef3146100d75780637a9e5e4b146100f75780637ed6c92614610119575b600080fd5b3480156100a757600080fd5b506005546100bb906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e357600080fd5b506002546100bb906001600160a01b031681565b34801561010357600080fd5b50610117610112366004610fa0565b6101cc565b005b34801561012557600080fd5b50610117610134366004610fff565b610313565b61011761014736600461104f565b61043b565b34801561015857600080fd5b506004546100bb906001600160a01b031681565b34801561017857600080fd5b50610117610187366004610fa0565b61084b565b34801561019857600080fd5b506000546100bb906001600160a01b031681565b3480156101b857600080fd5b506003546100bb906001600160a01b031681565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024191906110f0565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020017f554e415554484f52495a45440000000000000000000000000000000000000000815250906102b25760405162461bcd60e51b81526004016102a99190611139565b60405180910390fd5b50600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038891906110f0565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020017f554e415554484f52495a45440000000000000000000000000000000000000000815250906103f05760405162461bcd60e51b81526004016102a99190611139565b506103fd60018383610ef2565b507fc84ba0d041142642d7c555ad8e697a8d84a7bc3fdf46d377be42ef3ad71b5eda828260405161042f929190611197565b60405180910390a15050565b6000341161048b5760405162461bcd60e51b815260206004820152600860248201527f4e6f2076616c756500000000000000000000000000000000000000000000000060448201526064016102a9565b600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b505050505082801561050a57506005546001600160a01b0316155b1561064357610529604051806020016040528060008152508383610963565b6002546004805460405163095ea7b360e01b81526001600160a01b03918216928101929092523460248301529091169063095ea7b3906044016020604051808303816000875af1158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a591906111b3565b50600480546040517f964561c40000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163964561c4916105fa918c9134918d918d918d918b918b91016111d0565b6060604051808303816000875af1158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d919061121c565b50610841565b82156107175760025460055460405163095ea7b360e01b81526001600160a01b03918216600482015234602482015291169063095ea7b3906044016020604051808303816000875af115801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c191906111b3565b506005546040517f964561c40000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063964561c4906105fa908b9034908c908c908c908a908a906004016111d0565b60025460035460405163095ea7b360e01b81526001600160a01b03918216600482015234602482015291169063095ea7b3906044016020604051808303816000875af115801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f91906111b3565b506003546040517f735bde2c000000000000000000000000000000000000000000000000000000008152600481018a9052346024820152604481018990526001600160a01b038881166064830152878116608483015286151560a48301529091169063735bde2c9060c4016060604051808303816000875af1158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190611286565b5050505b5050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c091906110f0565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020017f554e415554484f52495a45440000000000000000000000000000000000000000815250906109285760405162461bcd60e51b81526004016102a99190611139565b50600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006109ad61097185610a0a565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a4192505050565b90506109b881610a5d565b610a045760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c656400000060448201526064016102a9565b50505050565b60003033836001604051602001610a2494939291906112ef565b604051602081830303815290604052805190602001209050919050565b6000610a5682610a5085610af0565b90610b2b565b9392505050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663ef81b4d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad591906110f0565b6001600160a01b0316826001600160a01b0316149050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610a24565b6000806000610b3a8585610b4f565b91509150610b4781610bbf565b509392505050565b600080825160411415610b865760208301516040840151606085015160001a610b7a87828585610db3565b94509450505050610bb8565b825160401415610bb05760208301516040840151610ba5868383610ea0565b935093505050610bb8565b506000905060025b9250929050565b6000816004811115610bd357610bd36113e4565b1415610bdc5750565b6001816004811115610bf057610bf06113e4565b1415610c3e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102a9565b6002816004811115610c5257610c526113e4565b1415610ca05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102a9565b6003816004811115610cb457610cb46113e4565b1415610d285760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016102a9565b6004816004811115610d3c57610d3c6113e4565b1415610db05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016102a9565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610dea5750600090506003610e97565b8460ff16601b14158015610e0257508460ff16601c14155b15610e135750600090506004610e97565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e67573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e9057600060019250925050610e97565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610ed660ff86901c601b6113fa565b9050610ee487828885610db3565b935093505050935093915050565b828054610efe906112b4565b90600052602060002090601f016020900481019282610f205760008555610f66565b82601f10610f395782800160ff19823516178555610f66565b82800160010185558215610f66579182015b82811115610f66578235825591602001919060010190610f4b565b50610f72929150610f76565b5090565b5b80821115610f725760008155600101610f77565b6001600160a01b0381168114610db057600080fd5b600060208284031215610fb257600080fd5b8135610a5681610f8b565b60008083601f840112610fcf57600080fd5b50813567ffffffffffffffff811115610fe757600080fd5b602083019150836020828501011115610bb857600080fd5b6000806020838503121561101257600080fd5b823567ffffffffffffffff81111561102957600080fd5b61103585828601610fbd565b90969095509350505050565b8015158114610db057600080fd5b60008060008060008060008060e0898b03121561106b57600080fd5b8835975060208901359650604089013561108481610f8b565b9550606089013561109481610f8b565b945060808901356110a481611041565b935060a08901356110b481611041565b925060c089013567ffffffffffffffff8111156110d057600080fd5b6110dc8b828c01610fbd565b999c989b5096995094979396929594505050565b60006020828403121561110257600080fd5b8151610a5681610f8b565b60005b83811015611128578181015183820152602001611110565b83811115610a045750506000910152565b602081526000825180602084015261115881604085016020870161110d565b601f01601f19169190910160400192915050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6020815260006111ab60208301848661116c565b949350505050565b6000602082840312156111c557600080fd5b8151610a5681611041565b87815286602082015285604082015260006001600160a01b03808716606084015280861660808401525060c060a083015261120f60c08301848661116c565b9998505050505050505050565b60006060828403121561122e57600080fd5b6040516060810181811067ffffffffffffffff8211171561125f57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008060006060848603121561129b57600080fd5b8351925060208401519150604084015190509250925092565b600181811c908216806112c857607f821691505b602082108114156112e957634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808760601b168352808660601b1660148401525060288451602061133b82848701838a0161110d565b855491850191600090600181811c908083168061135957607f831692505b85831081141561137757634e487b7160e01b85526022600452602485fd5b80801561138b57600181146113a0576113d1565b60ff19851689890152888489010195506113d1565b60008c81526020902060005b858110156113c75781548a82018c01529084019088016113ac565b5050888489010195505b50939d9c50505050505050505050505050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561141b57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220e92c099a34d0f91d242d1f1cd55aeee4f1055723598dfe01d550e03e675a8aa364736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256,address,address,bool,bool,bytes)": {
        "details": "When the address of the Public Pre-List bond depository is non-zero (as set by `setPublicPreList`),                     and `_isWhitelist` is true, then `deposit` will be called on the Public Pre-List                     (as oposed to the Private Whitelist bond depository)",
        "params": {
          "_autoStake": "bool, true if the payout should be automatically staked (this value is not used by the whitelist bond depository)",
          "_id": "the id of the bond market into which a deposit should be made",
          "_isWhitelist": "bool, true if the bond depository is the whitelist bond depo or public pre-list bond depo",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout",
          "signature": "the signature for verification of a whitelisted depositor"
        }
      },
      "setPublicPreList(address)": {
        "details": "After setting to a non-zero address, calls to the `deposit` method with                     `_isWhitelist` == true will result in deposits being made to the Public Pre-List bond depository                     (as oposed to the Private Whitelist bond depository)                     See also `deposit` method",
        "params": {
          "_publicPreList": "the address of the Public Pre-List Bond Depository Contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256,address,address,bool,bool,bytes)": {
        "notice": "Deposit to WETH, and subsequently deposit to the relevant Bond Depository"
      },
      "setPublicPreList(address)": {
        "notice": "Set the address of the Public Pre-List Bond Depository"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14683,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITheopetraAuthority)2818"
      },
      {
        "astId": 14571,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "_secret",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12524,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWETH9)2943"
      },
      {
        "astId": 12527,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "bondDepo",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBondDepository)2165"
      },
      {
        "astId": 12530,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "whitelistBondDepo",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IWhitelistBondDepository)3078"
      },
      {
        "astId": 12533,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "publicPreListBondDepo",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IWhitelistBondDepository)3078"
      }
    ],
    "types": {
      "t_contract(IBondDepository)2165": {
        "encoding": "inplace",
        "label": "contract IBondDepository",
        "numberOfBytes": "20"
      },
      "t_contract(ITheopetraAuthority)2818": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)2943": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_contract(IWhitelistBondDepository)3078": {
        "encoding": "inplace",
        "label": "contract IWhitelistBondDepository",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}