{
  "address": "0xa8fcCF4D0e2f2c4451123fF2F9ddFc9be465Fa1d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IWhitelistBondDepository[]",
          "name": "_bondDepos",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "SetSecret",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_publicPreList",
          "type": "address"
        }
      ],
      "name": "addDepo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depoList",
      "outputs": [
        {
          "internalType": "contract IWhitelistBondDepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeDepo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "setSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x665a0f4f692d2befb3cc6df4b78fe5d44f60e8782420b9dabb209134696e6a2c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa8fcCF4D0e2f2c4451123fF2F9ddFc9be465Fa1d",
    "transactionIndex": 0,
    "gasUsed": "1499392",
    "logsBloom": "0x
    "blockHash": "0xa338eeca0e8241e6cd03306d2ad46a0165340bb7319fc4a7cfffd8f0be36e09a",
    "transactionHash": "0x665a0f4f692d2befb3cc6df4b78fe5d44f60e8782420b9dabb209134696e6a2c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18735883,
        "transactionHash": "0x665a0f4f692d2befb3cc6df4b78fe5d44f60e8782420b9dabb209134696e6a2c",
        "address": "0xa8fcCF4D0e2f2c4451123fF2F9ddFc9be465Fa1d",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000fe9fab692c951eeb28345b3a22008f4057eaa232"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa338eeca0e8241e6cd03306d2ad46a0165340bb7319fc4a7cfffd8f0be36e09a"
      }
    ],
    "blockNumber": 18735883,
    "cumulativeGasUsed": "1499392",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xfe9fab692c951eeb28345b3a22008f4057eaa232",
    [
      "0x747D4b0C6db8d197Aa6F8E11f4C45e95dC872C5e",
      "0xDC17fcfeaE5B998C1c016E3f690237773788Bb41",
      "0x9CC43eA3688a1D793155aA33DF1C42Af47C393Ed",
      "0x4A351C6aE3249499CBb50E8FE6566E2615386Da8"
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "9c40652a1b506da6d7d3f1fe3accf422",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IWhitelistBondDepository[]\",\"name\":\"_bondDepos\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"SetSecret\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_publicPreList\",\"type\":\"address\"}],\"name\":\"addDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depoList\",\"outputs\":[{\"internalType\":\"contract IWhitelistBondDepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"setSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addDepo(address)\":{\"details\":\"See also `deposit` method\",\"params\":{\"_publicPreList\":\"the address of the Public Pre-List Bond Depository Contract\"}},\"deposit(uint256,uint256,address,address,uint256,bool,bytes)\":{\"details\":\"When the address of the Public Pre-List bond depository is non-zero (as set by `setPublicPreList`),                     and `_isWhitelist` is true, then `deposit` will be called on the Public Pre-List                     (as oposed to the Private Whitelist bond depository)\",\"params\":{\"_id\":\"the id of the bond market into which a deposit should be made\",\"_index\":\"the index of the depo address \",\"_isWhitelist\":\"bool, true if the bond depository is the whitelist bond depo or public pre-list bond depo\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\",\"signature\":\"the signature for verification of a whitelisted depositor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDepo(address)\":{\"notice\":\"Add an address to the depository list\"},\"deposit(uint256,uint256,address,address,uint256,bool,bytes)\":{\"notice\":\"Deposit to WETH, and subsequently deposit to the relevant Bond Depository\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/WethHelper.sol\":\"WethHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"src/Interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IBondDepository {\\r\\n    // Info about each type of market\\r\\n    struct Market {\\r\\n        uint256 capacity; // capacity remaining\\r\\n        IERC20 quoteToken; // token to accept as payment\\r\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in THEO (false, default)\\r\\n        uint256 sold; // base tokens out\\r\\n        uint256 purchased; // quote tokens in\\r\\n        uint256 totalDebt; // total debt from market\\r\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\r\\n    }\\r\\n\\r\\n    // Info for creating new markets\\r\\n    struct Terms {\\r\\n        bool fixedTerm; // fixed term or fixed expiration\\r\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\r\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\r\\n        int64 bondRateFixed; // 9 decimal fixed discount expressed as a proportion (that is, a percentage in its decimal form)\\r\\n        int64 maxBondRateVariable; // 9 decimal maximum proportion (that is, a percentage in its decimal form) discount on current market price\\r\\n        int64 discountRateBond; // 9 decimal\\r\\n        int64 discountRateYield; // 9 decimal\\r\\n        uint256 maxDebt; // 9 decimal debt maximum in THEO\\r\\n    }\\r\\n\\r\\n    // Additional info about market.\\r\\n    struct Metadata {\\r\\n        uint48 lastTune; // last timestamp when control variable was tuned\\r\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\r\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\r\\n        uint64 depositInterval; // target frequency of deposits\\r\\n        uint64 tuneInterval; // frequency of tuning\\r\\n        uint8 quoteDecimals; // decimals of quote token\\r\\n    }\\r\\n\\r\\n    struct DepositArgs {\\r\\n        uint256 id;\\r\\n        uint256 amount;\\r\\n        uint256 maxPrice;\\r\\n        address user;\\r\\n        address referral;\\r\\n        bool autoStake;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deposit market\\r\\n     * @param _bid uint256\\r\\n     * @param _amount uint256\\r\\n     * @param _maxPrice uint256\\r\\n     * @param _user address\\r\\n     * @param _referral address\\r\\n     * @return payout_ uint256\\r\\n     * @return expiry_ uint256\\r\\n     * @return index_ uint256\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _bid,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice,\\r\\n        address _user,\\r\\n        address _referral,\\r\\n        bool _autoStake\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 payout_,\\r\\n            uint256 expiry_,\\r\\n            uint256 index_\\r\\n        );\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken, // token used to deposit\\r\\n        uint256[3] memory _market, // [capacity, initial price]\\r\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\r\\n        uint256[2] memory _terms, // [vesting, conclusion]\\r\\n        int64[4] memory _rates, // [bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\\r\\n        uint64[2] memory _intervals // [deposit interval, tune interval]\\r\\n    ) external returns (uint256 id_);\\r\\n\\r\\n    function close(uint256 _id) external;\\r\\n\\r\\n    function isLive(uint256 _bid) external view returns (bool);\\r\\n\\r\\n    function liveMarkets() external view returns (uint256[] memory);\\r\\n\\r\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\r\\n\\r\\n    function getMarkets() external view returns (uint256[] memory);\\r\\n\\r\\n    function getMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\r\\n\\r\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\r\\n\\r\\n    function setDiscountRateBond(uint256 _id, int64 _discountRateBond) external;\\r\\n\\r\\n    function setDiscountRateYield(uint256 _id, int64 _discountRateYield) external;\\r\\n\\r\\n    function bondRateVariable(uint256 _id) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x61392140c094d6f586998f4326d15166d966bf715b9efd11b4462d29f6b5bc13\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x883d9eb9e27b20a216380bc925327f3e54fc960786816babdb5564aa5ddab84a\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface ITheopetraAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event ManagerPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n    event SignerPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function whitelistSigner() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x49e1a41d2165ac83d9e6f5d082525be2d6703b832820ddc69b4b5a1687200f62\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IWETH9 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function approve(address guy, uint256 wad) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x7efb7bdd67ac78b7b173a09c90f958e732c8ae131b26605858e8db699c2cc376\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IWhitelistBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IWhitelistBondDepository {\\r\\n    /**\\r\\n     * @notice      Info about each type of market\\r\\n     * @dev         Market::capacity is capacity remaining\\r\\n     *              Market::quoteToken is token to accept as payment\\r\\n     *              Market::priceFeed is address of the price consumer, to return the USD value for the quote token when deposits are made\\r\\n     *              Market::capacityInQuote is in payment token (true) or in THEO (false, default)\\r\\n     *              Market::sold is base tokens out\\r\\n     *              Market::purchased quote tokens in\\r\\n     *              Market::usdPricePerTHEO is 9 decimal USD value for each THEO bond\\r\\n     */\\r\\n    struct Market {\\r\\n        uint256 capacity;\\r\\n        IERC20 quoteToken;\\r\\n        address priceFeed;\\r\\n        bool capacityInQuote;\\r\\n        uint64 sold;\\r\\n        uint256 purchased;\\r\\n        uint256 usdPricePerTHEO;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Info for creating new markets\\r\\n     * @dev         Terms::fixedTerm is fixed term or fixed expiration\\r\\n     *              Terms::vesting is length of time from deposit to maturity if fixed-term\\r\\n     *              Terms::conclusion is timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\r\\n     */\\r\\n    struct Terms {\\r\\n        bool fixedTerm;\\r\\n        uint48 vesting;\\r\\n        uint48 conclusion;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice      Additional info about market\\r\\n     * @dev         Metadata::quoteDecimals is decimals of quote token\\r\\n     */\\r\\n    struct Metadata {\\r\\n        uint8 quoteDecimals;\\r\\n    }\\r\\n\\r\\n    struct DepositInfo {\\r\\n        uint256 payout_;\\r\\n        uint256 expiry_;\\r\\n        uint256 index_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deposit market\\r\\n     * @param _bid uint256\\r\\n     * @param _amount uint256\\r\\n     * @param _maxPrice uint256\\r\\n     * @param _user address\\r\\n     * @param _referral address\\r\\n     * @param signature bytes\\r\\n     * @return depositInfo DepositInfo\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _bid,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice,\\r\\n        address _user,\\r\\n        address _referral,\\r\\n        bytes calldata signature\\r\\n    ) external returns (DepositInfo memory depositInfo);\\r\\n\\r\\n    /**\\r\\n     * @notice create market\\r\\n     * @param _quoteToken IERC20 is the token used to deposit\\r\\n     * @param _priceFeed address is address of the price consumer, to return the USD value for the quote token when deposits are made\\r\\n     * @param _market uint256[2] is [capacity, fixed bond price (9 decimals) USD per THEO]\\r\\n     * @param _booleans bool[2] is [capacity in quote, fixed term]\\r\\n     * @param _terms uint256[2] is [vesting, conclusion]\\r\\n     * @return id_ uint256 is ID of the market\\r\\n     */\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        address _priceFeed,\\r\\n        uint256[2] memory _market,\\r\\n        bool[2] memory _booleans,\\r\\n        uint256[2] memory _terms\\r\\n    ) external returns (uint256 id_);\\r\\n\\r\\n    function close(uint256 _id) external;\\r\\n\\r\\n    function isLive(uint256 _bid) external view returns (bool);\\r\\n\\r\\n    function liveMarkets() external view returns (uint256[] memory);\\r\\n\\r\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\r\\n\\r\\n    function getMarkets() external view returns (uint256[] memory);\\r\\n\\r\\n    function getMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\r\\n\\r\\n    function calculatePrice(uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xfb42d01abaf0606640df6ccae96217fa3604923111579b30960dcc4ec946ef53\",\"license\":\"AGPL-3.0\"},\"src/Theopetra/WethHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"../Interfaces/IWETH9.sol\\\";\\r\\nimport \\\"../Interfaces/IBondDepository.sol\\\";\\r\\nimport \\\"../Interfaces/IWhitelistBondDepository.sol\\\";\\r\\n\\r\\nimport \\\"../Types/Signed.sol\\\";\\r\\n\\r\\ncontract WethHelper is Signed {\\r\\n    IWETH9 public weth;\\r\\n    IWhitelistBondDepository[] public depoList;\\r\\n\\r\\n    constructor(\\r\\n        address _weth,\\r\\n        ITheopetraAuthority _authority,\\r\\n        IWhitelistBondDepository[] memory _bondDepos\\r\\n    ) TheopetraAccessControlled(_authority) {\\r\\n        weth = IWETH9(_weth);\\r\\n        for (uint256 i=0; i < _bondDepos.length; ++i) {\\r\\n            depoList.push(_bondDepos[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             Deposit to WETH, and subsequently deposit to the relevant Bond Depository\\r\\n     * @dev                When the address of the Public Pre-List bond depository is non-zero (as set by `setPublicPreList`),\\r\\n     *                     and `_isWhitelist` is true, then `deposit` will be called on the Public Pre-List\\r\\n     *                     (as oposed to the Private Whitelist bond depository)\\r\\n     * @param _id          the id of the bond market into which a deposit should be made\\r\\n     * @param _maxPrice    the maximum price at which to buy\\r\\n     * @param _user        the recipient of the payout\\r\\n     * @param _referral    the front end operator address\\r\\n     * @param _index       the index of the depo address \\r\\n     * @param _isWhitelist bool, true if the bond depository is the whitelist bond depo or public pre-list bond depo\\r\\n     * @param signature    the signature for verification of a whitelisted depositor\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _id,\\r\\n        uint256 _maxPrice,\\r\\n        address _user,\\r\\n        address _referral,\\r\\n        uint256 _index,\\r\\n        bool _isWhitelist,\\r\\n        bytes calldata signature\\r\\n    ) public payable {\\r\\n        require(msg.value > 0, \\\"No value\\\");\\r\\n        require(_index <= depoList.length, \\\"Depo does not exist\\\");\\r\\n\\r\\n        weth.deposit{ value: msg.value }();\\r\\n        weth.approve(address(depoList[_index]), msg.value);\\r\\n\\r\\n        if (_isWhitelist) {\\r\\n            verifySignature(\\\"\\\", signature);\\r\\n            weth.approve(address(depoList[_index]), msg.value);\\r\\n            depoList[_index].deposit(_id, msg.value, _maxPrice, _user, _referral, signature);\\r\\n        } else {\\r\\n            weth.approve(address(depoList[_index]), msg.value);\\r\\n            depoList[_index].deposit(_id, msg.value, _maxPrice, _user, _referral, signature);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             Add an address to the depository list\\r\\n     * @dev                See also `deposit` method\\r\\n     * @param _publicPreList          the address of the Public Pre-List Bond Depository Contract\\r\\n     */\\r\\n    function addDepo(address _publicPreList) external onlyGovernor {\\r\\n        depoList.push(IWhitelistBondDepository(_publicPreList));\\r\\n    }\\r\\n\\r\\n    function removeDepo(uint256 index) external onlyGovernor {\\r\\n        require(index < depoList.length, \\\"Index does not exist\\\");\\r\\n        depoList[index] = depoList[depoList.length - 1];\\r\\n        depoList.pop();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc0632ada6da584824a78ed11832565251138f978c678e8af4e86706b46de48b7\",\"license\":\"AGPL-3.0\"},\"src/Types/Signed.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\nimport \\\"./TheopetraAccessControlled.sol\\\";\\r\\n\\r\\nabstract contract Signed is TheopetraAccessControlled {\\r\\n    using Strings for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    string private _secret;\\r\\n\\r\\n    event SetSecret(string secret);\\r\\n\\r\\n    function setSecret(string calldata secret) external onlyGovernor {\\r\\n        _secret = secret;\\r\\n        emit SetSecret(secret);\\r\\n    }\\r\\n\\r\\n    function createHash(string memory data) internal view returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(address(this), msg.sender, data, _secret));\\r\\n    }\\r\\n\\r\\n    function getSigner(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        return hash.toEthSignedMessageHash().recover(signature);\\r\\n    }\\r\\n\\r\\n    function isAuthorizedSigner(address extracted) internal view virtual returns (bool) {\\r\\n        return extracted == authority.whitelistSigner();\\r\\n    }\\r\\n\\r\\n    function verifySignature(string memory data, bytes calldata signature) internal view {\\r\\n        address extracted = getSigner(createHash(data), signature);\\r\\n        require(isAuthorizedSigner(extracted), \\\"Signature verification failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8299198d3f51acb4912a72b1d7b3848312587a28ff73f1dd959df0342784d68e\",\"license\":\"BSD-3\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\r\\n\\r\\nabstract contract TheopetraAccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\r\\n\\r\\n    string constant UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    ITheopetraAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(ITheopetraAuthority _authority) {\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian() {\\r\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy() {\\r\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b24eccb8310ffc8bdc364d6cff67fb41dbfafcb279c116dbf2687051d34c155\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019c2380380620019c2833981016040819052620000349162000152565b600080546001600160a01b0319166001600160a01b038416908117825560405184927f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250600280546001600160a01b0319166001600160a01b03851617905560005b815181101562000107576003828281518110620000b957620000b962000252565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055620000ff8162000268565b905062000098565b5050505062000292565b6001600160a01b03811681146200012757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80516200014d8162000111565b919050565b6000806000606084860312156200016857600080fd5b8351620001758162000111565b809350506020808501516200018a8162000111565b60408601519093506001600160401b0380821115620001a857600080fd5b818701915087601f830112620001bd57600080fd5b815181811115620001d257620001d26200012a565b8060051b604051601f19603f83011681018181108582111715620001fa57620001fa6200012a565b60405291825284820192508381018501918a8311156200021957600080fd5b938501935b828510156200024257620002328562000140565b845293850193928501926200021e565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200028b57634e487b7160e01b600052601160045260246000fd5b5060010190565b61172080620002a26000396000f3fe60806040526004361061007b5760003560e01c80637ed6c9261161004e5780637ed6c926146101115780638617dd4c14610131578063adaba18414610151578063bf7e214f1461017157600080fd5b8063262e0d67146100805780633fc8cef3146100bc5780634a701cf4146100dc5780637a9e5e4b146100f1575b600080fd5b34801561008c57600080fd5b506100a061009b366004611228565b610191565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506002546100a0906001600160a01b031681565b6100ef6100ea3660046112a6565b6101bb565b005b3480156100fd57600080fd5b506100ef61010c36600461133e565b6106a2565b34801561011d57600080fd5b506100ef61012c36600461135b565b6107c4565b34801561013d57600080fd5b506100ef61014c366004611228565b6108db565b34801561015d57600080fd5b506100ef61016c36600461133e565b610ad4565b34801561017d57600080fd5b506000546100a0906001600160a01b031681565b600381815481106101a157600080fd5b6000918252602090912001546001600160a01b0316905081565b600034116102105760405162461bcd60e51b815260206004820152600860248201527f4e6f2076616c756500000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6003548411156102625760405162461bcd60e51b815260206004820152601360248201527f4465706f20646f6573206e6f74206578697374000000000000000000000000006044820152606401610207565b600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b5050600254600380546001600160a01b03909216945063095ea7b393509150879081106102f5576102f561139d565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b0390911660048201523460248201526044016020604051808303816000875af1158015610365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038991906113b3565b508215610523576103aa604051806020016040528060008152508383610c00565b600254600380546001600160a01b039092169163095ea7b39190879081106103d4576103d461139d565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b0390911660048201523460248201526044016020604051808303816000875af1158015610444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046891906113b3565b506003848154811061047c5761047c61139d565b6000918252602090912001546040517f964561c40000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063964561c4906104da908b9034908c908c908c908a908a906004016113fb565b6060604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611447565b50610698565b600254600380546001600160a01b039092169163095ea7b391908790811061054d5761054d61139d565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b0390911660048201523460248201526044016020604051808303816000875af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906113b3565b50600384815481106105f5576105f561139d565b6000918252602090912001546040517f964561c40000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063964561c490610653908b9034908c908c908c908a908a906004016113fb565b6060604051808303816000875af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190611447565b505b5050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071791906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b8152509061076e5760405162461bcd60e51b815260040161020791906114fa565b506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610815573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083991906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906108905760405162461bcd60e51b815260040161020791906114fa565b5061089d6001838361118f565b507fc84ba0d041142642d7c555ad8e697a8d84a7bc3fdf46d377be42ef3ad71b5eda82826040516108cf92919061152d565b60405180910390a15050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906109a75760405162461bcd60e51b815260040161020791906114fa565b5060035481106109f95760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f742065786973740000000000000000000000006044820152606401610207565b60038054610a099060019061155f565b81548110610a1957610a1961139d565b600091825260209091200154600380546001600160a01b039092169183908110610a4557610a4561139d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610a8457610a84611576565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4991906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b81525090610ba05760405162461bcd60e51b815260040161020791906114fa565b50600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610c4a610c0e85610ca7565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cde92505050565b9050610c5581610cfa565b610ca15760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c65640000006044820152606401610207565b50505050565b60003033836001604051602001610cc194939291906115c7565b604051602081830303815290604052805190602001209050919050565b6000610cf382610ced85610d8d565b90610dc8565b9392505050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663ef81b4d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906114b1565b6001600160a01b0316826001600160a01b0316149050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610cc1565b6000806000610dd78585610dec565b91509150610de481610e5c565b509392505050565b600080825160411415610e235760208301516040840151606085015160001a610e1787828585611050565b94509450505050610e55565b825160401415610e4d5760208301516040840151610e4286838361113d565b935093505050610e55565b506000905060025b9250929050565b6000816004811115610e7057610e706116bc565b1415610e795750565b6001816004811115610e8d57610e8d6116bc565b1415610edb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610207565b6002816004811115610eef57610eef6116bc565b1415610f3d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610207565b6003816004811115610f5157610f516116bc565b1415610fc55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610207565b6004816004811115610fd957610fd96116bc565b141561104d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610207565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156110875750600090506003611134565b8460ff16601b1415801561109f57508460ff16601c14155b156110b05750600090506004611134565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611104573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661112d57600060019250925050611134565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161117360ff86901c601b6116d2565b905061118187828885611050565b935093505050935093915050565b82805461119b9061158c565b90600052602060002090601f0160209004810192826111bd5760008555611203565b82601f106111d65782800160ff19823516178555611203565b82800160010185558215611203579182015b828111156112035782358255916020019190600101906111e8565b5061120f929150611213565b5090565b5b8082111561120f5760008155600101611214565b60006020828403121561123a57600080fd5b5035919050565b6001600160a01b038116811461104d57600080fd5b801515811461104d57600080fd5b60008083601f84011261127657600080fd5b50813567ffffffffffffffff81111561128e57600080fd5b602083019150836020828501011115610e5557600080fd5b60008060008060008060008060e0898b0312156112c257600080fd5b883597506020890135965060408901356112db81611241565b955060608901356112eb81611241565b94506080890135935060a089013561130281611256565b925060c089013567ffffffffffffffff81111561131e57600080fd5b61132a8b828c01611264565b999c989b5096995094979396929594505050565b60006020828403121561135057600080fd5b8135610cf381611241565b6000806020838503121561136e57600080fd5b823567ffffffffffffffff81111561138557600080fd5b61139185828601611264565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156113c557600080fd5b8151610cf381611256565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b87815286602082015285604082015260006001600160a01b03808716606084015280861660808401525060c060a083015261143a60c0830184866113d0565b9998505050505050505050565b60006060828403121561145957600080fd5b6040516060810181811067ffffffffffffffff8211171561148a57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000602082840312156114c357600080fd5b8151610cf381611241565b60005b838110156114e95781810151838201526020016114d1565b83811115610ca15750506000910152565b60208152600082518060208401526115198160408501602087016114ce565b601f01601f19169190910160400192915050565b6020815260006115416020830184866113d0565b949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561157157611571611549565b500390565b634e487b7160e01b600052603160045260246000fd5b600181811c908216806115a057607f821691505b602082108114156115c157634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808760601b168352808660601b1660148401525060288451602061161382848701838a016114ce565b855491850191600090600181811c908083168061163157607f831692505b85831081141561164f57634e487b7160e01b85526022600452602485fd5b8080156116635760018114611678576116a9565b60ff19851689890152888489010195506116a9565b60008c81526020902060005b8581101561169f5781548a82018c0152908401908801611684565b5050888489010195505b50939d9c50505050505050505050505050565b634e487b7160e01b600052602160045260246000fd5b600082198211156116e5576116e5611549565b50019056fea2646970667358221220714ed925f16c0192b0a13cfdd366ae9328e40748babf807bda53b4f645bd4ec964736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80637ed6c9261161004e5780637ed6c926146101115780638617dd4c14610131578063adaba18414610151578063bf7e214f1461017157600080fd5b8063262e0d67146100805780633fc8cef3146100bc5780634a701cf4146100dc5780637a9e5e4b146100f1575b600080fd5b34801561008c57600080fd5b506100a061009b366004611228565b610191565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506002546100a0906001600160a01b031681565b6100ef6100ea3660046112a6565b6101bb565b005b3480156100fd57600080fd5b506100ef61010c36600461133e565b6106a2565b34801561011d57600080fd5b506100ef61012c36600461135b565b6107c4565b34801561013d57600080fd5b506100ef61014c366004611228565b6108db565b34801561015d57600080fd5b506100ef61016c36600461133e565b610ad4565b34801561017d57600080fd5b506000546100a0906001600160a01b031681565b600381815481106101a157600080fd5b6000918252602090912001546001600160a01b0316905081565b600034116102105760405162461bcd60e51b815260206004820152600860248201527f4e6f2076616c756500000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6003548411156102625760405162461bcd60e51b815260206004820152601360248201527f4465706f20646f6573206e6f74206578697374000000000000000000000000006044820152606401610207565b600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b5050600254600380546001600160a01b03909216945063095ea7b393509150879081106102f5576102f561139d565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b0390911660048201523460248201526044016020604051808303816000875af1158015610365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038991906113b3565b508215610523576103aa604051806020016040528060008152508383610c00565b600254600380546001600160a01b039092169163095ea7b39190879081106103d4576103d461139d565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b0390911660048201523460248201526044016020604051808303816000875af1158015610444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046891906113b3565b506003848154811061047c5761047c61139d565b6000918252602090912001546040517f964561c40000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063964561c4906104da908b9034908c908c908c908a908a906004016113fb565b6060604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611447565b50610698565b600254600380546001600160a01b039092169163095ea7b391908790811061054d5761054d61139d565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b0390911660048201523460248201526044016020604051808303816000875af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906113b3565b50600384815481106105f5576105f561139d565b6000918252602090912001546040517f964561c40000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063964561c490610653908b9034908c908c908c908a908a906004016113fb565b6060604051808303816000875af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190611447565b505b5050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071791906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b8152509061076e5760405162461bcd60e51b815260040161020791906114fa565b506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610815573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083991906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906108905760405162461bcd60e51b815260040161020791906114fa565b5061089d6001838361118f565b507fc84ba0d041142642d7c555ad8e697a8d84a7bc3fdf46d377be42ef3ad71b5eda82826040516108cf92919061152d565b60405180910390a15050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906109a75760405162461bcd60e51b815260040161020791906114fa565b5060035481106109f95760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f742065786973740000000000000000000000006044820152606401610207565b60038054610a099060019061155f565b81548110610a1957610a1961139d565b600091825260209091200154600380546001600160a01b039092169183908110610a4557610a4561139d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610a8457610a84611576565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4991906114b1565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b81525090610ba05760405162461bcd60e51b815260040161020791906114fa565b50600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610c4a610c0e85610ca7565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cde92505050565b9050610c5581610cfa565b610ca15760405162461bcd60e51b815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c65640000006044820152606401610207565b50505050565b60003033836001604051602001610cc194939291906115c7565b604051602081830303815290604052805190602001209050919050565b6000610cf382610ced85610d8d565b90610dc8565b9392505050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663ef81b4d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906114b1565b6001600160a01b0316826001600160a01b0316149050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610cc1565b6000806000610dd78585610dec565b91509150610de481610e5c565b509392505050565b600080825160411415610e235760208301516040840151606085015160001a610e1787828585611050565b94509450505050610e55565b825160401415610e4d5760208301516040840151610e4286838361113d565b935093505050610e55565b506000905060025b9250929050565b6000816004811115610e7057610e706116bc565b1415610e795750565b6001816004811115610e8d57610e8d6116bc565b1415610edb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610207565b6002816004811115610eef57610eef6116bc565b1415610f3d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610207565b6003816004811115610f5157610f516116bc565b1415610fc55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610207565b6004816004811115610fd957610fd96116bc565b141561104d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610207565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156110875750600090506003611134565b8460ff16601b1415801561109f57508460ff16601c14155b156110b05750600090506004611134565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611104573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661112d57600060019250925050611134565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161117360ff86901c601b6116d2565b905061118187828885611050565b935093505050935093915050565b82805461119b9061158c565b90600052602060002090601f0160209004810192826111bd5760008555611203565b82601f106111d65782800160ff19823516178555611203565b82800160010185558215611203579182015b828111156112035782358255916020019190600101906111e8565b5061120f929150611213565b5090565b5b8082111561120f5760008155600101611214565b60006020828403121561123a57600080fd5b5035919050565b6001600160a01b038116811461104d57600080fd5b801515811461104d57600080fd5b60008083601f84011261127657600080fd5b50813567ffffffffffffffff81111561128e57600080fd5b602083019150836020828501011115610e5557600080fd5b60008060008060008060008060e0898b0312156112c257600080fd5b883597506020890135965060408901356112db81611241565b955060608901356112eb81611241565b94506080890135935060a089013561130281611256565b925060c089013567ffffffffffffffff81111561131e57600080fd5b61132a8b828c01611264565b999c989b5096995094979396929594505050565b60006020828403121561135057600080fd5b8135610cf381611241565b6000806020838503121561136e57600080fd5b823567ffffffffffffffff81111561138557600080fd5b61139185828601611264565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156113c557600080fd5b8151610cf381611256565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b87815286602082015285604082015260006001600160a01b03808716606084015280861660808401525060c060a083015261143a60c0830184866113d0565b9998505050505050505050565b60006060828403121561145957600080fd5b6040516060810181811067ffffffffffffffff8211171561148a57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000602082840312156114c357600080fd5b8151610cf381611241565b60005b838110156114e95781810151838201526020016114d1565b83811115610ca15750506000910152565b60208152600082518060208401526115198160408501602087016114ce565b601f01601f19169190910160400192915050565b6020815260006115416020830184866113d0565b949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561157157611571611549565b500390565b634e487b7160e01b600052603160045260246000fd5b600181811c908216806115a057607f821691505b602082108114156115c157634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808760601b168352808660601b1660148401525060288451602061161382848701838a016114ce565b855491850191600090600181811c908083168061163157607f831692505b85831081141561164f57634e487b7160e01b85526022600452602485fd5b8080156116635760018114611678576116a9565b60ff19851689890152888489010195506116a9565b60008c81526020902060005b8581101561169f5781548a82018c0152908401908801611684565b5050888489010195505b50939d9c50505050505050505050505050565b634e487b7160e01b600052602160045260246000fd5b600082198211156116e5576116e5611549565b50019056fea2646970667358221220714ed925f16c0192b0a13cfdd366ae9328e40748babf807bda53b4f645bd4ec964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addDepo(address)": {
        "details": "See also `deposit` method",
        "params": {
          "_publicPreList": "the address of the Public Pre-List Bond Depository Contract"
        }
      },
      "deposit(uint256,uint256,address,address,uint256,bool,bytes)": {
        "details": "When the address of the Public Pre-List bond depository is non-zero (as set by `setPublicPreList`),                     and `_isWhitelist` is true, then `deposit` will be called on the Public Pre-List                     (as oposed to the Private Whitelist bond depository)",
        "params": {
          "_id": "the id of the bond market into which a deposit should be made",
          "_index": "the index of the depo address ",
          "_isWhitelist": "bool, true if the bond depository is the whitelist bond depo or public pre-list bond depo",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout",
          "signature": "the signature for verification of a whitelisted depositor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDepo(address)": {
        "notice": "Add an address to the depository list"
      },
      "deposit(uint256,uint256,address,address,uint256,bool,bytes)": {
        "notice": "Deposit to WETH, and subsequently deposit to the relevant Bond Depository"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1501,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITheopetraAuthority)999"
      },
      {
        "astId": 1389,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "_secret",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1160,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWETH9)1014"
      },
      {
        "astId": 1164,
        "contract": "src/Theopetra/WethHelper.sol:WethHelper",
        "label": "depoList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IWhitelistBondDepository)1149)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(IWhitelistBondDepository)1149)dyn_storage": {
        "base": "t_contract(IWhitelistBondDepository)1149",
        "encoding": "dynamic_array",
        "label": "contract IWhitelistBondDepository[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITheopetraAuthority)999": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)1014": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_contract(IWhitelistBondDepository)1149": {
        "encoding": "inplace",
        "label": "contract IWhitelistBondDepository",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}