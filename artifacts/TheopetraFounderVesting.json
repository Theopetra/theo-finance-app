{
  "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_theo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fdvTarget",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unlockTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unlockAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InitialMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFdvFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getReleasable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTotalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnlockedMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
  "receipt": {
    "to": null,
    "from": "0xd48b6DC368869914C9aEC20E6eeB1C248EEAf93C",
    "contractAddress": "0x99Fc868934dA64dfB418B0860327150823C2C802",
    "transactionIndex": 121,
    "gasUsed": "3469588",
    "logsBloom": "0x
    "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841",
    "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
    "logs": [
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000fe9fab692c951eeb28345b3a22008f4057eaa232"
        ],
        "data": "0x",
        "logIndex": 292,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000ba97a9ff5328f8b8d791c226e753efb826a0edf70000000000000000000000000000000000000000000000000000000000989680",
        "logIndex": 293,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000bf18760c784335c073b181226c2825daff2ec56d0000000000000000000000000000000000000000000000000000000000989680",
        "logIndex": 294,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x0000000000000000000000008969bce75ffe8e0285431ec2a72b1b88312e9a38000000000000000000000000000000000000000000000000000000000044aa20",
        "logIndex": 295,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000b49785f9849a058d77fb9ad9e5155de4b69113ba00000000000000000000000000000000000000000000000000000000001e8480",
        "logIndex": 296,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x0000000000000000000000008a34ff9d491784fd45e4e67b236fdd3e8ccbdc18000000000000000000000000000000000000000000000000000000000007a120",
        "logIndex": 297,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x00000000000000000000000044f2f712d655ff391689be5fa0bbe12d41ddca1a00000000000000000000000000000000000000000000000000000000002dc6c0",
        "logIndex": 298,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x0000000000000000000000004dcedac8fb573d0b0a2a503ebda6d2b54735e31600000000000000000000000000000000000000000000000000000000002f4d60",
        "logIndex": 299,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x00000000000000000000000062dbef112beaac0f2650a6035424220139ced94900000000000000000000000000000000000000000000000000000000018cba80",
        "logIndex": 300,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x00000000000000000000000064d287db1813e03bce07d8dc3041e13a61de572200000000000000000000000000000000000000000000000000000000042c1d80",
        "logIndex": 301,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000636ea3248ace54e695903cb0f16029f16ae57e250000000000000000000000000000000000000000000000000000000000a7d8c0",
        "logIndex": 302,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x00000000000000000000000091a8c1c2c4ea62e94a47ad2a2d83fd5f1bae621d0000000000000000000000000000000000000000000000000000000000989680",
        "logIndex": 303,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000e59599841f395067971829b7f96c759fc5050a520000000000000000000000000000000000000000000000000000000000a7d8c0",
        "logIndex": 304,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x00000000000000000000000083a94059b4725cd051af7543eccd53c12375f9c60000000000000000000000000000000000000000000000000000000000989680",
        "logIndex": 305,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000f875ee97fbd4d248f1ecc037966329af71dfbb060000000000000000000000000000000000000000000000000000000001d905c0",
        "logIndex": 306,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x0000000000000000000000004a353506c67e8742b2474febcaf698a8b0778b7d0000000000000000000000000000000000000000000000000000000000a7d8c0",
        "logIndex": 307,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000d6cb2d2694e26fe5092e3187edd23396a7e947490000000000000000000000000000000000000000000000000000000000a7d8c0",
        "logIndex": 308,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 15462190,
        "transactionHash": "0x9a138e3901703626880f29e230fbce21726ffdcef1a7d505ed3f859391144457",
        "address": "0x99Fc868934dA64dfB418B0860327150823C2C802",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000f85ce443d3f031728e0e97503c06322c2f51a0c7000000000000000000000000000000000000000000000000000000000007a120",
        "logIndex": 309,
        "blockHash": "0xba6b24289474199d6c2614b2389b678e6fc77d2e0df2a30a628d29c2e1afa841"
      }
    ],
    "blockNumber": 15462190,
    "cumulativeGasUsed": "13202259",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfe9fab692c951eeb28345b3a22008f4057eaa232",
    "0xf3143ae15deA73F4E8F32360F6b669173c854388",
    "0xfAc0403a24229d7e2Edd994D50F5940624CBeac2",
    100000000,
    [
      "0xbA97A9fF5328f8b8d791c226E753efb826a0EDf7",
      "0xBF18760C784335c073b181226C2825daFf2EC56d",
      "0x8969Bce75FFe8E0285431ec2A72b1b88312e9A38",
      "0xb49785f9849A058d77FB9aD9e5155de4b69113ba",
      "0x8a34Ff9D491784fD45E4E67b236fdd3E8CCBdC18",
      "0x44F2f712d655fF391689bE5fa0BBE12d41DdCa1A",
      "0x4DcEdAc8fb573D0b0a2A503ebDa6D2b54735E316",
      "0x62dBef112BeAac0f2650a6035424220139cED949",
      "0x64D287Db1813e03BcE07D8DC3041E13a61de5722",
      "0x636EA3248ace54E695903cb0f16029F16AE57E25",
      "0x91a8c1C2c4EA62e94a47Ad2a2d83FD5F1BaE621D",
      "0xe59599841F395067971829b7F96c759fc5050a52",
      "0x83a94059B4725cD051Af7543eccd53c12375f9c6",
      "0xF875eE97fbD4D248F1EcC037966329AF71dFBB06",
      "0x4a353506c67E8742B2474FEBCAF698A8b0778b7D",
      "0xD6cb2D2694e26fE5092E3187EDD23396A7E94749",
      "0xf85ce443D3F031728e0e97503C06322c2F51A0c7"
    ],
    [
      10000000,
      10000000,
      4500000,
      2000000,
      500000,
      3000000,
      3100000,
      26000000,
      70000000,
      11000000,
      10000000,
      11000000,
      10000000,
      31000000,
      11000000,
      11000000,
      500000
    ],
    [
      31363200,
      33955200,
      36633600,
      39229200,
      41907600,
      44586000,
      47091600,
      49766400,
      52358400,
      55036800,
      57628800,
      60307200,
      62985600,
      65577600,
      68256000,
      70851600,
      73530000,
      76208400,
      78627600,
      81302400,
      83894400,
      86572800,
      89164800,
      91843200,
      94521600
    ],
    [
      100000000,
      137500000,
      175000000,
      212500000,
      250000000,
      287500000,
      325000000,
      362500000,
      400000000,
      437500000,
      475000000,
      512500000,
      550000000,
      587500000,
      625000000,
      662500000,
      700000000,
      737500000,
      775000000,
      812500000,
      850000000,
      887500000,
      925000000,
      962500000,
      1000000000
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "05a32013c2cd55796cc59254b92714c3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_theo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fdvTarget\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitialMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFdvFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReleasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows to split THEO payments among a group of accounts. The sender does not need to be aware that the THEO will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the THEO that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. `TheopetraFounderVesting` follows a _pull payment_ model. This means that payments are not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates an instance of `TheopetraFounderVesting` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.\"},\"getFdvFactor()\":{\"details\":\"calculated as currentFDV / FDVtarget (using 9 decimals)\",\"returns\":{\"_0\":\"uint256 proportion of FDV target, 9 decimals\"}},\"getReleasable(address,address)\":{\"details\":\"Returns the amount of tokens that could be paid to `account` at the current time.\"},\"getReleased(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"getShares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"getTotalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"getTotalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"getUnlockedMultiplier()\":{\"details\":\"Getter for unlocked multiplier for time-locked funds. This is the percent currently unlocked as a decimal ratio of 1.\"},\"rebalance()\":{\"details\":\"Mints or burns tokens for this contract to balance shares to their appropriate percentage\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"releaseAmount(address,uint256)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens specified, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"}},\"title\":\"TheopetraFounderVesting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"return the decimals in the percentage values and thus the number of shares per percentage point (1% = 10_000_000 shares)\"},\"getFdvFactor()\":{\"notice\":\"Scale the founder amount with respect to the FDV target value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/TheopetraFounderVesting.sol\":\"TheopetraFounderVesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/Interfaces/IBondCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\r\\n\\r\\npragma solidity >=0.7.5 <=0.8.10;\\r\\n\\r\\ninterface IBondCalculator {\\r\\n    function valuation(address tokenIn, uint256 amount_) external view returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x3e3d7eae0a83b25e00501a4f475065a92fd52954cf7c496480cf3bcbdf5dfaf9\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x883d9eb9e27b20a216380bc925327f3e54fc960786816babdb5564aa5ddab84a\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IFounderVesting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IFounderVesting {\\r\\n    event PayeeAdded(address account, uint256 shares);\\r\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n    event InitialMint(uint256 amount);\\r\\n\\r\\n    function getTotalShares() external view returns (uint256);\\r\\n\\r\\n    function getTotalReleased(IERC20 token) external view returns (uint256);\\r\\n\\r\\n    function getShares(address account) external view returns (uint256);\\r\\n\\r\\n    function getReleased(IERC20 token, address account) external view returns (uint256);\\r\\n\\r\\n    function release(IERC20 token) external;\\r\\n\\r\\n    function releaseAmount(IERC20 token, uint256 amount) external;\\r\\n\\r\\n    function getReleasable(IERC20 token, address account) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf1daac7e5a2eac6ba20c7e2865787e768557a509e6c52816352261dd4bff9db7\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITHEO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ITHEO is IERC20 {\\r\\n    function mint(address account_, uint256 amount_) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account_, uint256 amount_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x446c8abe63b15fdfaee00906ad453ddf1bc887a321a4607b5c318c8419c6c9db\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface ITheopetraAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event ManagerPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n    event SignerPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function whitelistSigner() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x49e1a41d2165ac83d9e6f5d082525be2d6703b832820ddc69b4b5a1687200f62\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IBondCalculator.sol\\\";\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token,\\r\\n        uint256 _profit\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 _amount, address _token) external;\\r\\n\\r\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\r\\n\\r\\n    function mint(address _recipient, uint256 _amount) external;\\r\\n\\r\\n    function manage(address _token, uint256 _amount) external;\\r\\n\\r\\n    function incurDebt(uint256 amount_, address token_) external;\\r\\n\\r\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\r\\n\\r\\n    function tokenPerformanceUpdate() external;\\r\\n\\r\\n    function baseSupply() external view returns (uint256);\\r\\n\\r\\n    function deltaTokenPrice() external view returns (int256);\\r\\n\\r\\n    function deltaTreasuryYield() external view returns (int256);\\r\\n\\r\\n    function getTheoBondingCalculator() external view returns (IBondCalculator);\\r\\n\\r\\n    function setTheoBondingCalculator(address _theoBondingCalculator) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x45035c58bb16003adfda4f8d308296291a0d6cb164ec0e01b838e47c025893d4\",\"license\":\"AGPL-3.0\"},\"src/Libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport { IERC20 } from \\\"../Interfaces/IERC20.sol\\\";\\r\\n\\r\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\r\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\r\\n/// Taken from Solmate\\r\\nlibrary SafeERC20 {\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\r\\n        );\\r\\n\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\r\\n        );\\r\\n\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\r\\n        );\\r\\n\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        (bool success, ) = to.call{ value: amount }(new bytes(0));\\r\\n\\r\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9ec668b63dca713592b25f84463679a4845b36b133eb02c04aa54e71d71c79e1\",\"license\":\"AGPL-3.0-only\"},\"src/Libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\r\\n        if (a > 3) {\\r\\n            c = a;\\r\\n            uint256 b = add(div(a, 2), 1);\\r\\n            while (b < c) {\\r\\n                c = b;\\r\\n                b = div(add(div(a, b), b), 2);\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            c = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Expects percentage to be trailed by 00,\\r\\n     */\\r\\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\\r\\n        return div(mul(total_, percentage_), 1000);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Expects percentage to be trailed by 00,\\r\\n     */\\r\\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\\r\\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\\r\\n    }\\r\\n\\r\\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\\r\\n        return div(mul(part_, 100), total_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\r\\n    }\\r\\n\\r\\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\\r\\n        return sqrrt(mul(multiplier_, payment_));\\r\\n    }\\r\\n\\r\\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\\r\\n        return mul(multiplier_, supply_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ab314eae5f50c61d18f917c9b596d7f1de560b374d6365504e445b463f49858\",\"license\":\"AGPL-3.0-or-later\"},\"src/Libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @title SignedSafeMath\\r\\n * @dev Signed math operations with safety checks that revert on error.\\r\\n */\\r\\nlibrary SignedSafeMath {\\r\\n    int256 private constant _INT256_MIN = -2**255;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two signed integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\r\\n\\r\\n        int256 c = a * b;\\r\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two signed integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\r\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\r\\n\\r\\n        int256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two signed integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two signed integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb29356e589545aa2b934c06a96cea2cd2fb8e815bf3edc7a684b10cdf7d98891\",\"license\":\"MIT\"},\"src/Theopetra/TheopetraFounderVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.5;\\r\\n\\r\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\r\\n\\r\\nimport \\\"../Libraries/SafeMath.sol\\\";\\r\\nimport \\\"../Libraries/SafeERC20.sol\\\";\\r\\nimport \\\"../Libraries/SignedSafeMath.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/IFounderVesting.sol\\\";\\r\\nimport \\\"../Interfaces/ITHEO.sol\\\";\\r\\nimport \\\"../Interfaces/ITreasury.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TheopetraFounderVesting\\r\\n * @dev This contract allows to split THEO payments among a group of accounts. The sender does not need to be aware\\r\\n * that the THEO will be split in this way, since it is handled transparently by the contract.\\r\\n *\\r\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\r\\n * account to a number of shares. Of all the THEO that this contract receives, each account will then be able to claim\\r\\n * an amount proportional to the percentage of total shares they were assigned.\\r\\n *\\r\\n * `TheopetraFounderVesting` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\r\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\r\\n * function.\\r\\n */\\r\\ncontract TheopetraFounderVesting is IFounderVesting, TheopetraAccessControlled {\\r\\n    /* ========== DEPENDENCIES ========== */\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n    ITreasury private treasury;\\r\\n    ITHEO private THEO;\\r\\n\\r\\n    uint256 private fdvTarget;\\r\\n\\r\\n    uint256 private totalShares;\\r\\n\\r\\n    mapping(address => uint256) private shares;\\r\\n    address[] private payees;\\r\\n\\r\\n    mapping(IERC20 => uint256) private erc20TotalReleased;\\r\\n    mapping(IERC20 => mapping(address => uint256)) private erc20Released;\\r\\n\\r\\n    uint256 private immutable deployTime = block.timestamp;\\r\\n    uint256[] private unlockTimes;\\r\\n    uint256[] private unlockAmounts;\\r\\n\\r\\n    bool private founderRebalanceLocked = false;\\r\\n    bool private initialized = false;\\r\\n\\r\\n    /**\\r\\n     * @notice return the decimals in the percentage values and\\r\\n     * thus the number of shares per percentage point (1% = 10_000_000 shares)\\r\\n     */\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an instance of `TheopetraFounderVesting` where each account in `payees` is assigned the number of shares at\\r\\n     * the matching position in the `shares` array.\\r\\n     *\\r\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\r\\n     * duplicates in `payees`.\\r\\n     */\\r\\n    constructor(\\r\\n        ITheopetraAuthority _authority,\\r\\n        address _treasury,\\r\\n        address _theo,\\r\\n        uint256 _fdvTarget,\\r\\n        address[] memory _payees,\\r\\n        uint256[] memory _shares,\\r\\n        uint256[] memory _unlockTimes,\\r\\n        uint256[] memory _unlockAmounts\\r\\n    ) TheopetraAccessControlled(_authority) {\\r\\n        require(_payees.length == _shares.length, \\\"TheopetraFounderVesting: payees and shares length mismatch\\\");\\r\\n        require(_payees.length > 0, \\\"TheopetraFounderVesting: no payees\\\");\\r\\n        require(\\r\\n            _unlockTimes.length == _unlockAmounts.length,\\r\\n            \\\"TheopetraFounderVesting: unlock times and amounts length mismatch\\\"\\r\\n        );\\r\\n        require(_unlockTimes.length > 0, \\\"TheopetraFounderVesting: no unlock schedule\\\");\\r\\n\\r\\n        fdvTarget = _fdvTarget;\\r\\n        THEO = ITHEO(_theo);\\r\\n        treasury = ITreasury(_treasury);\\r\\n        unlockTimes = _unlockTimes;\\r\\n        unlockAmounts = _unlockAmounts;\\r\\n\\r\\n        for (uint256 i = 0; i < _payees.length; i++) {\\r\\n            _addPayee(_payees[i], _shares[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initialMint() public onlyGovernor {\\r\\n        require(!initialized, \\\"TheopetraFounderVesting: initialMint can only be run once\\\");\\r\\n        initialized = true;\\r\\n\\r\\n        // mint tokens for the initial shares\\r\\n        uint256 tokensToMint = totalShares.mul(THEO.totalSupply()).div(10**decimals() - totalShares);\\r\\n        treasury.mint(address(this), tokensToMint);\\r\\n        emit InitialMint(tokensToMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total shares held by payees.\\r\\n     */\\r\\n    function getTotalShares() public view override returns (uint256) {\\r\\n        return totalShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\r\\n     * contract.\\r\\n     */\\r\\n    function getTotalReleased(IERC20 token) public view override returns (uint256) {\\r\\n        return erc20TotalReleased[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function getShares(address account) external view override returns (uint256) {\\r\\n        return shares[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\r\\n     * IERC20 contract.\\r\\n     */\\r\\n    function getReleased(IERC20 token, address account) public view override returns (uint256) {\\r\\n        return erc20Released[token][account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for unlocked multiplier for time-locked funds. This is the percent currently unlocked as a decimal ratio of 1.\\r\\n     */\\r\\n    function getUnlockedMultiplier() public view returns (uint256) {\\r\\n        uint256 timeSinceDeploy = block.timestamp - deployTime;\\r\\n        for (uint256 i = unlockTimes.length; i > 0; i--) {\\r\\n            if (timeSinceDeploy >= unlockTimes[i - 1]) {\\r\\n                return unlockAmounts[i - 1];\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Scale the founder amount with respect to the FDV target value\\r\\n     * @dev calculated as currentFDV / FDVtarget (using 9 decimals)\\r\\n     * @return uint256 proportion of FDV target, 9 decimals\\r\\n     */\\r\\n    function getFdvFactor() public view returns (uint256) {\\r\\n        IBondCalculator theoBondingCalculator = treasury.getTheoBondingCalculator();\\r\\n        if (address(theoBondingCalculator) == address(0)) {\\r\\n            revert(\\\"TheopetraFounderVesting: No bonding calculator\\\");\\r\\n        }\\r\\n\\r\\n        // expects valuation to be come back as fixed point with 9 decimals\\r\\n        uint256 currentPrice = IBondCalculator(theoBondingCalculator).valuation(address(THEO), 1_000_000_000);\\r\\n        uint256 calculatedFdv = currentPrice.mul(THEO.totalSupply());\\r\\n\\r\\n        if (calculatedFdv >= fdvTarget.mul(10**decimals())) {\\r\\n            return 10**decimals();\\r\\n        }\\r\\n\\r\\n        return calculatedFdv.div(fdvTarget);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints or burns tokens for this contract to balance shares to their appropriate percentage\\r\\n     */\\r\\n    function rebalance() public {\\r\\n        require(shares[msg.sender] > 0, \\\"TheopetraFounderVesting: account has no shares\\\");\\r\\n\\r\\n        uint256 totalSupply = THEO.totalSupply();\\r\\n        uint256 contractBalance = THEO.balanceOf(address(this));\\r\\n        uint256 totalReleased = erc20TotalReleased[THEO];\\r\\n\\r\\n        // Checks if rebalance has been locked\\r\\n        if (founderRebalanceLocked) return;\\r\\n\\r\\n        uint256 founderAmount = totalShares\\r\\n            .mul(totalSupply - (contractBalance + totalReleased))\\r\\n            .mul(getFdvFactor())\\r\\n            .div(10**decimals())\\r\\n            .div(10**decimals() - totalShares);\\r\\n\\r\\n        if (founderAmount > (contractBalance + totalReleased)) {\\r\\n            treasury.mint(address(this), founderAmount - (contractBalance + totalReleased));\\r\\n        } else if (founderAmount < (contractBalance + totalReleased)) {\\r\\n            THEO.burn(contractBalance + totalReleased - founderAmount);\\r\\n        }\\r\\n\\r\\n        // locks the rebalance to not occur again after it is called once after unlock schedule\\r\\n        uint256 timeSinceDeploy = block.timestamp - deployTime;\\r\\n        if (timeSinceDeploy > unlockTimes[unlockTimes.length - 1]) {\\r\\n            founderRebalanceLocked = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\r\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\r\\n     * contract.\\r\\n     */\\r\\n    function release(IERC20 token) external override {\\r\\n        address account = msg.sender;\\r\\n        require(shares[account] > 0, \\\"TheopetraFounderVesting: account has no shares\\\");\\r\\n\\r\\n        rebalance();\\r\\n\\r\\n        uint256 totalReceived = token.balanceOf(address(this)) + getTotalReleased(token);\\r\\n        uint256 payment = _pendingPayment(account, totalReceived, getReleased(token, account));\\r\\n\\r\\n        require(payment != 0, \\\"TheopetraFounderVesting: account is not due payment\\\");\\r\\n\\r\\n        erc20Released[token][account] += payment;\\r\\n        erc20TotalReleased[token] += payment;\\r\\n\\r\\n        SafeERC20.safeTransfer(token, account, payment);\\r\\n        emit ERC20PaymentReleased(token, account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens specified, according to their\\r\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\r\\n     * contract.\\r\\n     */\\r\\n    function releaseAmount(IERC20 token, uint256 amount) external override {\\r\\n        address account = msg.sender;\\r\\n        require(shares[account] > 0, \\\"TheopetraFounderVesting: account has no shares\\\");\\r\\n        require(amount > 0, \\\"TheopetraFounderVesting: amount cannot be 0\\\");\\r\\n\\r\\n        rebalance();\\r\\n\\r\\n        uint256 totalReceived = token.balanceOf(address(this)) + getTotalReleased(token);\\r\\n        uint256 payment = _pendingPayment(account, totalReceived, getReleased(token, account));\\r\\n\\r\\n        require(payment != 0, \\\"TheopetraFounderVesting: account is not due payment\\\");\\r\\n        require(amount <= payment, \\\"TheopetraFounderVesting: requested amount is more than due payment for account\\\");\\r\\n\\r\\n        erc20Released[token][account] += amount;\\r\\n        erc20TotalReleased[token] += amount;\\r\\n\\r\\n        SafeERC20.safeTransfer(token, account, amount);\\r\\n        emit ERC20PaymentReleased(token, account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens that could be paid to `account` at the current time.\\r\\n     */\\r\\n    function getReleasable(IERC20 token, address account) external view override returns (uint256) {\\r\\n        require(shares[account] > 0, \\\"TheopetraFounderVesting: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = token.balanceOf(address(this)) + getTotalReleased(token);\\r\\n        uint256 payment = _pendingPayment(account, totalReceived, getReleased(token, account));\\r\\n\\r\\n        return payment;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\r\\n     * already released amounts.\\r\\n     */\\r\\n    function _pendingPayment(\\r\\n        address account,\\r\\n        uint256 totalReceived,\\r\\n        uint256 alreadyReleased\\r\\n    ) private view returns (uint256) {\\r\\n        return\\r\\n            (totalReceived * shares[account] * getUnlockedMultiplier()) /\\r\\n            (totalShares * 10**decimals()) -\\r\\n            alreadyReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new payee to the contract.\\r\\n     * @param account The address of the payee to add.\\r\\n     * @param shares_ The number of shares owned by the payee.\\r\\n     */\\r\\n    function _addPayee(address account, uint256 shares_) private {\\r\\n        require(account != address(0), \\\"TheopetraFounderVesting: account is the zero address\\\");\\r\\n        require(shares_ > 0, \\\"TheopetraFounderVesting: shares are 0\\\");\\r\\n        require(shares[account] == 0, \\\"TheopetraFounderVesting: account already has shares\\\");\\r\\n\\r\\n        payees.push(account);\\r\\n        shares[account] = shares_;\\r\\n        totalShares = totalShares + shares_;\\r\\n        emit PayeeAdded(account, shares_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb1c85e8e9d7207fbbc4f2174d7e1b0a433889c490eda6c7b94a86abd64e31bfd\",\"license\":\"MIT\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\r\\n\\r\\nabstract contract TheopetraAccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\r\\n\\r\\n    string constant UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    ITheopetraAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(ITheopetraAuthority _authority) {\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian() {\\r\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy() {\\r\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b24eccb8310ffc8bdc364d6cff67fb41dbfafcb279c116dbf2687051d34c155\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405242608052600b805461ffff191690553480156200002057600080fd5b5060405162001f3b38038062001f3b83398181016040526101008110156200004757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200008357600080fd5b9083019060208201858111156200009957600080fd5b8251866020820283011164010000000082111715620000b757600080fd5b82525081516020918201928201910280838360005b83811015620000e6578181015183820152602001620000cc565b50505050905001604052602001805160405193929190846401000000008211156200011057600080fd5b9083019060208201858111156200012657600080fd5b82518660208202830111640100000000821117156200014457600080fd5b82525081516020918201928201910280838360005b838110156200017357818101518382015260200162000159565b50505050905001604052602001805160405193929190846401000000008211156200019d57600080fd5b908301906020820185811115620001b357600080fd5b8251866020820283011164010000000082111715620001d157600080fd5b82525081516020918201928201910280838360005b8381101562000200578181015183820152602001620001e6565b50505050905001604052602001805160405193929190846401000000008211156200022a57600080fd5b9083019060208201858111156200024057600080fd5b82518660208202830111640100000000821117156200025e57600080fd5b82525081516020918201928201910280838360005b838110156200028d57818101518382015260200162000273565b50505050919091016040819052600080546001600160a01b0319166001600160a01b038f1690811782558e965094507f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad93509150a2508251845114620003255760405162461bcd60e51b815260040180806020018281038252603a81526020018062001e73603a913960400191505060405180910390fd5b6000845111620003675760405162461bcd60e51b815260040180806020018281038252602281526020018062001ead6022913960400191505060405180910390fd5b8051825114620003a95760405162461bcd60e51b815260040180806020018281038252604181526020018062001ecf6041913960600191505060405180910390fd5b6000825111620003eb5760405162461bcd60e51b815260040180806020018281038252602b81526020018062001f10602b913960400191505060405180910390fd5b6003859055600280546001600160a01b038089166001600160a01b03199283161790925560018054928a16929091169190911790558151620004359060099060208501906200062a565b5080516200044b90600a9060208401906200062a565b5060005b84518110156200049c57620004938582815181106200046a57fe5b60200260200101518583815181106200047f57fe5b6020026020010151620004ab60201b60201c565b6001016200044f565b50505050505050505062000691565b6001600160a01b038216620004f25760405162461bcd60e51b815260040180806020018281038252603481526020018062001de76034913960400191505060405180910390fd5b60008111620005335760405162461bcd60e51b815260040180806020018281038252602581526020018062001e4e6025913960400191505060405180910390fd5b6001600160a01b038216600090815260056020526040902054156200058a5760405162461bcd60e51b815260040180806020018281038252603381526020018062001e1b6033913960400191505060405180910390fd5b60068054600181019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03841690811790915560008181526005602090815260409182902084905560048054850190558151928352820183905280517f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac9281900390910190a15050565b82805482825590600052602060002090810192821562000668579160200282015b82811115620006685782518255916020019190600101906200064b565b50620006769291506200067a565b5090565b5b808211156200067657600081556001016200067b565b608051611736620006b160003980610908528061098752506117366000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638d9f42c91161008c578063bf7e214f11610066578063bf7e214f1461020f578063cde2332c14610233578063d5002f2e1461025f578063f04da65b14610267576100ea565b80638d9f42c9146101ab5780639fc5ce2a146101d9578063a51203b0146101e1576100ea565b80637a9e5e4b116100c85780637a9e5e4b1461016d5780637d7c2a1c1461019357806381932efe1461019b57806385cc8ad9146101a3576100ea565b80630714f6ee146100ef5780631916558714610127578063313ce5671461014f575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b031661028d565b60408051918252519081900360200190f35b61014d6004803603602081101561013d57600080fd5b50356001600160a01b03166102a8565b005b610157610462565b6040805160ff9092168252519081900360200190f35b61014d6004803603602081101561018357600080fd5b50356001600160a01b0316610468565b61014d610609565b61011561097f565b610115610a07565b610115600480360360408110156101c157600080fd5b506001600160a01b0381358116916020013516610c50565b61014d610d40565b610115600480360360408110156101f757600080fd5b506001600160a01b0381358116916020013516611014565b61021761103f565b604080516001600160a01b039092168252519081900360200190f35b61014d6004803603604081101561024957600080fd5b506001600160a01b03813516906020013561104e565b610115611282565b6101156004803603602081101561027d57600080fd5b50356001600160a01b0316611288565b6001600160a01b031660009081526007602052604090205490565b336000818152600560205260409020546102f35760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b6102fb610609565b60006103068361028d565b604080516370a0823160e01b815230600482015290516001600160a01b038616916370a08231916024808301926020929190829003018186803b15801561034c57600080fd5b505afa158015610360573d6000803e3d6000fd5b505050506040513d602081101561037657600080fd5b50510190506000610391838361038c8783611014565b6112a3565b9050806103cf5760405162461bcd60e51b815260040180806020018281038252603381526020018061159f6033913960400191505060405180910390fd5b6001600160a01b03808516600081815260086020908152604080832094881683529381528382208054860190559181526007909152208054820190556104168484836112ed565b604080516001600160a01b038581168252602082018490528251908716927f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a928290030190a250505050565b60095b90565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b457600080fd5b505afa1580156104c8573d6000803e3d6000fd5b505050506040513d60208110156104de57600080fd5b505160408051808201909152600c81527f554e415554484f52495a454400000000000000000000000000000000000000006020820152906001600160a01b031633146105a85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561056d578181015183820152602001610555565b50505050905090810190601f16801561059a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b336000908152600560205260409020546106545760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d60208110156106dc57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d602081101561075957600080fd5b50516002546001600160a01b0316600090815260076020526040902054600b549192509060ff161561078d5750505061097d565b60006107dd60045461079d610462565b60ff16600a0a036107d76107af610462565b60ff16600a0a6107d76107c0610a07565b6004546107d1908a8a018c0361149c565b9061149c565b906114fc565b905081830181111561087557600154604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201528585018403602482015290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b50505050610902565b81830181101561090257600254604080517f42966c68000000000000000000000000000000000000000000000000000000008152858501849003600482015290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050505b600980547f000000000000000000000000000000000000000000000000000000000000000042039190600019810190811061093957fe5b906000526020600020015481111561097757600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50505050505b565b6009546000907f00000000000000000000000000000000000000000000000000000000000000004203905b80156109fe57600960018203815481106109c057fe5b906000526020600020015482106109f557600a60018203815481106109e157fe5b906000526020600020015492505050610465565b600019016109aa565b50600091505090565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663817f76356040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d6020811015610a8257600080fd5b505190506001600160a01b038116610acb5760405162461bcd60e51b815260040180806020018281038252602e8152602001806116d3602e913960400191505060405180910390fd5b600254604080517f4249719f0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152633b9aca0060248201529051600092841691634249719f916044808301926020929190829003018186803b158015610b3c57600080fd5b505afa158015610b50573d6000803e3d6000fd5b505050506040513d6020811015610b6657600080fd5b5051600254604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051929350600092610c00926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d6020811015610bf757600080fd5b5051839061149c565b9050610c1c610c0d610462565b6003549060ff16600a0a61149c565b8110610c3a57610c2a610462565b60ff16600a0a9350505050610465565b600354610c489082906114fc565b935050505090565b6001600160a01b038116600090815260056020526040812054610ca45760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b6000610caf8461028d565b604080516370a0823160e01b815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b158015610cf557600080fd5b505afa158015610d09573d6000803e3d6000fd5b505050506040513d6020811015610d1f57600080fd5b50510190506000610d35848361038c8883611014565b925050505b92915050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8c57600080fd5b505afa158015610da0573d6000803e3d6000fd5b505050506040513d6020811015610db657600080fd5b505160408051808201909152600c81527f554e415554484f52495a454400000000000000000000000000000000000000006020820152906001600160a01b03163314610e435760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561056d578181015183820152602001610555565b50600b54610100900460ff1615610e8b5760405162461bcd60e51b815260040180806020018281038252603981526020018061162b6039913960400191505060405180910390fd5b600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055600454600090610f5690610ec9610462565b60ff16600a0a036107d7600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d6020811015610f4b57600080fd5b50516004549061149c565b600154604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290519293506001600160a01b03909116916340c10f199160448082019260009290919082900301818387803b158015610fc557600080fd5b505af1158015610fd9573d6000803e3d6000fd5b50506040805184815290517f2c7a5ec7d0d9da219cb4c7cbf56d5d2a1bf5e1d053e526ac413bde2e085876549350908190036020019150a150565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6000546001600160a01b031681565b336000818152600560205260409020546110995760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b600082116110d85760405162461bcd60e51b815260040180806020018281038252602b8152602001806115d2602b913960400191505060405180910390fd5b6110e0610609565b60006110eb8461028d565b604080516370a0823160e01b815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b15801561113157600080fd5b505afa158015611145573d6000803e3d6000fd5b505050506040513d602081101561115b57600080fd5b50510190506000611171838361038c8883611014565b9050806111af5760405162461bcd60e51b815260040180806020018281038252603381526020018061159f6033913960400191505060405180910390fd5b808411156111ee5760405162461bcd60e51b815260040180806020018281038252604e815260200180611685604e913960600191505060405180910390fd5b6001600160a01b03808616600081815260086020908152604080832094881683529381528382208054890190559181526007909152208054850190556112358584866112ed565b604080516001600160a01b038581168252602082018790528251908816927f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a928290030190a25050505050565b60045490565b6001600160a01b031660009081526005602052604090205490565b6000816112ae610462565b60ff16600a0a600454026112c061097f565b6001600160a01b038716600090815260056020526040902054860202816112e357fe5b0403949350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106113b657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611379565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611418576040519150601f19603f3d011682016040523d82523d6000602084013e61141d565b606091505b509150915081801561144b57508051158061144b575080806020019051602081101561144857600080fd5b50515b610977576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6000826114ab57506000610d3a565b828202828482816114b857fe5b04146114f55760405162461bcd60e51b81526004018080602001828103825260218152602001806116646021913960400191505060405180910390fd5b9392505050565b60006114f583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836115885760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561056d578181015183820152602001610555565b50600083858161159457fe5b049594505050505056fe5468656f7065747261466f756e64657256657374696e673a206163636f756e74206973206e6f7420647565207061796d656e745468656f7065747261466f756e64657256657374696e673a20616d6f756e742063616e6e6f7420626520305468656f7065747261466f756e64657256657374696e673a206163636f756e7420686173206e6f207368617265735468656f7065747261466f756e64657256657374696e673a20696e697469616c4d696e742063616e206f6e6c792062652072756e206f6e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775468656f7065747261466f756e64657256657374696e673a2072657175657374656420616d6f756e74206973206d6f7265207468616e20647565207061796d656e7420666f72206163636f756e745468656f7065747261466f756e64657256657374696e673a204e6f20626f6e64696e672063616c63756c61746f72a2646970667358221220c6090123d9116d7e1e86b92ccaaf79b771adee0dcf13670ef192f351067dcccf64736f6c634300070500335468656f7065747261466f756e64657256657374696e673a206163636f756e7420697320746865207a65726f20616464726573735468656f7065747261466f756e64657256657374696e673a206163636f756e7420616c726561647920686173207368617265735468656f7065747261466f756e64657256657374696e673a207368617265732061726520305468656f7065747261466f756e64657256657374696e673a2070617965657320616e6420736861726573206c656e677468206d69736d617463685468656f7065747261466f756e64657256657374696e673a206e6f207061796565735468656f7065747261466f756e64657256657374696e673a20756e6c6f636b2074696d657320616e6420616d6f756e7473206c656e677468206d69736d617463685468656f7065747261466f756e64657256657374696e673a206e6f20756e6c6f636b207363686564756c65",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638d9f42c91161008c578063bf7e214f11610066578063bf7e214f1461020f578063cde2332c14610233578063d5002f2e1461025f578063f04da65b14610267576100ea565b80638d9f42c9146101ab5780639fc5ce2a146101d9578063a51203b0146101e1576100ea565b80637a9e5e4b116100c85780637a9e5e4b1461016d5780637d7c2a1c1461019357806381932efe1461019b57806385cc8ad9146101a3576100ea565b80630714f6ee146100ef5780631916558714610127578063313ce5671461014f575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b031661028d565b60408051918252519081900360200190f35b61014d6004803603602081101561013d57600080fd5b50356001600160a01b03166102a8565b005b610157610462565b6040805160ff9092168252519081900360200190f35b61014d6004803603602081101561018357600080fd5b50356001600160a01b0316610468565b61014d610609565b61011561097f565b610115610a07565b610115600480360360408110156101c157600080fd5b506001600160a01b0381358116916020013516610c50565b61014d610d40565b610115600480360360408110156101f757600080fd5b506001600160a01b0381358116916020013516611014565b61021761103f565b604080516001600160a01b039092168252519081900360200190f35b61014d6004803603604081101561024957600080fd5b506001600160a01b03813516906020013561104e565b610115611282565b6101156004803603602081101561027d57600080fd5b50356001600160a01b0316611288565b6001600160a01b031660009081526007602052604090205490565b336000818152600560205260409020546102f35760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b6102fb610609565b60006103068361028d565b604080516370a0823160e01b815230600482015290516001600160a01b038616916370a08231916024808301926020929190829003018186803b15801561034c57600080fd5b505afa158015610360573d6000803e3d6000fd5b505050506040513d602081101561037657600080fd5b50510190506000610391838361038c8783611014565b6112a3565b9050806103cf5760405162461bcd60e51b815260040180806020018281038252603381526020018061159f6033913960400191505060405180910390fd5b6001600160a01b03808516600081815260086020908152604080832094881683529381528382208054860190559181526007909152208054820190556104168484836112ed565b604080516001600160a01b038581168252602082018490528251908716927f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a928290030190a250505050565b60095b90565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b457600080fd5b505afa1580156104c8573d6000803e3d6000fd5b505050506040513d60208110156104de57600080fd5b505160408051808201909152600c81527f554e415554484f52495a454400000000000000000000000000000000000000006020820152906001600160a01b031633146105a85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561056d578181015183820152602001610555565b50505050905090810190601f16801561059a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b336000908152600560205260409020546106545760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d60208110156106dc57600080fd5b5051600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d602081101561075957600080fd5b50516002546001600160a01b0316600090815260076020526040902054600b549192509060ff161561078d5750505061097d565b60006107dd60045461079d610462565b60ff16600a0a036107d76107af610462565b60ff16600a0a6107d76107c0610a07565b6004546107d1908a8a018c0361149c565b9061149c565b906114fc565b905081830181111561087557600154604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201528585018403602482015290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b50505050610902565b81830181101561090257600254604080517f42966c68000000000000000000000000000000000000000000000000000000008152858501849003600482015290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050505b600980547f000000000000000000000000000000000000000000000000000000000000000042039190600019810190811061093957fe5b906000526020600020015481111561097757600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50505050505b565b6009546000907f00000000000000000000000000000000000000000000000000000000000000004203905b80156109fe57600960018203815481106109c057fe5b906000526020600020015482106109f557600a60018203815481106109e157fe5b906000526020600020015492505050610465565b600019016109aa565b50600091505090565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663817f76356040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d6020811015610a8257600080fd5b505190506001600160a01b038116610acb5760405162461bcd60e51b815260040180806020018281038252602e8152602001806116d3602e913960400191505060405180910390fd5b600254604080517f4249719f0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152633b9aca0060248201529051600092841691634249719f916044808301926020929190829003018186803b158015610b3c57600080fd5b505afa158015610b50573d6000803e3d6000fd5b505050506040513d6020811015610b6657600080fd5b5051600254604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051929350600092610c00926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d6020811015610bf757600080fd5b5051839061149c565b9050610c1c610c0d610462565b6003549060ff16600a0a61149c565b8110610c3a57610c2a610462565b60ff16600a0a9350505050610465565b600354610c489082906114fc565b935050505090565b6001600160a01b038116600090815260056020526040812054610ca45760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b6000610caf8461028d565b604080516370a0823160e01b815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b158015610cf557600080fd5b505afa158015610d09573d6000803e3d6000fd5b505050506040513d6020811015610d1f57600080fd5b50510190506000610d35848361038c8883611014565b925050505b92915050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8c57600080fd5b505afa158015610da0573d6000803e3d6000fd5b505050506040513d6020811015610db657600080fd5b505160408051808201909152600c81527f554e415554484f52495a454400000000000000000000000000000000000000006020820152906001600160a01b03163314610e435760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561056d578181015183820152602001610555565b50600b54610100900460ff1615610e8b5760405162461bcd60e51b815260040180806020018281038252603981526020018061162b6039913960400191505060405180910390fd5b600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055600454600090610f5690610ec9610462565b60ff16600a0a036107d7600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d6020811015610f4b57600080fd5b50516004549061149c565b600154604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290519293506001600160a01b03909116916340c10f199160448082019260009290919082900301818387803b158015610fc557600080fd5b505af1158015610fd9573d6000803e3d6000fd5b50506040805184815290517f2c7a5ec7d0d9da219cb4c7cbf56d5d2a1bf5e1d053e526ac413bde2e085876549350908190036020019150a150565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6000546001600160a01b031681565b336000818152600560205260409020546110995760405162461bcd60e51b815260040180806020018281038252602e8152602001806115fd602e913960400191505060405180910390fd5b600082116110d85760405162461bcd60e51b815260040180806020018281038252602b8152602001806115d2602b913960400191505060405180910390fd5b6110e0610609565b60006110eb8461028d565b604080516370a0823160e01b815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b15801561113157600080fd5b505afa158015611145573d6000803e3d6000fd5b505050506040513d602081101561115b57600080fd5b50510190506000611171838361038c8883611014565b9050806111af5760405162461bcd60e51b815260040180806020018281038252603381526020018061159f6033913960400191505060405180910390fd5b808411156111ee5760405162461bcd60e51b815260040180806020018281038252604e815260200180611685604e913960600191505060405180910390fd5b6001600160a01b03808616600081815260086020908152604080832094881683529381528382208054890190559181526007909152208054850190556112358584866112ed565b604080516001600160a01b038581168252602082018790528251908816927f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a928290030190a25050505050565b60045490565b6001600160a01b031660009081526005602052604090205490565b6000816112ae610462565b60ff16600a0a600454026112c061097f565b6001600160a01b038716600090815260056020526040902054860202816112e357fe5b0403949350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106113b657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611379565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611418576040519150601f19603f3d011682016040523d82523d6000602084013e61141d565b606091505b509150915081801561144b57508051158061144b575080806020019051602081101561144857600080fd5b50515b610977576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6000826114ab57506000610d3a565b828202828482816114b857fe5b04146114f55760405162461bcd60e51b81526004018080602001828103825260218152602001806116646021913960400191505060405180910390fd5b9392505050565b60006114f583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836115885760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561056d578181015183820152602001610555565b50600083858161159457fe5b049594505050505056fe5468656f7065747261466f756e64657256657374696e673a206163636f756e74206973206e6f7420647565207061796d656e745468656f7065747261466f756e64657256657374696e673a20616d6f756e742063616e6e6f7420626520305468656f7065747261466f756e64657256657374696e673a206163636f756e7420686173206e6f207368617265735468656f7065747261466f756e64657256657374696e673a20696e697469616c4d696e742063616e206f6e6c792062652072756e206f6e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775468656f7065747261466f756e64657256657374696e673a2072657175657374656420616d6f756e74206973206d6f7265207468616e20647565207061796d656e7420666f72206163636f756e745468656f7065747261466f756e64657256657374696e673a204e6f20626f6e64696e672063616c63756c61746f72a2646970667358221220c6090123d9116d7e1e86b92ccaaf79b771adee0dcf13670ef192f351067dcccf64736f6c63430007050033",
  "devdoc": {
    "details": "This contract allows to split THEO payments among a group of accounts. The sender does not need to be aware that the THEO will be split in this way, since it is handled transparently by the contract. The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each account to a number of shares. Of all the THEO that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. `TheopetraFounderVesting` follows a _pull payment_ model. This means that payments are not automatically forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release} function.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates an instance of `TheopetraFounderVesting` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`."
      },
      "getFdvFactor()": {
        "details": "calculated as currentFDV / FDVtarget (using 9 decimals)",
        "returns": {
          "_0": "uint256 proportion of FDV target, 9 decimals"
        }
      },
      "getReleasable(address,address)": {
        "details": "Returns the amount of tokens that could be paid to `account` at the current time."
      },
      "getReleased(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "getShares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "getTotalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "getTotalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "getUnlockedMultiplier()": {
        "details": "Getter for unlocked multiplier for time-locked funds. This is the percent currently unlocked as a decimal ratio of 1."
      },
      "rebalance()": {
        "details": "Mints or burns tokens for this contract to balance shares to their appropriate percentage"
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "releaseAmount(address,uint256)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens specified, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      }
    },
    "title": "TheopetraFounderVesting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "return the decimals in the percentage values and thus the number of shares per percentage point (1% = 10_000_000 shares)"
      },
      "getFdvFactor()": {
        "notice": "Scale the founder amount with respect to the FDV target value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11676,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITheopetraAuthority)2501"
      },
      {
        "astId": 6727,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITreasury)2610"
      },
      {
        "astId": 6729,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "THEO",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITHEO)2384"
      },
      {
        "astId": 6731,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "fdvTarget",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6733,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "totalShares",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6737,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "shares",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6740,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "payees",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6744,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "erc20TotalReleased",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20)2185,t_uint256)"
      },
      {
        "astId": 6750,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "erc20Released",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_contract(IERC20)2185,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6757,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "unlockTimes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6760,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "unlockAmounts",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6763,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "founderRebalanceLocked",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 6766,
        "contract": "src/Theopetra/TheopetraFounderVesting.sol:TheopetraFounderVesting",
        "label": "initialized",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2185": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITHEO)2384": {
        "encoding": "inplace",
        "label": "contract ITHEO",
        "numberOfBytes": "20"
      },
      "t_contract(ITheopetraAuthority)2501": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)2610": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2185,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2185",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)2185,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2185",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}