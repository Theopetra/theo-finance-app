{
  "address": "0x873f08F6cA53229B9F6E4Ab7FfE8E351DC149968",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_theo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timelock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "BondCalculatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CreateDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "DebtLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Managed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queued",
          "type": "address"
        }
      ],
      "name": "PermissionQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "Permissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RepayDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAudited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "TimelockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOND_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THEO",
      "outputs": [
        {
          "internalType": "contract ITHEO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksNeededForQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deltaTokenPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deltaTreasuryYield",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "send_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_toDisable",
          "type": "address"
        }
      ],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_calculator",
          "type": "address"
        }
      ],
      "name": "enable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTheoBondingCalculator",
      "outputs": [
        {
          "internalType": "contract IBondCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "incurDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "indexInRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "nullify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onChainGovernanceTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permissionQueue",
      "outputs": [
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "toPermit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calculator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timelockEnd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "nullify",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_calculator",
          "type": "address"
        }
      ],
      "name": "queueTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TheopetraTreasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "repayDebtWithReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayDebtWithTHEO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sTHEO",
      "outputs": [
        {
          "internalType": "contract ITokenDebt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setDebtLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_theoBondingCalculator",
          "type": "address"
        }
      ],
      "name": "setTheoBondingCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "theoDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerformanceUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "tokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0234def7cf0b4fdde56513cb61c9e6c53f30b6262edac20b09d5dc32816654f",
  "receipt": {
    "to": null,
    "from": "0x0a4B56B375aEAfB5A02ACaeEc5Ca0F6a6efb0025",
    "contractAddress": "0x873f08F6cA53229B9F6E4Ab7FfE8E351DC149968",
    "transactionIndex": 35,
    "gasUsed": "4063876",
    "logsBloom": "0x
    "blockHash": "0x674f0e559b81a52b40bd27bd49b490135f5c6210f87751301e5d03294e5028a2",
    "transactionHash": "0xf0234def7cf0b4fdde56513cb61c9e6c53f30b6262edac20b09d5dc32816654f",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 12432392,
        "transactionHash": "0xf0234def7cf0b4fdde56513cb61c9e6c53f30b6262edac20b09d5dc32816654f",
        "address": "0x873f08F6cA53229B9F6E4Ab7FfE8E351DC149968",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000d19e2973068657e68f4344bcb82e233864d302d7"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x674f0e559b81a52b40bd27bd49b490135f5c6210f87751301e5d03294e5028a2"
      }
    ],
    "blockNumber": 12432392,
    "cumulativeGasUsed": "5893031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1F9d26D6C83f37972fcff9e88023140a42582949",
    11520,
    "0xD19E2973068657E68f4344bCB82E233864d302d7"
  ],
  "numDeployments": 1,
  "solcInputHash": "c04001e641f420ac37ed814fe4f5da7e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_theo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"BondCalculatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"DebtLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Managed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"PermissionQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Permissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TimelockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THEO\",\"outputs\":[{\"internalType\":\"contract ITHEO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deltaTokenPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deltaTreasuryYield\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_toDisable\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTheoBondingCalculator\",\"outputs\":[{\"internalType\":\"contract IBondCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"indexInRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"nullify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onChainGovernanceTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionQueue\",\"outputs\":[{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"toPermit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calculator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nullify\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"queueTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TheopetraTreasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithTHEO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sTHEO\",\"outputs\":[{\"internalType\":\"contract ITokenDebt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setDebtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_theoBondingCalculator\",\"type\":\"address\"}],\"name\":\"setTheoBondingCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theoDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerformanceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"baseSupply()\":{\"details\":\"use this any time you need to query supply\",\"returns\":{\"_0\":\"uint256\"}},\"deltaTokenPrice()\":{\"details\":\"calculated as (currentPrice - lastPrice) / lastPrice           using 9 decimals for the price values and for return value.\",\"returns\":{\"_0\":\"int256 proportional change in treasury yield. 9 decimals\"}},\"deltaTreasuryYield()\":{\"details\":\"calculated as (currentYield - lastYield) / lastYield           using 9 decimals for the yield values and for return value.           example: ((10_000_000_000 - 15_000_000_000)*(10**9)) / 15_000_000_000 = -333333333           -333333333 is equivalent to the proportion -0.333333333 (that is, -33.3333333%)\",\"returns\":{\"_0\":\"int256 proportional change in treasury yield. 9 decimals\"}},\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_profit\":\"uint256\",\"_token\":\"address\"},\"returns\":{\"send_\":\"uint256\"}},\"disable(uint8,address)\":{\"params\":{\"_status\":\"STATUS\",\"_toDisable\":\"address\"}},\"enable(uint8,address,address)\":{\"params\":{\"_address\":\"address\",\"_calculator\":\"address\",\"_status\":\"STATUS\"}},\"execute(uint256)\":{\"params\":{\"_index\":\"uint256\"}},\"getTheoBondingCalculator()\":{\"returns\":{\"_0\":\"address for theo liquidity pool\"}},\"incurDebt(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}},\"indexInRegistry(address,uint8)\":{\"returns\":{\"_0\":\"(bool, uint256)\"}},\"manage(address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_recipient\":\"address\"}},\"nullify(uint256)\":{\"params\":{\"_index\":\"uint256\"}},\"queueTimelock(uint8,address,address)\":{\"params\":{\"_address\":\"address\",\"_calculator\":\"address\",\"_status\":\"STATUS\"}},\"repayDebtWithReserve(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}},\"repayDebtWithTHEO(uint256)\":{\"params\":{\"_amount\":\"uint256\"}},\"setDebtLimit(address,uint256)\":{\"params\":{\"_address\":\"address\",\"_limit\":\"uint256\"}},\"setTheoBondingCalculator(address)\":{\"params\":{\"_theoBondingCalculator\":\"address of the theo bonding calculator\"}},\"tokenPerformanceUpdate()\":{\"details\":\"this method can be called at any time but will only update contract state every 8 hours\"},\"tokenValue(address,uint256)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"},\"returns\":{\"value_\":\"uint256\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"uint256\",\"_token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auditReserves()\":{\"notice\":\"takes inventory of all tracked assetsalways consolidate to recognized reserves before audit\"},\"baseSupply()\":{\"notice\":\"returns supply metric that cannot be manipulated by debt\"},\"deltaTokenPrice()\":{\"notice\":\"calculate the proportional change (i.e. a percentage as a decimal) in token price, with 9 decimals\"},\"deltaTreasuryYield()\":{\"notice\":\"calculate the proportional change (i.e. a percentage as a decimal) in treasury yield, with 9 decimals\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"allow approved address to deposit an asset for THEO\"},\"disable(uint8,address)\":{\"notice\":\"disable permission from address\"},\"disableTimelock()\":{\"notice\":\"disables timelocked functions\"},\"enable(uint8,address,address)\":{\"notice\":\"enable permission from queue\"},\"execute(uint256)\":{\"notice\":\"enable queued permission\"},\"getTheoBondingCalculator()\":{\"notice\":\"get the address of the theo bonding calculator\"},\"incurDebt(uint256,address)\":{\"notice\":\"allow approved address to borrow reserves\"},\"indexInRegistry(address,uint8)\":{\"notice\":\"check if registry contains address\"},\"initialize()\":{\"notice\":\"enables timelocks after initilization\"},\"manage(address,uint256)\":{\"notice\":\"allow approved address to withdraw assets\"},\"mint(address,uint256)\":{\"notice\":\"mint new THEO using excess reserves\"},\"nullify(uint256)\":{\"notice\":\"cancel timelocked action\"},\"queueTimelock(uint8,address,address)\":{\"notice\":\"queue address to receive permission\"},\"repayDebtWithReserve(uint256,address)\":{\"notice\":\"allow approved address to repay borrowed reserves with reserves\"},\"repayDebtWithTHEO(uint256)\":{\"notice\":\"allow approved address to repay borrowed reserves with THEO\"},\"setDebtLimit(address,uint256)\":{\"notice\":\"set max debt for address\"},\"setTheoBondingCalculator(address)\":{\"notice\":\"set the address for the theo bonding calculator\"},\"tokenPerformanceUpdate()\":{\"notice\":\"update the current token price and previous (last) token price.                      Token price is calculated with the theoBondingCalculator, as set by the Governor\"},\"tokenValue(address,uint256)\":{\"notice\":\"returns THEO valuation for an amount of Quote Tokens\"},\"withdraw(uint256,address)\":{\"notice\":\"allow approved address to burn THEO for reserves\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/TheopetraTreasury.sol\":\"TheopetraTreasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/Interfaces/IBondCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity >=0.7.5 <=0.8.10;\\n\\ninterface IBondCalculator {\\n    function valuation(address tokenIn, uint256 amount_) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x69bc452b443bad25ea668f74c2dffcdfc4bb24147cec627294d1f7ac10170c64\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in THEO (false, default)\\n        uint256 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n        uint256 totalDebt; // total debt from market\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        int64 bondRateFixed; // 9 decimal fixed discount expressed as a proportion (that is, a percentage in its decimal form)\\n        int64 maxBondRateVariable; // 9 decimal maximum proportion (that is, a percentage in its decimal form) discount on current market price\\n        int64 discountRateBond; // 9 decimal\\n        int64 discountRateYield; // 9 decimal\\n        uint256 maxDebt; // 9 decimal debt maximum in THEO\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint64 depositInterval; // target frequency of deposits\\n        uint64 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    struct DepositArgs {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 maxPrice;\\n        address user;\\n        address referral;\\n        bool autoStake;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return payout_ uint256\\n     * @return expiry_ uint256\\n     * @return index_ uint256\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral,\\n        bool _autoStake\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        int64[4] memory _rates, // [bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\\n        uint64[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function getMarkets() external view returns (uint256[] memory);\\n\\n    function getMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n\\n    function setDiscountRateBond(uint256 _id, int64 _discountRateBond) external;\\n\\n    function setDiscountRateYield(uint256 _id, int64 _discountRateYield) external;\\n\\n    function bondRateVariable(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x98790abf6d4903a8f5b437b9f9c1b02c44f80bdcd5907ced47fefa041f45f35b\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITHEO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ITHEO is IERC20 {\\n    function mint(address account_, uint256 amount_) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0x3045a1b33e73bf98e16fb64fb36e74a9cf282f89f32277826d37a8bd102f2207\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITheopetraAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event ManagerPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event SignerPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    function whitelistSigner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb2878b057ac95bafe9f359c26c4e7b470dcd6d00df5797f992a576d79182b287\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITokenDebt.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ITokenDebt is IERC20 {\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78de8009037eb33cd0add354d1caf4a746e98ce3d9cd1f77dd2ee0f127856c0e\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IBondCalculator.sol\\\";\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function tokenPerformanceUpdate() external;\\n\\n    function baseSupply() external view returns (uint256);\\n\\n    function deltaTokenPrice() external view returns (int256);\\n\\n    function deltaTreasuryYield() external view returns (int256);\\n\\n    function getTheoBondingCalculator() external view returns (IBondCalculator);\\n\\n    function setTheoBondingCalculator(address _theoBondingCalculator) external;\\n}\\n\",\"keccak256\":\"0x10a5c7e77b1e79eb7cf341bbbaf772b1f64f452cbf525d9cb7cf9ef44c04f71f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IYieldReporter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IYieldReporter {\\n    event ReportYield(uint256 indexed id, int256 yield);\\n\\n    function lastYield() external view returns (int256);\\n\\n    function currentYield() external view returns (int256);\\n\\n    function getYieldById(uint256 id) external view returns (int256);\\n\\n    function reportYield(int256 _amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbae0dd07f438ce32efaeac187f6527f4d67a8895c8f5ee8c16c037dff39c4d8f\",\"license\":\"AGPL-3.0\"},\"src/Libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xf498301a984c591ccaec60c4330dc941d365bffeda75e092f52bda2c51b96e9a\",\"license\":\"MIT\"},\"src/Libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport { IERC20 } from \\\"../Interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{ value: amount }(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbba364b239a1a473ccd351490d3aff53f31369c461512837274a476027b35784\",\"license\":\"AGPL-3.0-only\"},\"src/Libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\\n        return div(mul(total_, percentage_), 1000);\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n     */\\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\\n    }\\n\\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\\n        return div(mul(part_, 100), total_);\\n    }\\n\\n    /**\\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\\n        return sqrrt(mul(multiplier_, payment_));\\n    }\\n\\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\\n        return mul(multiplier_, supply_);\\n    }\\n}\\n\",\"keccak256\":\"0xc6ed927b09d3135cf05c030db1f6ff0816a8aa7d303c52c34e43a5ba03a19e78\",\"license\":\"AGPL-3.0-or-later\"},\"src/Libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x87df0b75a5c9a0970c0085b732140d6a8045a5997ba62f4d2d6e60cf9716535e\",\"license\":\"MIT\"},\"src/Theopetra/TheopetraTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"../Libraries/SafeMath.sol\\\";\\nimport \\\"../Libraries/SafeERC20.sol\\\";\\nimport \\\"../Libraries/SignedSafeMath.sol\\\";\\nimport \\\"../Libraries/SafeCast.sol\\\";\\n\\nimport \\\"../Interfaces/IERC20.sol\\\";\\nimport \\\"../Interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../Interfaces/ITHEO.sol\\\";\\nimport \\\"../Interfaces/ITokenDebt.sol\\\";\\nimport \\\"../Interfaces/IBondCalculator.sol\\\";\\nimport \\\"../Interfaces/ITreasury.sol\\\";\\nimport \\\"../Interfaces/IYieldReporter.sol\\\";\\nimport \\\"../Interfaces/IBondDepository.sol\\\";\\n\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\n\\ncontract TheopetraTreasury is TheopetraAccessControlled, ITreasury {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Deposit(address indexed token, uint256 amount, uint256 value);\\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n    event CreateDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\\n    event RepayDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\\n    event Managed(address indexed token, uint256 amount);\\n    event ReservesAudited(uint256 indexed totalReserves);\\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\\n    event PermissionQueued(STATUS indexed status, address queued);\\n    event Permissioned(address addr, STATUS indexed status, bool result);\\n    event BondCalculatorUpdated(address addr);\\n    event DebtLimitUpdated(address addr, uint256 limit);\\n    event TimelockUpdated(bool enabled);\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    enum STATUS {\\n        RESERVEDEPOSITOR,\\n        RESERVESPENDER,\\n        RESERVETOKEN,\\n        RESERVEMANAGER,\\n        LIQUIDITYDEPOSITOR,\\n        LIQUIDITYTOKEN,\\n        LIQUIDITYMANAGER,\\n        RESERVEDEBTOR,\\n        REWARDMANAGER,\\n        STHEO,\\n        THEODEBTOR,\\n        YIELDREPORTER\\n    }\\n\\n    struct Queue {\\n        STATUS managing;\\n        address toPermit;\\n        address calculator;\\n        uint256 timelockEnd;\\n        bool nullify;\\n        bool executed;\\n    }\\n\\n    struct PriceInfo {\\n        int256 deltaTreasuryYield;\\n        uint256 timeLastUpdated;\\n        uint256 lastTokenPrice;\\n        uint256 currentTokenPrice;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITHEO public immutable THEO;\\n    ITokenDebt public sTHEO;\\n    IYieldReporter private yieldReporter;\\n    IBondCalculator private theoBondingCalculator;\\n\\n    mapping(STATUS => address[]) public registry;\\n    mapping(STATUS => mapping(address => bool)) public permissions;\\n    mapping(address => address) public bondCalculator;\\n\\n    mapping(address => uint256) public debtLimit;\\n\\n    uint256 public totalReserves;\\n    uint256 public totalDebt;\\n    uint256 public theoDebt;\\n    Queue[] public permissionQueue;\\n    uint256 public immutable blocksNeededForQueue;\\n\\n    PriceInfo private priceInfo;\\n\\n    bool public timelockEnabled;\\n    bool public initialized;\\n\\n    uint256 public onChainGovernanceTimelock;\\n    bytes32 public constant BOND_ROLE = keccak256(\\\"BOND_ROLE\\\");\\n\\n    string internal constant notAccepted = \\\"Treasury: not accepted\\\";\\n    string internal constant notApproved = \\\"Treasury: not approved\\\";\\n    string internal constant invalidToken = \\\"Treasury: invalid token\\\";\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _theo,\\n        uint256 _timelock,\\n        address _authority\\n    ) TheopetraAccessControlled(ITheopetraAuthority(_authority)) {\\n        require(_theo != address(0), \\\"Zero address: THEO\\\");\\n        THEO = ITHEO(_theo);\\n\\n        timelockEnabled = false;\\n        initialized = false;\\n        blocksNeededForQueue = _timelock;\\n        priceInfo.timeLastUpdated = block.timestamp;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice allow approved address to deposit an asset for THEO\\n     * @param _amount uint256\\n     * @param _token address\\n     * @param _profit uint256\\n     * @return send_ uint256\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external override returns (uint256 send_) {\\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\\n        } else if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            require(permissions[STATUS.LIQUIDITYDEPOSITOR][msg.sender], notApproved);\\n        } else {\\n            revert(invalidToken);\\n        }\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 value = tokenValue(_token, _amount);\\n        // mint THEO needed and store amount of rewards for distribution\\n        send_ = value.sub(_profit);\\n        THEO.mint(msg.sender, send_);\\n\\n        totalReserves = totalReserves.add(value);\\n\\n        emit Deposit(_token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to burn THEO for reserves\\n     * @param _amount uint256\\n     * @param _token address\\n     */\\n    function withdraw(uint256 _amount, address _token) external override {\\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\\n\\n        uint256 value = tokenValue(_token, _amount);\\n        THEO.burnFrom(msg.sender, value);\\n\\n        totalReserves = totalReserves.sub(value);\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdrawal(_token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to withdraw assets\\n     * @param _token address\\n     * @param _amount uint256\\n     */\\n    function manage(address _token, uint256 _amount) external override {\\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            require(permissions[STATUS.LIQUIDITYMANAGER][msg.sender], notApproved);\\n        } else {\\n            require(permissions[STATUS.RESERVEMANAGER][msg.sender], notApproved);\\n        }\\n        if (permissions[STATUS.RESERVETOKEN][_token] || permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            uint256 value = tokenValue(_token, _amount);\\n            totalReserves = totalReserves.sub(value);\\n        }\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n        emit Managed(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice mint new THEO using excess reserves\\n     * @param _recipient address\\n     * @param _amount uint256\\n     */\\n    function mint(address _recipient, uint256 _amount) external override {\\n        require(permissions[STATUS.REWARDMANAGER][msg.sender], \\\"Caller is not a Reward manager\\\");\\n\\n        THEO.mint(_recipient, _amount);\\n        emit Minted(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * DEBT: The debt functions allow approved addresses to borrow treasury assets\\n     * or THEO from the treasury, using stheo as collateral. This might allow an\\n     * sTHEO holder to provide theo liquidity without taking on the opportunity cost\\n     * of unstaking, or alter their backing without imposing risk onto the treasury.\\n     * Many of these use cases are yet to be defined, but they appear promising.\\n     * However, we urge the community to think critically and move slowly upon\\n     * proposals to acquire these permissions.\\n     */\\n\\n    /**\\n     * @notice allow approved address to borrow reserves\\n     * @param _amount uint256\\n     * @param _token address\\n     */\\n    function incurDebt(uint256 _amount, address _token) external override {\\n        uint256 value;\\n        if (_token == address(THEO)) {\\n            require(permissions[STATUS.THEODEBTOR][msg.sender], notApproved);\\n            value = _amount;\\n        } else {\\n            require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\\n            require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\\n            value = tokenValue(_token, _amount);\\n        }\\n        require(value != 0, invalidToken);\\n\\n        sTHEO.changeDebt(value, msg.sender, true);\\n        require(sTHEO.debtBalances(msg.sender) <= debtLimit[msg.sender], \\\"Treasury: exceeds limit\\\");\\n        totalDebt = totalDebt.add(value);\\n\\n        if (_token == address(THEO)) {\\n            THEO.mint(msg.sender, value);\\n            theoDebt = theoDebt.add(value);\\n        } else {\\n            totalReserves = totalReserves.sub(value);\\n            IERC20(_token).safeTransfer(msg.sender, _amount);\\n        }\\n        emit CreateDebt(msg.sender, _token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to repay borrowed reserves with reserves\\n     * @param _amount uint256\\n     * @param _token address\\n     */\\n    function repayDebtWithReserve(uint256 _amount, address _token) external override {\\n        require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 value = tokenValue(_token, _amount);\\n        sTHEO.changeDebt(value, msg.sender, false);\\n        totalDebt = totalDebt.sub(value);\\n        totalReserves = totalReserves.add(value);\\n        emit RepayDebt(msg.sender, _token, _amount, value);\\n    }\\n\\n    /**\\n     * @notice allow approved address to repay borrowed reserves with THEO\\n     * @param _amount uint256\\n     */\\n    function repayDebtWithTHEO(uint256 _amount) external {\\n        require(\\n            permissions[STATUS.RESERVEDEBTOR][msg.sender] || permissions[STATUS.THEODEBTOR][msg.sender],\\n            notApproved\\n        );\\n        THEO.burnFrom(msg.sender, _amount);\\n        sTHEO.changeDebt(_amount, msg.sender, false);\\n        totalDebt = totalDebt.sub(_amount);\\n        theoDebt = theoDebt.sub(_amount);\\n        emit RepayDebt(msg.sender, address(THEO), _amount, _amount);\\n    }\\n\\n    /* ======== BONDING CALCULATOR ======== */\\n\\n    /**\\n     * @notice                  get the address of the theo bonding calculator\\n     * @return                  address for theo liquidity pool\\n     */\\n    function getTheoBondingCalculator() public view override returns (IBondCalculator) {\\n        return IBondCalculator(theoBondingCalculator);\\n    }\\n\\n    /**\\n     * @notice             set the address for the theo bonding calculator\\n     * @param _theoBondingCalculator    address of the theo bonding calculator\\n     */\\n    function setTheoBondingCalculator(address _theoBondingCalculator) external override onlyGuardian {\\n        theoBondingCalculator = IBondCalculator(_theoBondingCalculator);\\n        emit BondCalculatorUpdated(_theoBondingCalculator);\\n    }\\n\\n    /* ========== MANAGERIAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice takes inventory of all tracked assets\\n     * @notice always consolidate to recognized reserves before audit\\n     */\\n    function auditReserves() external onlyGovernor {\\n        uint256 reserves;\\n        address[] memory reserveToken = registry[STATUS.RESERVETOKEN];\\n        for (uint256 i = 0; i < reserveToken.length; i++) {\\n            if (permissions[STATUS.RESERVETOKEN][reserveToken[i]]) {\\n                reserves = reserves.add(tokenValue(reserveToken[i], IERC20(reserveToken[i]).balanceOf(address(this))));\\n            }\\n        }\\n        address[] memory liquidityToken = registry[STATUS.LIQUIDITYTOKEN];\\n        for (uint256 i = 0; i < liquidityToken.length; i++) {\\n            if (permissions[STATUS.LIQUIDITYTOKEN][liquidityToken[i]]) {\\n                reserves = reserves.add(\\n                    tokenValue(liquidityToken[i], IERC20(liquidityToken[i]).balanceOf(address(this)))\\n                );\\n            }\\n        }\\n        totalReserves = reserves;\\n        emit ReservesAudited(reserves);\\n    }\\n\\n    /**\\n     * @notice set max debt for address\\n     * @param _address address\\n     * @param _limit uint256\\n     */\\n    function setDebtLimit(address _address, uint256 _limit) external onlyGovernor {\\n        debtLimit[_address] = _limit;\\n        emit DebtLimitUpdated(_address, _limit);\\n    }\\n\\n    /**\\n     * @notice enable permission from queue\\n     * @param _status STATUS\\n     * @param _address address\\n     * @param _calculator address\\n     */\\n    function enable(\\n        STATUS _status,\\n        address _address,\\n        address _calculator\\n    ) external onlyGovernor {\\n        require(timelockEnabled == false, \\\"Use queueTimelock\\\");\\n        if (_status == STATUS.STHEO) {\\n            sTHEO = ITokenDebt(_address);\\n        } else if (_status == STATUS.YIELDREPORTER) {\\n            yieldReporter = IYieldReporter(_address);\\n        } else {\\n            permissions[_status][_address] = true;\\n\\n            if (_status == STATUS.LIQUIDITYTOKEN) {\\n                bondCalculator[_address] = _calculator;\\n            }\\n\\n            (bool registered, ) = indexInRegistry(_address, _status);\\n            if (!registered) {\\n                registry[_status].push(_address);\\n\\n                if (_status == STATUS.LIQUIDITYTOKEN || _status == STATUS.RESERVETOKEN) {\\n                    (bool reg, uint256 index) = indexInRegistry(_address, _status);\\n                    if (reg) {\\n                        delete registry[_status][index];\\n                    }\\n                }\\n            }\\n        }\\n        emit Permissioned(_address, _status, true);\\n    }\\n\\n    /**\\n     *  @notice disable permission from address\\n     *  @param _status STATUS\\n     *  @param _toDisable address\\n     */\\n    function disable(STATUS _status, address _toDisable) external {\\n        require(msg.sender == authority.governor() || msg.sender == authority.guardian(), \\\"Only governor or guardian\\\");\\n        permissions[_status][_toDisable] = false;\\n        emit Permissioned(_toDisable, _status, false);\\n    }\\n\\n    /**\\n     * @notice check if registry contains address\\n     * @return (bool, uint256)\\n     */\\n    function indexInRegistry(address _address, STATUS _status) public view returns (bool, uint256) {\\n        address[] memory entries = registry[_status];\\n        for (uint256 i = 0; i < entries.length; i++) {\\n            if (_address == entries[i]) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @notice              update the current token price and previous (last) token price.\\n     *                      Token price is calculated with the theoBondingCalculator, as set by the Governor\\n     * @dev                 this method can be called at any time but will only update contract state every 8 hours\\n     */\\n    function tokenPerformanceUpdate() public override {\\n        if (block.timestamp >= priceInfo.timeLastUpdated + 28800) {\\n            priceInfo.lastTokenPrice = priceInfo.currentTokenPrice;\\n            priceInfo.currentTokenPrice = IBondCalculator(theoBondingCalculator).valuation(\\n                address(THEO),\\n                1_000_000_000\\n            );\\n            priceInfo.timeLastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    /* ========== TIMELOCKED FUNCTIONS ========== */\\n\\n    // functions are used prior to enabling on-chain governance\\n\\n    /**\\n     * @notice queue address to receive permission\\n     * @param _status STATUS\\n     * @param _address address\\n     * @param _calculator address\\n     */\\n    function queueTimelock(\\n        STATUS _status,\\n        address _address,\\n        address _calculator\\n    ) external onlyGovernor {\\n        require(_address != address(0), \\\"Address cannot be the zero address\\\");\\n        require(timelockEnabled == true, \\\"Timelock is disabled, use enable\\\");\\n\\n        uint256 timelock = block.number.add(blocksNeededForQueue);\\n        if (_status == STATUS.RESERVEMANAGER || _status == STATUS.LIQUIDITYMANAGER) {\\n            timelock = block.number.add(blocksNeededForQueue.mul(2));\\n        }\\n        permissionQueue.push(\\n            Queue({\\n                managing: _status,\\n                toPermit: _address,\\n                calculator: _calculator,\\n                timelockEnd: timelock,\\n                nullify: false,\\n                executed: false\\n            })\\n        );\\n        emit PermissionQueued(_status, _address);\\n    }\\n\\n    /**\\n     *  @notice enable queued permission\\n     *  @param _index uint256\\n     */\\n    function execute(uint256 _index) external {\\n        require(timelockEnabled == true, \\\"Timelock is disabled, use enable\\\");\\n\\n        Queue memory info = permissionQueue[_index];\\n\\n        require(!info.nullify, \\\"Action has been nullified\\\");\\n        require(!info.executed, \\\"Action has already been executed\\\");\\n        require(block.number >= info.timelockEnd, \\\"Timelock not complete\\\");\\n\\n        if (info.managing == STATUS.STHEO) {\\n            // 9\\n            sTHEO = ITokenDebt(info.toPermit);\\n        } else if (info.managing == STATUS.YIELDREPORTER) {\\n            yieldReporter = IYieldReporter(info.toPermit);\\n        } else {\\n            permissions[info.managing][info.toPermit] = true;\\n\\n            if (info.managing == STATUS.LIQUIDITYTOKEN) {\\n                bondCalculator[info.toPermit] = info.calculator;\\n            }\\n            (bool registered, ) = indexInRegistry(info.toPermit, info.managing);\\n            if (!registered) {\\n                registry[info.managing].push(info.toPermit);\\n\\n                if (info.managing == STATUS.LIQUIDITYTOKEN) {\\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.RESERVETOKEN);\\n                    if (reg) {\\n                        delete registry[STATUS.RESERVETOKEN][index];\\n                    }\\n                } else if (info.managing == STATUS.RESERVETOKEN) {\\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.LIQUIDITYTOKEN);\\n                    if (reg) {\\n                        delete registry[STATUS.LIQUIDITYTOKEN][index];\\n                    }\\n                }\\n            }\\n        }\\n        permissionQueue[_index].executed = true;\\n        emit Permissioned(info.toPermit, info.managing, true);\\n    }\\n\\n    /**\\n     * @notice cancel timelocked action\\n     * @param _index uint256\\n     */\\n    function nullify(uint256 _index) external onlyGovernor {\\n        permissionQueue[_index].nullify = true;\\n        emit Permissioned(permissionQueue[_index].toPermit, permissionQueue[_index].managing, false);\\n    }\\n\\n    /**\\n     * @notice disables timelocked functions\\n     */\\n    function disableTimelock() external onlyGovernor {\\n        require(timelockEnabled == true, \\\"timelock already disabled\\\");\\n        if (onChainGovernanceTimelock != 0 && onChainGovernanceTimelock <= block.number) {\\n            timelockEnabled = false;\\n            TimelockUpdated(false);\\n        } else {\\n            onChainGovernanceTimelock = block.number.add(blocksNeededForQueue.mul(7)); // 7-day timelock\\n        }\\n    }\\n\\n    /**\\n     * @notice enables timelocks after initilization\\n     */\\n    function initialize() external onlyGovernor {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        timelockEnabled = true;\\n        initialized = true;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice returns THEO valuation for an amount of Quote Tokens\\n     * @param _token address\\n     * @param _amount uint256\\n     * @return value_ uint256\\n     */\\n    function tokenValue(address _token, uint256 _amount) public view override returns (uint256 value_) {\\n        value_ = _amount.mul(10**IERC20Metadata(address(THEO)).decimals()).div(10**IERC20Metadata(_token).decimals());\\n\\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\\n            value_ = IBondCalculator(bondCalculator[_token]).valuation(_token, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns supply metric that cannot be manipulated by debt\\n     * @dev use this any time you need to query supply\\n     * @return uint256\\n     */\\n    function baseSupply() external view override returns (uint256) {\\n        return THEO.totalSupply() - theoDebt;\\n    }\\n\\n    /**\\n     * @notice  calculate the proportional change (i.e. a percentage as a decimal) in token price, with 9 decimals\\n     * @dev     calculated as (currentPrice - lastPrice) / lastPrice\\n     *           using 9 decimals for the price values and for return value.\\n     * @return  int256 proportional change in treasury yield. 9 decimals\\n     */\\n    function deltaTokenPrice() public view override returns (int256) {\\n        return\\n            ((priceInfo.currentTokenPrice.toInt256()).sub(priceInfo.lastTokenPrice.toInt256()) * 10**9).div(\\n                priceInfo.lastTokenPrice.toInt256()\\n            );\\n    }\\n\\n    /**\\n     * @notice  calculate the proportional change (i.e. a percentage as a decimal) in treasury yield, with 9 decimals\\n     * @dev     calculated as (currentYield - lastYield) / lastYield\\n     *           using 9 decimals for the yield values and for return value.\\n     *           example: ((10_000_000_000 - 15_000_000_000)*(10**9)) / 15_000_000_000 = -333333333\\n     *           -333333333 is equivalent to the proportion -0.333333333 (that is, -33.3333333%)\\n     * @return  int256 proportional change in treasury yield. 9 decimals\\n     */\\n    function deltaTreasuryYield() public view override returns (int256) {\\n        require(address(yieldReporter) != address(0), \\\"Zero address: YieldReporter\\\");\\n        return\\n            (((IYieldReporter(yieldReporter).currentYield()).sub(IYieldReporter(yieldReporter).lastYield())) * 10**9)\\n                .div(IYieldReporter(yieldReporter).lastYield());\\n    }\\n}\\n\",\"keccak256\":\"0xc9a67f5b565feecffa1abca39932bd8510754330bbf9805ed158fb5383c86034\",\"license\":\"AGPL-3.0\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\n\\nabstract contract TheopetraAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\n\\n    string constant UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ITheopetraAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(ITheopetraAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x335437cea6c94c4fdc75340f25a13dc97094825f30d71c36993a94a2724ebf3c\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d25760003560e01c8063817f763511610186578063b320f6a9116100e3578063d796ffb811610097578063f182178311610071578063f18217831461076a578063fc7b9c1814610796578063fe0d94c11461079e576102d2565b8063d796ffb8146106ff578063d9edbc1d1461072b578063e4e33ef814610733576102d2565b8063bc157ac1116100c8578063bc157ac1146106bd578063bf7e214f146106ef578063d07f390f146106f7576102d2565b8063b320f6a9146106ad578063b39df88e146106b5576102d2565b806394ead1191161013a5780639b70b2af1161011f5780639b70b2af146106355780639edd8d431461065b578063a44b828714610687576102d2565b806394ead119146106255780639a5739d81461062d576102d2565b806389ee68a91161016b57806389ee68a9146105cb5780638f840ddd146105d357806393988b53146105db576102d2565b8063817f7635146105bb578063860f5048146105c3576102d2565b8063342247ab116102345780635619004b116101e85780637a9e5e4b116101cd5780637a9e5e4b146105855780637d921af0146105ab5780638129fc1c146105b3576102d2565b80635619004b1461054257806371a45c9514610568576102d2565b806343017ac21161021957806343017ac21461047f578063503edcf01461049c5780635299183114610513576102d2565b8063342247ab1461044b57806340c10f1914610453576102d2565b80631af4da701161028b5780632b7ce500116102705780632b7ce5001461040c5780632e672ad414610414578063330dd3451461041c576102d2565b80631af4da70146103935780631d6d5f05146103d5576102d2565b806312422d23116102bc57806312422d2314610331578063158ef93e1461035d578063192d57c514610379576102d2565b8062f714ce146102d75780630b0eee3014610305575b600080fd5b610303600480360360408110156102ed57600080fd5b50803590602001356001600160a01b03166107bb565b005b6103036004803603604081101561031b57600080fd5b506001600160a01b038135169060200135610a77565b6103036004803603604081101561034757600080fd5b50803590602001356001600160a01b0316610d23565b6103656112f9565b604080519115158252519081900360200190f35b610381611307565b60408051918252519081900360200190f35b6103b9600480360360208110156103a957600080fd5b50356001600160a01b031661134e565b604080516001600160a01b039092168252519081900360200190f35b610303600480360360608110156103eb57600080fd5b5060ff813516906001600160a01b0360208201358116916040013516611369565b6103036116f4565b610381611add565b6103656004803603604081101561043257600080fd5b50803560ff1690602001356001600160a01b0316611ae3565b610381611b03565b6103036004803603604081101561046957600080fd5b506001600160a01b038135169060200135611b27565b6103036004803603602081101561049557600080fd5b5035611c7d565b6104b9600480360360208110156104b257600080fd5b5035611f05565b6040518087600b8111156104c957fe5b8152602001866001600160a01b03168152602001856001600160a01b0316815260200184815260200183151581526020018215158152602001965050505050505060405180910390f35b6103036004803603604081101561052957600080fd5b50803560ff1690602001356001600160a01b0316611f5c565b6103816004803603602081101561055857600080fd5b50356001600160a01b0316612160565b6103036004803603602081101561057e57600080fd5b5035612172565b6103036004803603602081101561059b57600080fd5b50356001600160a01b0316612332565b61030361246d565b61030361264b565b6103b96127b5565b6103816127c4565b610303612854565b61038161292c565b61060a600480360360408110156105f157600080fd5b5080356001600160a01b0316906020013560ff16612932565b60408051921515835260208301919091528051918290030190f35b6103b9612a1a565b610381612a29565b6103036004803603602081101561064b57600080fd5b50356001600160a01b0316612c2f565b6103036004803603604081101561067157600080fd5b506001600160a01b038135169060200135612d76565b6103b96004803603604081101561069d57600080fd5b5060ff8135169060200135612ec2565b610365612efa565b610381612f03565b610381600480360360608110156106d357600080fd5b508035906001600160a01b036020820135169060400135612f09565b6103b96131de565b6103816131ed565b6103036004803603604081101561071557600080fd5b50803590602001356001600160a01b0316613211565b6103b9613488565b6103036004803603606081101561074957600080fd5b5060ff813516906001600160a01b03602082013581169160400135166134ac565b6103816004803603604081101561078057600080fd5b506001600160a01b038135169060200135613847565b610381613a69565b610303600480360360208110156107b457600080fd5b5035613a6f565b6001600160a01b03811660009081527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a6020908152604091829020548251808401909352601683527f54726561737572793a206e6f74206163636570746564000000000000000000009183019190915260ff166108b65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561087b578181015183820152602001610863565b50505050905090810190601f1680156108a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b503360009081527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b6020908152604091829020548251808401909352601683527f54726561737572793a206e6f7420617070726f766564000000000000000000009183019190915260ff1661096c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b5060006109798284613847565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166379cc679033836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156109f257600080fd5b505af1158015610a06573d6000803e3d6000fd5b5050600854610a189250905082613fbe565b600855610a2f6001600160a01b0383163385614007565b604080518481526020810183905281516001600160a01b038516927fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb928290030190a2505050565b6001600160a01b03821660009081527f458b30c2d72bfd2c6317304a4594ecbafe5f729d3111b65fdc3a33bd48e5432d602052604090205460ff1615610b72573360009081527f069400f22b28c6c362558d92f66163cec5671cba50b61abd2eecfcd0eaeac5186020908152604091829020548251808401909352601683527f54726561737572793a206e6f7420617070726f766564000000000000000000009183019190915260ff16610b6c5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50610c29565b3360009081527fa9bc9a3a348c357ba16b37005d7e6b3236198c0e939f4af8c5f19b8deeb8ebc06020908152604091829020548251808401909352601683527f54726561737572793a206e6f7420617070726f766564000000000000000000009183019190915260ff16610c275760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b505b6001600160a01b03821660009081527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a602052604090205460ff1680610ca657506001600160a01b03821660009081527f458b30c2d72bfd2c6317304a4594ecbafe5f729d3111b65fdc3a33bd48e5432d602052604090205460ff165b15610ccc576000610cb78383613847565b600854909150610cc79082613fbe565b600855505b610ce06001600160a01b0383163383614007565b6040805182815290516001600160a01b038416917fb4460e34f1e91c4fa28eb7fac4cbd88cf530ef54a67e1978cd5edd9f77033ead919081900360200190a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e1d573360009081527fa18b128af1c8fc61ff46f02d146e54546f34d340574cf2cef6a753cba6b6701d6020908152604091829020548251808401909352601683527f54726561737572793a206e6f7420617070726f766564000000000000000000009183019190915260ff16610e145760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50829050610f9f565b3360009081527feddb6698d7c569ff62ff64f1f1492bf14a54594835ba0faac91f84b4f5d814606020908152604091829020548251808401909352601683527f54726561737572793a206e6f7420617070726f766564000000000000000000009183019190915260ff16610ed25760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b506001600160a01b03821660009081527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a6020908152604091829020548251808401909352601683527f54726561737572793a206e6f74206163636570746564000000000000000000009183019190915260ff16610f915760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50610f9c8284613847565b90505b60408051808201909152601781527f54726561737572793a20696e76616c696420746f6b656e00000000000000000060208201528161101f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50600180546040805163ae5c6cd360e01b8152600481018590523360248201526044810193909352516001600160a01b039091169163ae5c6cd391606480830192600092919082900301818387803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b5050336000818152600760209081526040918290205460015483517fc4ef1c4c000000000000000000000000000000000000000000000000000000008152600481019590955292519095506001600160a01b03909216935063c4ef1c4c9260248082019391829003018186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d602081101561113157600080fd5b50511115611186576040805162461bcd60e51b815260206004820152601760248201527f54726561737572793a2065786365656473206c696d6974000000000000000000604482015290519081900360640190fd5b600954611193908261419f565b6009819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561128857604080517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f1991604480830192600092919082900301818387803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b5050600a54611280925090508261419f565b600a556112ac565b6008546112959082613fbe565b6008556112ac6001600160a01b0383163385614007565b604080518481526020810183905281516001600160a01b0385169233927f7e1a939bed137a819b5d2979822c67f877689f7a863d5e4cb57cdca97b2977d6929081900390910190a3505050565b601054610100900460ff1681565b600061134961131a600c600201546141f9565b61133d61132b600c600201546141f9565b600f54611337906141f9565b9061425d565b633b9aca0002906142c2565b905090565b6006602052600090815260409020546001600160a01b031681565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d60208110156113df57600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b0316331461145b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b506001600160a01b0382166114a15760405162461bcd60e51b81526004018080602001828103825260228152602001806146e76022913960400191505060405180910390fd5b60105460ff1615156001146114fd576040805162461bcd60e51b815260206004820181905260248201527f54696d656c6f636b2069732064697361626c65642c2075736520656e61626c65604482015290519081900360640190fd5b6000611529437f000000000000000000000000000000000000000000000000000000000000000061419f565b9050600384600b81111561153957fe5b14806115505750600684600b81111561154e57fe5b145b1561158d5761158a6115837f000000000000000000000000000000000000000000000000000000000000000060026143b4565b439061419f565b90505b600b6040518060c0016040528086600b8111156115a657fe5b81526001600160a01b0380871660208084019190915290861660408301526060820185905260006080830181905260a090920182905283546001818101865594835291208251600490920201805492939092839160ff199091169083600b81111561160d57fe5b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316810291909117835560408401516001840180546001600160a01b03191691909316179091556060830151600283015560808301516003909201805460a09094015160ff199094169215159290921761ff0019169215150291909117905583600b8111156116b257fe5b604080516001600160a01b038616815290517fc822ff41836a6dc998393c71843db8adcbbf01721f41b32389f6838ecb1ea9c89181900360200190a250505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561174057600080fd5b505afa158015611754573d6000803e3d6000fd5b505050506040513d602081101561176a57600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b031633146117e65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b5060026000908152600460209081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7805460408051828502810185019091528181526060939092919083018282801561186957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161184b575b5050505050905060005b81518110156119a25760026000908152600560205282517f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a91908490849081106118b957fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561199a576119976119908383815181106118f757fe5b602002602001015184848151811061190b57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561195f57600080fd5b505afa158015611973573d6000803e3d6000fd5b505050506040513d602081101561198957600080fd5b5051613847565b849061419f565b92505b600101611873565b506005600052600460209081527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f058054604080518285028101850190915281815260609390929190830182828015611a2357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a05575b5050505050905060005b8151811015611aa757600560008181526020019081526020016000206000838381518110611a5757fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611a9f57611a9c611a958383815181106118f757fe5b859061419f565b93505b600101611a2d565b50600883905560405183907fec691f09f6924b27932253f85caf99bacc30360cc0e50a1cc4d2acc24601446690600090a2505050565b600a5481565b600560209081526000928352604080842090915290825290205460ff1681565b7fc7975a12e44269ae9807788974b5f14480a3f5a459d7dafacd00b9e5f11db7d881565b3360009081527ffb33122aa9f93cc639ebe80a7bc4784c11e6053dde89c6f4f7e268c6a623da1e602052604090205460ff16611baa576040805162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206973206e6f74206120526577617264206d616e616765720000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f1983836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611c2157600080fd5b505af1158015611c35573d6000803e3d6000fd5b50506040805184815290516001600160a01b03861693503392507f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09181900360200190a35050565b3360009081527feddb6698d7c569ff62ff64f1f1492bf14a54594835ba0faac91f84b4f5d81460602052604090205460ff1680611ce857503360009081527fa18b128af1c8fc61ff46f02d146e54546f34d340574cf2cef6a753cba6b6701d602052604090205460ff165b6040518060400160405280601681526020017f54726561737572793a206e6f7420617070726f7665640000000000000000000081525090611d6a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916379cc679091604480830192600092919082900301818387803b158015611df257600080fd5b505af1158015611e06573d6000803e3d6000fd5b50506001546040805163ae5c6cd360e01b81526004810186905233602482015260006044820181905291516001600160a01b03909316945063ae5c6cd393506064808201939182900301818387803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b5050600954611e879250905082613fbe565b600955600a54611e979082613fbe565b600a55604080518281526020810183905281516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169233927fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309929081900390910190a350565b600b8181548110611f1557600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff80841695506001600160a01b036101009485900481169593169382821692041686565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa857600080fd5b505afa158015611fbc573d6000803e3d6000fd5b505050506040513d6020811015611fd257600080fd5b50516001600160a01b0316331480612069575060008054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561203157600080fd5b505afa158015612045573d6000803e3d6000fd5b505050506040513d602081101561205b57600080fd5b50516001600160a01b031633145b6120ba576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c7920676f7665726e6f72206f7220677561726469616e00000000000000604482015290519081900360640190fd5b60006005600084600b8111156120cc57fe5b600b8111156120d757fe5b8152602080820192909252604090810160009081206001600160a01b03861682529092529020805460ff191691151591909117905581600b81111561211857fe5b604080516001600160a01b03841681526000602082015281517f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713929181900390910190a25050565b60076020526000908152604090205481565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156121be57600080fd5b505afa1580156121d2573d6000803e3d6000fd5b505050506040513d60208110156121e857600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b031633146122645760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b506001600b828154811061227457fe5b906000526020600020906004020160030160006101000a81548160ff021916908315150217905550600b81815481106122a957fe5b600091825260209091206004909102015460ff16600b8111156122c857fe5b7f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713600b83815481106122f657fe5b6000918252602080832060049290920290910154604080516101009092046001600160a01b03168252918101929092528051918290030190a250565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561237e57600080fd5b505afa158015612392573d6000803e3d6000fd5b505050506040513d60208110156123a857600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b031633146124245760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50600080546001600160a01b0319166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156124b957600080fd5b505afa1580156124cd573d6000803e3d6000fd5b505050506040513d60208110156124e357600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b0316331461255f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b5060105460ff1615156001146125bc576040805162461bcd60e51b815260206004820152601960248201527f74696d656c6f636b20616c72656164792064697361626c656400000000000000604482015290519081900360640190fd5b601154158015906125cf57504360115411155b15612617576010805460ff19169055604080516000815290517f4c7b045b73aeb932b852a552b19b844e3323ffaa5672094da7cd07a236fe23d89181900360200190a1612649565b6126456115837f000000000000000000000000000000000000000000000000000000000000000060076143b4565b6011555b565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d60208110156126c157600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b0316331461273d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50601054610100900460ff161561279b576040805162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b6010805461ff001960ff1990911660011716610100179055565b6003546001600160a01b031690565b6000600a547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282257600080fd5b505afa158015612836573d6000803e3d6000fd5b505050506040513d602081101561284c57600080fd5b505103905090565b600d5461708001421061264957600f54600e55600354604080517f4249719f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152633b9aca00602483015291519190921691634249719f916044808301926020929190829003018186803b1580156128f757600080fd5b505afa15801561290b573d6000803e3d6000fd5b505050506040513d602081101561292157600080fd5b5051600f5542600d55565b60085481565b60008060606004600085600b81111561294757fe5b600b81111561295257fe5b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156129b457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612996575b5050505050905060005b8151811015612a09578181815181106129d357fe5b60200260200101516001600160a01b0316866001600160a01b03161415612a0157600193509150612a139050565b6001016129be565b5060008092509250505b9250929050565b6001546001600160a01b031681565b6002546000906001600160a01b0316612a89576040805162461bcd60e51b815260206004820152601b60248201527f5a65726f20616464726573733a205969656c645265706f727465720000000000604482015290519081900360640190fd5b600254604080517f015688830000000000000000000000000000000000000000000000000000000081529051611349926001600160a01b0316916301568883916004808301926020929190829003018186803b158015612ae857600080fd5b505afa158015612afc573d6000803e3d6000fd5b505050506040513d6020811015612b1257600080fd5b5051600254604080517f01568883000000000000000000000000000000000000000000000000000000008152905161133d926001600160a01b0316916301568883916004808301926020929190829003018186803b158015612b7357600080fd5b505afa158015612b87573d6000803e3d6000fd5b505050506040513d6020811015612b9d57600080fd5b5051600254604080517f78a642f200000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916378a642f291600480820192602092909190829003018186803b158015612bfd57600080fd5b505afa158015612c11573d6000803e3d6000fd5b505050506040513d6020811015612c2757600080fd5b50519061425d565b60008054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015612c7b57600080fd5b505afa158015612c8f573d6000803e3d6000fd5b505050506040513d6020811015612ca557600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b03163314612d215760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b50600380546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f179276fedd32be7c465135f8e074aefcd470c855d2550f83a36a45bfbaa61ea59181900360200190a150565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc257600080fd5b505afa158015612dd6573d6000803e3d6000fd5b505050506040513d6020811015612dec57600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b03163314612e685760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b506001600160a01b0382166000818152600760209081526040918290208490558151928352820183905280517fe7241938ba6149d740ded135df5456507cf483594927453d5c472c7e170ad2c49281900390910190a15050565b60046020528160005260406000208181548110612ede57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60105460ff1681565b60115481565b6001600160a01b03821660009081527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a602052604081205460ff16156130015760056000805b600b811115612f5a57fe5b8152602080820192909252604090810160009081203382528352819020548151808301909252601682527f54726561737572793a206e6f7420617070726f76656400000000000000000000928201929092529060ff16612ffb5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b506130c4565b6001600160a01b03831660009081527f458b30c2d72bfd2c6317304a4594ecbafe5f729d3111b65fdc3a33bd48e5432d602052604090205460ff161561304c57600560006004612f4f565b604080518082018252601781527f54726561737572793a20696e76616c696420746f6b656e0000000000000000006020808301918252925162461bcd60e51b8152600481019384528251602482015282519293928392604490920191908083836000831561087b578181015183820152602001610863565b6130d96001600160a01b03841633308761440d565b60006130e58486613847565b90506130f18184613fbe565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f1933846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561316a57600080fd5b505af115801561317e573d6000803e3d6000fd5b5050600854613190925090508261419f565b600855604080518681526020810183905281516001600160a01b038716927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a2509392505050565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b3360009081527feddb6698d7c569ff62ff64f1f1492bf14a54594835ba0faac91f84b4f5d814606020908152604091829020548251808401909352601683527f54726561737572793a206e6f7420617070726f766564000000000000000000009183019190915260ff166132c65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b506001600160a01b03811660009081527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a6020908152604091829020548251808401909352601683527f54726561737572793a206e6f74206163636570746564000000000000000000009183019190915260ff166133855760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b5061339b6001600160a01b03821633308561440d565b60006133a78284613847565b6001546040805163ae5c6cd360e01b81526004810184905233602482015260006044820181905291519394506001600160a01b039092169263ae5c6cd392606480820193929182900301818387803b15801561340257600080fd5b505af1158015613416573d6000803e3d6000fd5b50506009546134289250905082613fbe565b600955600854613438908261419f565b600855604080518481526020810183905281516001600160a01b0385169233927fc6d98eecfc9c78ab62c89a82950079b54874749f1f6f24090f7acc758bc2f309929081900390910190a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156134f857600080fd5b505afa15801561350c573d6000803e3d6000fd5b505050506040513d602081101561352257600080fd5b505160408051808201909152600c81526b15539055551213d49256915160a21b6020820152906001600160a01b0316331461359e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b5060105460ff16156135f7576040805162461bcd60e51b815260206004820152601160248201527f55736520717565756554696d656c6f636b000000000000000000000000000000604482015290519081900360640190fd5b600983600b81111561360557fe5b141561362b57600180546001600160a01b0319166001600160a01b0384161790556137f2565b600b83600b81111561363957fe5b141561365f57600280546001600160a01b0319166001600160a01b0384161790556137f2565b60016005600085600b81111561367157fe5b600b81111561367c57fe5b8152602080820192909252604090810160009081206001600160a01b03871682529092529020805460ff1916911515919091179055600583600b8111156136bf57fe5b14156136f4576001600160a01b03828116600090815260066020526040902080546001600160a01b0319169183169190911790555b60006137008385612932565b509050806137f0576004600085600b81111561371857fe5b600b81111561372357fe5b8152602080820192909252604001600090812080546001810182559082529190200180546001600160a01b0319166001600160a01b038516179055600584600b81111561376c57fe5b14806137835750600284600b81111561378157fe5b145b156137f0576000806137958587612932565b9150915081156137ed576004600087600b8111156137af57fe5b600b8111156137ba57fe5b815260200190815260200160002081815481106137d357fe5b600091825260209091200180546001600160a01b03191690555b50505b505b82600b8111156137fe57fe5b604080516001600160a01b03851681526001602082015281517f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e1713929181900390910190a2505050565b6000613977836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561388557600080fd5b505afa158015613899573d6000803e3d6000fd5b505050506040513d60208110156138af57600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216600a0a91613971916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163313ce56791600480820192602092909190829003018186803b15801561393857600080fd5b505afa15801561394c573d6000803e3d6000fd5b505050506040513d602081101561396257600080fd5b5051859060ff16600a0a6143b4565b906145ae565b6001600160a01b03841660009081527f458b30c2d72bfd2c6317304a4594ecbafe5f729d3111b65fdc3a33bd48e5432d602052604090205490915060ff1615613a63576001600160a01b038084166000818152600660209081526040918290205482517f4249719f00000000000000000000000000000000000000000000000000000000815260048101949094526024840187905291519190931692634249719f9260448082019391829003018186803b158015613a3457600080fd5b505afa158015613a48573d6000803e3d6000fd5b505050506040513d6020811015613a5e57600080fd5b505190505b92915050565b60095481565b60105460ff161515600114613acb576040805162461bcd60e51b815260206004820181905260248201527f54696d656c6f636b2069732064697361626c65642c2075736520656e61626c65604482015290519081900360640190fd5b613ad36146af565b600b8281548110613ae057fe5b600091825260209091206040805160c081019091526004909202018054829060ff16600b811115613b0d57fe5b600b811115613b1857fe5b815281546001600160a01b03610100918290048116602084015260018401541660408301526002830154606083015260039092015460ff80821615156080808501919091529390910416151560a09091015281015190915015613bc2576040805162461bcd60e51b815260206004820152601960248201527f416374696f6e20686173206265656e206e756c6c696669656400000000000000604482015290519081900360640190fd5b8060a0015115613c19576040805162461bcd60e51b815260206004820181905260248201527f416374696f6e2068617320616c7265616479206265656e206578656375746564604482015290519081900360640190fd5b8060600151431015613c72576040805162461bcd60e51b815260206004820152601560248201527f54696d656c6f636b206e6f7420636f6d706c6574650000000000000000000000604482015290519081900360640190fd5b60098151600b811115613c8157fe5b1415613cb0576020810151600180546001600160a01b0319166001600160a01b03909216919091179055613f26565b600b8151600b811115613cbf57fe5b1415613cee576020810151600280546001600160a01b0319166001600160a01b03909216919091179055613f26565b6001600560008360000151600b811115613d0457fe5b600b811115613d0f57fe5b815260208082019290925260409081016000908120858401516001600160a01b031682529092529020805460ff191691151591909117905560058151600b811115613d5657fe5b1415613d97576040818101516020808401516001600160a01b039081166000908152600690925292902080546001600160a01b031916929091169190911790555b6000613dab82602001518360000151612932565b50905080613f2457600460008360000151600b811115613dc757fe5b600b811115613dd257fe5b81526020808201929092526040016000908120848301518154600181018355918352929091200180546001600160a01b0319166001600160a01b0390921691909117905560058251600b811115613e2557fe5b1415613e9f57600080613e3d84602001516002612932565b915091508115613e9857600260005260046020527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7805482908110613e7e57fe5b600091825260209091200180546001600160a01b03191690555b5050613f24565b60028251600b811115613eae57fe5b1415613f2457600080613ec684602001516005612932565b915091508115613f2157600560005260046020527f04cde762ef08b6b6c5ded8e8c4c0b3f4e5c9ad7342c88fcc93681b4588b73f05805482908110613f0757fe5b600091825260209091200180546001600160a01b03191690555b50505b505b6001600b8381548110613f3557fe5b6000918252602090912060036004909202010180549115156101000261ff00199092169190911790558051600b811115613f6b57fe5b7f7531a7aefe3985500c4dec2dcb6049a708f14c6a8a9022b435b8841bdb8e17138260200151600160405180836001600160a01b0316815260200182151581526020019250505060405180910390a25050565b600061400083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506145f0565b9392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106140b25780518252601f199092019160209182019101614093565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614114576040519150601f19603f3d011682016040523d82523d6000602084013e614119565b606091505b5091509150818015614147575080511580614147575080806020019051602081101561414457600080fd5b50515b614198576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b600082820183811015614000576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60007f800000000000000000000000000000000000000000000000000000000000000082106142595760405162461bcd60e51b815260040180806020018281038252602881526020018061474b6028913960400191505060405180910390fd5b5090565b60008183038183128015906142725750838113155b80614287575060008312801561428757508381135b6140005760405162461bcd60e51b81526004018080602001828103825260248152602001806147736024913960400191505060405180910390fd5b600081614316576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14801561436457507f800000000000000000000000000000000000000000000000000000000000000083145b156143a05760405162461bcd60e51b81526004018080602001828103825260218152602001806147096021913960400191505060405180910390fd5b60008284816143ab57fe5b05949350505050565b6000826143c357506000613a63565b828202828482816143d057fe5b04146140005760405162461bcd60e51b815260040180806020018281038252602181526020018061472a6021913960400191505060405180910390fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106144c05780518252601f1990920191602091820191016144a1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614522576040519150601f19603f3d011682016040523d82523d6000602084013e614527565b606091505b5091509150818015614555575080511580614555575080806020019051602081101561455257600080fd5b50515b6145a6576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b600061400083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061464a565b600081848411156146425760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b505050900390565b600081836146995760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561087b578181015183820152602001610863565b5060008385816146a557fe5b0495945050505050565b6040805160c08101909152806000815260006020820181905260408201819052606082018190526080820181905260a0909101529056fe416464726573732063616e6e6f7420626520746865207a65726f20616464726573735369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a264697066735822122002d40b4a25b3b1a9eb006bef994148f83628286f4939947d6dab1a1179c4fb0264736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "baseSupply()": {
        "details": "use this any time you need to query supply",
        "returns": {
          "_0": "uint256"
        }
      },
      "deltaTokenPrice()": {
        "details": "calculated as (currentPrice - lastPrice) / lastPrice           using 9 decimals for the price values and for return value.",
        "returns": {
          "_0": "int256 proportional change in treasury yield. 9 decimals"
        }
      },
      "deltaTreasuryYield()": {
        "details": "calculated as (currentYield - lastYield) / lastYield           using 9 decimals for the yield values and for return value.           example: ((10_000_000_000 - 15_000_000_000)*(10**9)) / 15_000_000_000 = -333333333           -333333333 is equivalent to the proportion -0.333333333 (that is, -33.3333333%)",
        "returns": {
          "_0": "int256 proportional change in treasury yield. 9 decimals"
        }
      },
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_profit": "uint256",
          "_token": "address"
        },
        "returns": {
          "send_": "uint256"
        }
      },
      "disable(uint8,address)": {
        "params": {
          "_status": "STATUS",
          "_toDisable": "address"
        }
      },
      "enable(uint8,address,address)": {
        "params": {
          "_address": "address",
          "_calculator": "address",
          "_status": "STATUS"
        }
      },
      "execute(uint256)": {
        "params": {
          "_index": "uint256"
        }
      },
      "getTheoBondingCalculator()": {
        "returns": {
          "_0": "address for theo liquidity pool"
        }
      },
      "incurDebt(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      },
      "indexInRegistry(address,uint8)": {
        "returns": {
          "_0": "(bool, uint256)"
        }
      },
      "manage(address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_recipient": "address"
        }
      },
      "nullify(uint256)": {
        "params": {
          "_index": "uint256"
        }
      },
      "queueTimelock(uint8,address,address)": {
        "params": {
          "_address": "address",
          "_calculator": "address",
          "_status": "STATUS"
        }
      },
      "repayDebtWithReserve(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      },
      "repayDebtWithTHEO(uint256)": {
        "params": {
          "_amount": "uint256"
        }
      },
      "setDebtLimit(address,uint256)": {
        "params": {
          "_address": "address",
          "_limit": "uint256"
        }
      },
      "setTheoBondingCalculator(address)": {
        "params": {
          "_theoBondingCalculator": "address of the theo bonding calculator"
        }
      },
      "tokenPerformanceUpdate()": {
        "details": "this method can be called at any time but will only update contract state every 8 hours"
      },
      "tokenValue(address,uint256)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        },
        "returns": {
          "value_": "uint256"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "uint256",
          "_token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auditReserves()": {
        "notice": "takes inventory of all tracked assetsalways consolidate to recognized reserves before audit"
      },
      "baseSupply()": {
        "notice": "returns supply metric that cannot be manipulated by debt"
      },
      "deltaTokenPrice()": {
        "notice": "calculate the proportional change (i.e. a percentage as a decimal) in token price, with 9 decimals"
      },
      "deltaTreasuryYield()": {
        "notice": "calculate the proportional change (i.e. a percentage as a decimal) in treasury yield, with 9 decimals"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "allow approved address to deposit an asset for THEO"
      },
      "disable(uint8,address)": {
        "notice": "disable permission from address"
      },
      "disableTimelock()": {
        "notice": "disables timelocked functions"
      },
      "enable(uint8,address,address)": {
        "notice": "enable permission from queue"
      },
      "execute(uint256)": {
        "notice": "enable queued permission"
      },
      "getTheoBondingCalculator()": {
        "notice": "get the address of the theo bonding calculator"
      },
      "incurDebt(uint256,address)": {
        "notice": "allow approved address to borrow reserves"
      },
      "indexInRegistry(address,uint8)": {
        "notice": "check if registry contains address"
      },
      "initialize()": {
        "notice": "enables timelocks after initilization"
      },
      "manage(address,uint256)": {
        "notice": "allow approved address to withdraw assets"
      },
      "mint(address,uint256)": {
        "notice": "mint new THEO using excess reserves"
      },
      "nullify(uint256)": {
        "notice": "cancel timelocked action"
      },
      "queueTimelock(uint8,address,address)": {
        "notice": "queue address to receive permission"
      },
      "repayDebtWithReserve(uint256,address)": {
        "notice": "allow approved address to repay borrowed reserves with reserves"
      },
      "repayDebtWithTHEO(uint256)": {
        "notice": "allow approved address to repay borrowed reserves with THEO"
      },
      "setDebtLimit(address,uint256)": {
        "notice": "set max debt for address"
      },
      "setTheoBondingCalculator(address)": {
        "notice": "set the address for the theo bonding calculator"
      },
      "tokenPerformanceUpdate()": {
        "notice": "update the current token price and previous (last) token price.                      Token price is calculated with the theoBondingCalculator, as set by the Governor"
      },
      "tokenValue(address,uint256)": {
        "notice": "returns THEO valuation for an amount of Quote Tokens"
      },
      "withdraw(uint256,address)": {
        "notice": "allow approved address to burn THEO for reserves"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11676,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITheopetraAuthority)2501"
      },
      {
        "astId": 7711,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "sTHEO",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITokenDebt)2523"
      },
      {
        "astId": 7713,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "yieldReporter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IYieldReporter)2643"
      },
      {
        "astId": 7715,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "theoBondingCalculator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBondCalculator)1833"
      },
      {
        "astId": 7720,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "registry",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(STATUS)7685,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7726,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "permissions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_enum(STATUS)7685,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7730,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "bondCalculator",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7734,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "debtLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7736,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "totalReserves",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7738,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "totalDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7740,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "theoDebt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7743,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "permissionQueue",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Queue)7698_storage)dyn_storage"
      },
      {
        "astId": 7747,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "priceInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(PriceInfo)7707_storage"
      },
      {
        "astId": 7749,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "timelockEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 7751,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "initialized",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 7753,
        "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
        "label": "onChainGovernanceTimelock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Queue)7698_storage)dyn_storage": {
        "base": "t_struct(Queue)7698_storage",
        "encoding": "dynamic_array",
        "label": "struct TheopetraTreasury.Queue[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBondCalculator)1833": {
        "encoding": "inplace",
        "label": "contract IBondCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(ITheopetraAuthority)2501": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenDebt)2523": {
        "encoding": "inplace",
        "label": "contract ITokenDebt",
        "numberOfBytes": "20"
      },
      "t_contract(IYieldReporter)2643": {
        "encoding": "inplace",
        "label": "contract IYieldReporter",
        "numberOfBytes": "20"
      },
      "t_enum(STATUS)7685": {
        "encoding": "inplace",
        "label": "enum TheopetraTreasury.STATUS",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(STATUS)7685,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)7685",
        "label": "mapping(enum TheopetraTreasury.STATUS => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(STATUS)7685,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)7685",
        "label": "mapping(enum TheopetraTreasury.STATUS => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(PriceInfo)7707_storage": {
        "encoding": "inplace",
        "label": "struct TheopetraTreasury.PriceInfo",
        "members": [
          {
            "astId": 7700,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "deltaTreasuryYield",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 7702,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "timeLastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7704,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "lastTokenPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7706,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "currentTokenPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Queue)7698_storage": {
        "encoding": "inplace",
        "label": "struct TheopetraTreasury.Queue",
        "members": [
          {
            "astId": 7687,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "managing",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(STATUS)7685"
          },
          {
            "astId": 7689,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "toPermit",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7691,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "calculator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7693,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "timelockEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7695,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "nullify",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7697,
            "contract": "src/Theopetra/TheopetraTreasury.sol:TheopetraTreasury",
            "label": "executed",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}