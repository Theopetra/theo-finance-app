{
  "address": "0x747D4b0C6db8d197Aa6F8E11f4C45e95dC872C5e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_theo",
          "type": "address"
        },
        {
          "internalType": "contract IStakedTHEOToken",
          "name": "_stheo",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITheopetraAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        }
      ],
      "name": "PullNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        }
      ],
      "name": "PushNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "dRB",
          "type": "int64"
        }
      ],
      "name": "SetDRB",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "dYB",
          "type": "int64"
        }
      ],
      "name": "SetDYB",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toRef",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDao",
          "type": "uint256"
        }
      ],
      "name": "SetRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "bondRateVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "int64[4]",
          "name": "_rates",
          "type": "int64[4]"
        },
        {
          "internalType": "uint64[2]",
          "name": "_intervals",
          "type": "uint64[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_autoStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getNotesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "depositInterval",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "tuneInterval",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "discount",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "autoStake",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created_",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "expiry_",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeRemaining_",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "discount_",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITheopetraAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "int64",
          "name": "_discountRateBond",
          "type": "int64"
        }
      ],
      "name": "setDiscountRateBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "int64",
          "name": "_discountRateYield",
          "type": "int64"
        }
      ],
      "name": "setDiscountRateYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "int64",
          "name": "bondRateFixed",
          "type": "int64"
        },
        {
          "internalType": "int64",
          "name": "maxBondRateVariable",
          "type": "int64"
        },
        {
          "internalType": "int64",
          "name": "discountRateBond",
          "type": "int64"
        },
        {
          "internalType": "int64",
          "name": "discountRateYield",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeead481ca958423c73c6fc1dd3935de511e318905e4ee07acb48f20eab108a96",
  "receipt": {
    "to": null,
    "from": "0xd48b6DC368869914C9aEC20E6eeB1C248EEAf93C",
    "contractAddress": "0x747D4b0C6db8d197Aa6F8E11f4C45e95dC872C5e",
    "transactionIndex": 32,
    "gasUsed": "4398076",
    "logsBloom": "0x
    "blockHash": "0x8487251d9739f7319fe84b4b61f645cd1f457e0b1422a313164f2ff5ac519526",
    "transactionHash": "0xeead481ca958423c73c6fc1dd3935de511e318905e4ee07acb48f20eab108a96",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 15462215,
        "transactionHash": "0xeead481ca958423c73c6fc1dd3935de511e318905e4ee07acb48f20eab108a96",
        "address": "0x747D4b0C6db8d197Aa6F8E11f4C45e95dC872C5e",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000fe9fab692c951eeb28345b3a22008f4057eaa232"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0x8487251d9739f7319fe84b4b61f645cd1f457e0b1422a313164f2ff5ac519526"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 15462215,
        "transactionHash": "0xeead481ca958423c73c6fc1dd3935de511e318905e4ee07acb48f20eab108a96",
        "address": "0xfAc0403a24229d7e2Edd994D50F5940624CBeac2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000747d4b0c6db8d197aa6f8e11f4c45e95dc872c5e",
          "0x00000000000000000000000018bba38a6f8427ed2b65b5c6e9532cd80f93aff4"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 81,
        "blockHash": "0x8487251d9739f7319fe84b4b61f645cd1f457e0b1422a313164f2ff5ac519526"
      }
    ],
    "blockNumber": 15462215,
    "cumulativeGasUsed": "8022887",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfe9fab692c951eeb28345b3a22008f4057eaa232",
    "0xfAc0403a24229d7e2Edd994D50F5940624CBeac2",
    "0xE249e013E7AAbCC79726e9d62B0c2d89CdD69f51",
    "0x18Bba38a6F8427Ed2B65b5C6E9532CD80f93aFf4",
    "0xf3143ae15deA73F4E8F32360F6b669173c854388"
  ],
  "numDeployments": 1,
  "solcInputHash": "efb75347439302bbdacb037fa0f0057d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_theo\",\"type\":\"address\"},{\"internalType\":\"contract IStakedTHEOToken\",\"name\":\"_stheo\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"}],\"name\":\"PullNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"}],\"name\":\"PushNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"dRB\",\"type\":\"int64\"}],\"name\":\"SetDRB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"dYB\",\"type\":\"int64\"}],\"name\":\"SetDYB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toRef\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDao\",\"type\":\"uint256\"}],\"name\":\"SetRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"bondRateVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"int64[4]\",\"name\":\"_rates\",\"type\":\"int64[4]\"},{\"internalType\":\"uint64[2]\",\"name\":\"_intervals\",\"type\":\"uint64[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_autoStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNotesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"depositInterval\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tuneInterval\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"discount\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created_\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"expiry_\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeRemaining_\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"discount_\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITheopetraAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"_discountRateBond\",\"type\":\"int64\"}],\"name\":\"setDiscountRateBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"_discountRateYield\",\"type\":\"int64\"}],\"name\":\"setDiscountRateYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"int64\",\"name\":\"bondRateFixed\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"maxBondRateVariable\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"discountRateBond\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"discountRateYield\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondRateVariable(uint256)\":{\"details\":\"see marketPrice for calculation details.\",\"params\":{\"_id\":\"ID of market\"}},\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],int64[4],uint64[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in THEO or quote), initial price / THEO (9 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_rates\":\"[bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in THEO decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"deposit(uint256,uint256,uint256,address,address,bool)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of sTHEO due\"}},\"getMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"uses the theoBondingCalculator.valuation method (using an amount of 1) to get the quote token value (Quote-Token per THEO).\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in THEO decimals price is derived from the equation P = Cmv * (1 - Brv) where p = price cmv = current market value Brv = bond rate, variable. This is a proportion (that is, a percentage in its decimal form), with 9 decimals Brv = Brf + Bcrb + Bcyb where Brf = bond rate, fixed Bcrb = Drb * deltaTokenPrice Bcyb = Dyb * deltaTreasuryYield where Drb is a discount rate as a proportion (that is, a percentage in its decimal form) applied to the fluctuation in token price (deltaTokenPrice) Dyb is a discount rate as a proportion (that is a percentage in its decimal form) applied to the fluctuation of the treasury yield (deltaTreasuryYield) Drb, Dyb, deltaTokenPrice and deltaTreasuryYield are expressed as proportions (that is, they are a percentages in decimal form), with 9 decimals\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = theo decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of THEO to be paid in THEO decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"created_\":\"        the time the note was created\",\"expiry_\":\"         the time the note is redeemable\",\"matured_\":\"        if the payout can be redeemed\",\"payout_\":\"         the payout due, in sTHEO\",\"timeRemaining_\":\"  the time remaining until the note is matured\"}},\"pullNote(address,uint256)\":{\"details\":\"if the note being pulled is autostaked then update noteForClaim as follows:                     get the relevant `claimIndex` associated with the note that is being pulled.                     Then add the claimIndex to the recipient's noteForClaim.                     After updating noteForClaim, the staking claim is pushed to the recipient, in order to                     update `claimTransfers` in the Staking contract and thereby change claim ownership (from the note's pusher to the note's recipient)\",\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"details\":\"adapted from Olympus V2. Olympus V2 either sends payout as gOHM                     or calls an `unwrap` function on the staking contract                     to convert the payout from gOHM into sOHM and then send as sOHM.                     This current contract sends payout as sTHEO.\",\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in sTHEO\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in sTHEO\"}},\"setDiscountRateBond(uint256,int64)\":{\"params\":{\"_discountRateBond\":\"uint64 the new Discount Rate Return Bond (Drb), 9 decimals\",\"_id\":\"uint256 the ID of the bond market to update\"}},\"setDiscountRateYield(uint256,int64)\":{\"params\":{\"_discountRateYield\":\"uint64 the new Discount Rate Return Yield (Dyb), 9 decimals\",\"_id\":\"uint256 the ID of the bond market to update\"}}},\"title\":\"Theopetra Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondRateVariable(uint256)\":{\"notice\":\"calculate bond rate variable (Brv)\"},\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],int64[4],uint64[2])\":{\"notice\":\"creates a new market type\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"deposit(uint256,uint256,uint256,address,address,bool)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"getMarkets()\":{\"notice\":\"returns an array of market IDs for historical analysis\"},\"getMarketsFor(address)\":{\"notice\":\"returns an array of all market IDs for a given quote token\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token (i.e. quote tokens per THEO)\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setDiscountRateBond(uint256,int64)\":{\"notice\":\"update the Discount Rate Return Bond (Drb) for a specified market\"},\"setDiscountRateYield(uint256,int64)\":{\"notice\":\"update the Discount Rate Return Yield (Dyb) for a specified market\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"notice\":\"Originally based off of Olympus Bond Depository V2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Theopetra/BondDepository.sol\":\"TheopetraBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"src/Interfaces/IBondCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\r\\n\\r\\npragma solidity >=0.7.5 <=0.8.10;\\r\\n\\r\\ninterface IBondCalculator {\\r\\n    function valuation(address tokenIn, uint256 amount_) external view returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x3e3d7eae0a83b25e00501a4f475065a92fd52954cf7c496480cf3bcbdf5dfaf9\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IBondDepository {\\r\\n    // Info about each type of market\\r\\n    struct Market {\\r\\n        uint256 capacity; // capacity remaining\\r\\n        IERC20 quoteToken; // token to accept as payment\\r\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in THEO (false, default)\\r\\n        uint256 sold; // base tokens out\\r\\n        uint256 purchased; // quote tokens in\\r\\n        uint256 totalDebt; // total debt from market\\r\\n        uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\r\\n    }\\r\\n\\r\\n    // Info for creating new markets\\r\\n    struct Terms {\\r\\n        bool fixedTerm; // fixed term or fixed expiration\\r\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\r\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\r\\n        int64 bondRateFixed; // 9 decimal fixed discount expressed as a proportion (that is, a percentage in its decimal form)\\r\\n        int64 maxBondRateVariable; // 9 decimal maximum proportion (that is, a percentage in its decimal form) discount on current market price\\r\\n        int64 discountRateBond; // 9 decimal\\r\\n        int64 discountRateYield; // 9 decimal\\r\\n        uint256 maxDebt; // 9 decimal debt maximum in THEO\\r\\n    }\\r\\n\\r\\n    // Additional info about market.\\r\\n    struct Metadata {\\r\\n        uint48 lastTune; // last timestamp when control variable was tuned\\r\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\r\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\r\\n        uint64 depositInterval; // target frequency of deposits\\r\\n        uint64 tuneInterval; // frequency of tuning\\r\\n        uint8 quoteDecimals; // decimals of quote token\\r\\n    }\\r\\n\\r\\n    struct DepositArgs {\\r\\n        uint256 id;\\r\\n        uint256 amount;\\r\\n        uint256 maxPrice;\\r\\n        address user;\\r\\n        address referral;\\r\\n        bool autoStake;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice deposit market\\r\\n     * @param _bid uint256\\r\\n     * @param _amount uint256\\r\\n     * @param _maxPrice uint256\\r\\n     * @param _user address\\r\\n     * @param _referral address\\r\\n     * @return payout_ uint256\\r\\n     * @return expiry_ uint256\\r\\n     * @return index_ uint256\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _bid,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice,\\r\\n        address _user,\\r\\n        address _referral,\\r\\n        bool _autoStake\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 payout_,\\r\\n            uint256 expiry_,\\r\\n            uint256 index_\\r\\n        );\\r\\n\\r\\n    function create(\\r\\n        IERC20 _quoteToken, // token used to deposit\\r\\n        uint256[3] memory _market, // [capacity, initial price]\\r\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\r\\n        uint256[2] memory _terms, // [vesting, conclusion]\\r\\n        int64[4] memory _rates, // [bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\\r\\n        uint64[2] memory _intervals // [deposit interval, tune interval]\\r\\n    ) external returns (uint256 id_);\\r\\n\\r\\n    function close(uint256 _id) external;\\r\\n\\r\\n    function isLive(uint256 _bid) external view returns (bool);\\r\\n\\r\\n    function liveMarkets() external view returns (uint256[] memory);\\r\\n\\r\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\r\\n\\r\\n    function getMarkets() external view returns (uint256[] memory);\\r\\n\\r\\n    function getMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\r\\n\\r\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\r\\n\\r\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\r\\n\\r\\n    function setDiscountRateBond(uint256 _id, int64 _discountRateBond) external;\\r\\n\\r\\n    function setDiscountRateYield(uint256 _id, int64 _discountRateYield) external;\\r\\n\\r\\n    function bondRateVariable(uint256 _id) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x61392140c094d6f586998f4326d15166d966bf715b9efd11b4462d29f6b5bc13\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x883d9eb9e27b20a216380bc925327f3e54fc960786816babdb5564aa5ddab84a\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x4f969ce9fee17f873b1616066a2dc3736e2534ab6aab8143fe1a80f27fa857fa\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface INoteKeeper {\\r\\n    /**\\r\\n     * @notice  Info for market note\\r\\n     * @dev     Note::payout is sTHEO remaining to be paid\\r\\n     *          Note::created is the time the Note was created\\r\\n     *          Note::matured is the timestamp when the Note is redeemable\\r\\n     *          Note::redeemed is time market was redeemed\\r\\n     *          Note::marketID is market ID of deposit. uint48 to avoid adding a slot.\\r\\n     */\\r\\n    struct Note {\\r\\n        uint256 payout;\\r\\n        uint48 created;\\r\\n        uint48 matured;\\r\\n        uint48 redeemed;\\r\\n        uint48 marketID;\\r\\n        uint48 discount;\\r\\n        bool autoStake;\\r\\n    }\\r\\n\\r\\n    function redeem(address _user, uint256[] memory _indexes) external returns (uint256);\\r\\n\\r\\n    function redeemAll(address _user) external returns (uint256);\\r\\n\\r\\n    function pushNote(address to, uint256 index) external;\\r\\n\\r\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\r\\n\\r\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\r\\n\\r\\n    function pendingFor(address _user, uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 payout_,\\r\\n            uint48 created_,\\r\\n            uint48 expiry_,\\r\\n            uint48 timeRemaining_,\\r\\n            bool matured_,\\r\\n            uint48 discount_\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x046ee2be386d88b03d3b87a615376325c878f5357f9f74a2b28a7265fc9edc83\",\"license\":\"AGPL-3.0-only\"},\"src/Interfaces/IStakedTHEOToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IStakedTHEOToken is IERC20 {\\r\\n    function rebase(uint256 theoProfit_, uint256 epoch_) external returns (uint256);\\r\\n\\r\\n    function circulatingSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view override returns (uint256);\\r\\n\\r\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\r\\n\\r\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\r\\n\\r\\n    function index() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xd1d78f54ee58eaea20b84d49d9d8635713f01d2a0bafff2097f67054f5012e4f\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface IStaking {\\r\\n    function stake(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        bool _claim\\r\\n    ) external returns (uint256, uint256 _index);\\r\\n\\r\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\r\\n\\r\\n    function forfeit(uint256 _index) external;\\r\\n\\r\\n    function toggleLock() external;\\r\\n\\r\\n    function unstake(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        bool _trigger,\\r\\n        bool _rebasing\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\r\\n\\r\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\r\\n\\r\\n    function rebase() external;\\r\\n\\r\\n    function index() external view returns (uint256);\\r\\n\\r\\n    function contractBalance() external view returns (uint256);\\r\\n\\r\\n    function totalStaked() external view returns (uint256);\\r\\n\\r\\n    function supplyInWarmup() external view returns (uint256);\\r\\n\\r\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\r\\n\\r\\n    function claimAll(address _recipient) external returns (uint256);\\r\\n\\r\\n    function pushClaim(address _to, uint256 _index) external;\\r\\n\\r\\n    function pullClaim(address _from, uint256 _index) external returns (uint256 newIndex_);\\r\\n\\r\\n    function pushClaimForBond(address _to, uint256 _index) external returns (uint256 newIndex_);\\r\\n\\r\\n    function basis() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x2ca97be98b507a6adb04327383352f7ba5a2212a02777c56b1fb3148746698b6\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITheopetraAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\ninterface ITheopetraAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event ManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event SignerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event ManagerPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n    event SignerPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function whitelistSigner() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x49e1a41d2165ac83d9e6f5d082525be2d6703b832820ddc69b4b5a1687200f62\",\"license\":\"AGPL-3.0\"},\"src/Interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IBondCalculator.sol\\\";\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token,\\r\\n        uint256 _profit\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 _amount, address _token) external;\\r\\n\\r\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\r\\n\\r\\n    function mint(address _recipient, uint256 _amount) external;\\r\\n\\r\\n    function manage(address _token, uint256 _amount) external;\\r\\n\\r\\n    function incurDebt(uint256 amount_, address token_) external;\\r\\n\\r\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\r\\n\\r\\n    function tokenPerformanceUpdate() external;\\r\\n\\r\\n    function baseSupply() external view returns (uint256);\\r\\n\\r\\n    function deltaTokenPrice() external view returns (int256);\\r\\n\\r\\n    function deltaTreasuryYield() external view returns (int256);\\r\\n\\r\\n    function getTheoBondingCalculator() external view returns (IBondCalculator);\\r\\n\\r\\n    function setTheoBondingCalculator(address _theoBondingCalculator) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x45035c58bb16003adfda4f8d308296291a0d6cb164ec0e01b838e47c025893d4\",\"license\":\"AGPL-3.0\"},\"src/Libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport { IERC20 } from \\\"../Interfaces/IERC20.sol\\\";\\r\\n\\r\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\r\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\r\\n/// Taken from Solmate\\r\\nlibrary SafeERC20 {\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\r\\n        );\\r\\n\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\r\\n        );\\r\\n\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\r\\n        );\\r\\n\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        (bool success, ) = to.call{ value: amount }(new bytes(0));\\r\\n\\r\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9ec668b63dca713592b25f84463679a4845b36b133eb02c04aa54e71d71c79e1\",\"license\":\"AGPL-3.0-only\"},\"src/Theopetra/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nimport \\\"../Types/NoteKeeper.sol\\\";\\r\\n\\r\\nimport \\\"../Libraries/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"../Interfaces/IBondDepository.sol\\\";\\r\\nimport \\\"../Interfaces/ITreasury.sol\\\";\\r\\nimport \\\"../Interfaces/IBondCalculator.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Theopetra Bond Depository\\r\\n * @notice Originally based off of Olympus Bond Depository V2\\r\\n */\\r\\n\\r\\ncontract TheopetraBondDepository is IBondDepository, NoteKeeper {\\r\\n    /* ======== DEPENDENCIES ======== */\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    /* ======== EVENTS ======== */\\r\\n\\r\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\r\\n    event CloseMarket(uint256 indexed id);\\r\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\r\\n    event SetDYB(uint256 indexed id, int64 dYB);\\r\\n    event SetDRB(uint256 indexed id, int64 dRB);\\r\\n\\r\\n    /* ======== STATE VARIABLES ======== */\\r\\n\\r\\n    // Storage\\r\\n    Market[] public markets; // persistent market data\\r\\n    Terms[] public terms; // deposit construction data\\r\\n    Metadata[] public metadata; // extraneous market data\\r\\n\\r\\n    // Queries\\r\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\r\\n\\r\\n    /* ======== STRUCTS ======== */\\r\\n\\r\\n    struct PriceInfo {\\r\\n        uint256 price;\\r\\n        uint48 bondRateVariable;\\r\\n    }\\r\\n\\r\\n    /* ======== CONSTRUCTOR ======== */\\r\\n\\r\\n    constructor(\\r\\n        ITheopetraAuthority _authority,\\r\\n        IERC20 _theo,\\r\\n        IStakedTHEOToken _stheo,\\r\\n        IStaking _staking,\\r\\n        ITreasury _treasury\\r\\n    ) NoteKeeper(_authority, _theo, _stheo, _staking, _treasury) {\\r\\n        // save gas for users by bulk approving stake() transactions\\r\\n        _theo.approve(address(_staking), 1e45);\\r\\n    }\\r\\n\\r\\n    /* ======== DEPOSIT ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\r\\n     * @param _id          the ID of the market\\r\\n     * @param _amount      the amount of quote token to spend\\r\\n     * @param _maxPrice    the maximum price at which to buy\\r\\n     * @param _user        the recipient of the payout\\r\\n     * @param _referral    the front end operator address\\r\\n     * @return payout_     the amount of sTHEO due\\r\\n     * @return expiry_     the timestamp at which payout is redeemable\\r\\n     * @return index_      the user index of the Note (used to redeem or query information)\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _id,\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice,\\r\\n        address _user,\\r\\n        address _referral,\\r\\n        bool _autoStake\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        returns (\\r\\n            uint256 payout_,\\r\\n            uint256 expiry_,\\r\\n            uint256 index_\\r\\n        )\\r\\n    {\\r\\n        // prevent \\\"stack too deep\\\"\\r\\n        DepositArgs memory depositInfo = DepositArgs(_id, _amount, _maxPrice, _user, _referral, _autoStake);\\r\\n\\r\\n        Market storage market = markets[depositInfo.id];\\r\\n        Terms memory term = terms[depositInfo.id];\\r\\n        PriceInfo memory priceInfo;\\r\\n        uint48 currentTime = uint48(block.timestamp);\\r\\n\\r\\n        // Markets end at a defined timestamp\\r\\n        // |-------------------------------------| t\\r\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\r\\n\\r\\n        // Debt decays over time\\r\\n        _decay(depositInfo.id, currentTime);\\r\\n\\r\\n        // Users input a maximum price, which protects them from price changes after\\r\\n        // entering the mempool. max price is a slippage mitigation measure\\r\\n        priceInfo.price = marketPrice(depositInfo.id);\\r\\n        require(priceInfo.price <= depositInfo.maxPrice, \\\"Depository: more than max price\\\");\\r\\n        /**\\r\\n         * payout for the deposit = amount / price\\r\\n         *\\r\\n         * where\\r\\n         * payout = THEO out\\r\\n         * amount = quote tokens in\\r\\n         * price = quote tokens : theo (i.e. 42069 DAI : THEO)\\r\\n         *\\r\\n         * 1e18 = THEO decimals (9) + price decimals (9)\\r\\n         */\\r\\n        payout_ = ((depositInfo.amount * 1e18) / priceInfo.price) / (10**metadata[depositInfo.id].quoteDecimals);\\r\\n\\r\\n        // markets have a max payout amount, capping size because deposits\\r\\n        // do not experience slippage. max payout is recalculated upon tuning\\r\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\r\\n\\r\\n        /*\\r\\n         * each market is initialized with a capacity\\r\\n         *\\r\\n         * this is either the number of THEO that the market can sell\\r\\n         * (if capacity in quote is false),\\r\\n         *\\r\\n         * or the number of quote tokens that the market can buy\\r\\n         * (if capacity in quote is true)\\r\\n         */\\r\\n        market.capacity -= market.capacityInQuote ? depositInfo.amount : payout_;\\r\\n\\r\\n        /**\\r\\n         * bonds mature with a cliff at a set timestamp\\r\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\r\\n         * after the expiry timestamp, the entire payout can be redeemed\\r\\n         *\\r\\n         * there are two types of bonds: fixed-term and fixed-expiration\\r\\n         *\\r\\n         * fixed-term bonds mature in a set amount of time from deposit\\r\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\r\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\r\\n         *\\r\\n         * fixed-expiration bonds mature at a set timestamp\\r\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\r\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\r\\n         */\\r\\n        expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\r\\n\\r\\n        // markets keep track of how many quote tokens have been\\r\\n        // purchased, and how much THEO has been sold\\r\\n        market.purchased += depositInfo.amount;\\r\\n        market.sold += payout_;\\r\\n\\r\\n        // increment total debt, which is later compared to maxDebt (this can be a circuit-breaker)\\r\\n        market.totalDebt += payout_;\\r\\n\\r\\n        emit Bond(depositInfo.id, depositInfo.amount, priceInfo.price);\\r\\n\\r\\n        /**\\r\\n         * user data is stored as Notes. these are isolated array entries\\r\\n         * storing the amount due, the time created, the time when payout\\r\\n         * is redeemable, the time when payout was redeemed, the ID\\r\\n         * of the market deposited into, and the Bond Rate Variable (Brv) discount on the bond\\r\\n         */\\r\\n        priceInfo.bondRateVariable = uint48(bondRateVariable(depositInfo.id));\\r\\n        index_ = addNote(\\r\\n            depositInfo.user,\\r\\n            payout_,\\r\\n            uint48(expiry_),\\r\\n            uint48(depositInfo.id),\\r\\n            depositInfo.referral,\\r\\n            priceInfo.bondRateVariable,\\r\\n            depositInfo.autoStake\\r\\n        );\\r\\n\\r\\n        // transfer payment to treasury\\r\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), depositInfo.amount);\\r\\n\\r\\n        // if max debt is breached, the market is closed\\r\\n        // this a circuit breaker\\r\\n        if (term.maxDebt < market.totalDebt) {\\r\\n            market.capacity = 0;\\r\\n            emit CloseMarket(depositInfo.id);\\r\\n        } else {\\r\\n            // if market will continue, the control variable is tuned to hit targets on time\\r\\n            _tune(depositInfo.id, currentTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             decay debt, and adjust control variable if there is an active change\\r\\n     * @param _id          ID of market\\r\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _decay(uint256 _id, uint48 _time) internal {\\r\\n        // Debt decay\\r\\n\\r\\n        /*\\r\\n         * Debt is a time-decayed sum of tokens spent in a market\\r\\n         * Debt is added when deposits occur and removed over time\\r\\n         * |\\r\\n         * |    debt falls with\\r\\n         * |   / \\\\  inactivity       / \\\\\\r\\n         * | /     \\\\              /\\\\/    \\\\\\r\\n         * |         \\\\           /         \\\\\\r\\n         * |           \\\\      /\\\\/            \\\\\\r\\n         * |             \\\\  /  and rises       \\\\\\r\\n         * |                with deposits\\r\\n         * |\\r\\n         * |------------------------------------| t\\r\\n         */\\r\\n        markets[_id].totalDebt -= debtDecay(_id);\\r\\n        metadata[_id].lastDecay = _time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice          adjust the market's maxPayout\\r\\n     * @dev             calculate the correct payout to complete on time assuming each bond\\r\\n     *                  will be max size in the desired deposit interval for the remaining time\\r\\n     *                  i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\r\\n     *                  is 10,000 THEO. max payout would be 1,000 THEO (10,000 * 1 / 10).\\r\\n     * @param _id       ID of market\\r\\n     * @param _time     uint48 timestamp (saves gas when passed in)\\r\\n     */\\r\\n    function _tune(uint256 _id, uint48 _time) internal {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\r\\n            Market memory market = markets[_id];\\r\\n\\r\\n            // compute seconds remaining until market will conclude\\r\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\r\\n            uint256 price = marketPrice(_id);\\r\\n\\r\\n            // standardize capacity into a base token amount\\r\\n            // theo decimals (9) + price decimals (9)\\r\\n            uint256 capacity = market.capacityInQuote\\r\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\r\\n                : market.capacity;\\r\\n\\r\\n            markets[_id].maxPayout = uint256((capacity * meta.depositInterval) / timeRemaining);\\r\\n\\r\\n            metadata[_id].lastTune = _time;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== CREATE ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice             creates a new market type\\r\\n     * @dev                current price should be in 9 decimals.\\r\\n     * @param _quoteToken  token used to deposit\\r\\n     * @param _market      [capacity (in THEO or quote), initial price / THEO (9 decimals), debt buffer (3 decimals)]\\r\\n     * @param _booleans    [capacity in quote, fixed term]\\r\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\r\\n     * @param _rates       [bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]\\r\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\r\\n     * @return id_         ID of new bond market\\r\\n     */\\r\\n    function create(\\r\\n        IERC20 _quoteToken,\\r\\n        uint256[3] memory _market,\\r\\n        bool[2] memory _booleans,\\r\\n        uint256[2] memory _terms,\\r\\n        int64[4] memory _rates,\\r\\n        uint64[2] memory _intervals\\r\\n    ) external override onlyPolicy returns (uint256 id_) {\\r\\n        // the length of the program, in seconds\\r\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\r\\n\\r\\n        // the decimal count of the quote token\\r\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\r\\n\\r\\n        /*\\r\\n         * initial target debt is equal to capacity (this is the amount of debt\\r\\n         * that will decay over in the length of the program if price remains the same).\\r\\n         * it is converted into base token terms if passed in in quote token terms.\\r\\n         *\\r\\n         * 1e18 = theo decimals (9) + initial price decimals (9)\\r\\n         */\\r\\n        uint256 targetDebt = uint256(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\r\\n\\r\\n        /*\\r\\n         * max payout is the amount of capacity that should be utilized in a deposit\\r\\n         * interval. for example, if capacity is 1,000 THEO, there are 10 days to conclusion,\\r\\n         * and the preferred deposit interval is 1 day, max payout would be 100 THEO.\\r\\n         */\\r\\n        uint256 maxPayout = (targetDebt * _intervals[0]) / secondsToConclusion;\\r\\n\\r\\n        /*\\r\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\r\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\r\\n         * market would continue to buy until it runs out of capacity. this is\\r\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\r\\n         * note that its likely advisable to keep this buffer wide.\\r\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\r\\n         */\\r\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\r\\n\\r\\n        // depositing into, or getting info for, the created market uses this ID\\r\\n        id_ = markets.length;\\r\\n\\r\\n        markets.push(\\r\\n            Market({\\r\\n                quoteToken: _quoteToken,\\r\\n                capacityInQuote: _booleans[0],\\r\\n                capacity: _market[0],\\r\\n                totalDebt: targetDebt,\\r\\n                maxPayout: maxPayout,\\r\\n                purchased: 0,\\r\\n                sold: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        terms.push(\\r\\n            Terms({\\r\\n                fixedTerm: _booleans[1],\\r\\n                vesting: uint48(_terms[0]),\\r\\n                conclusion: uint48(_terms[1]),\\r\\n                bondRateFixed: int64(_rates[0]),\\r\\n                maxBondRateVariable: int64(_rates[1]),\\r\\n                discountRateBond: int64(_rates[2]),\\r\\n                discountRateYield: int64(_rates[3]),\\r\\n                maxDebt: maxDebt\\r\\n            })\\r\\n        );\\r\\n\\r\\n        metadata.push(\\r\\n            Metadata({\\r\\n                lastTune: uint48(block.timestamp),\\r\\n                lastDecay: uint48(block.timestamp),\\r\\n                length: uint48(secondsToConclusion),\\r\\n                depositInterval: uint64(_intervals[0]),\\r\\n                tuneInterval: uint64(_intervals[1]),\\r\\n                quoteDecimals: uint8(decimals)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        marketsForQuote[address(_quoteToken)].push(id_);\\r\\n\\r\\n        emit CreateMarket(id_, address(theo), address(_quoteToken), _market[1]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             disable existing market\\r\\n     * @param _id          ID of market to close\\r\\n     */\\r\\n    function close(uint256 _id) external override onlyPolicy {\\r\\n        terms[_id].conclusion = uint48(block.timestamp);\\r\\n        markets[_id].capacity = 0;\\r\\n        emit CloseMarket(_id);\\r\\n    }\\r\\n\\r\\n    /* ======== BONDING RATES ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice                      update the Discount Rate Return Bond (Drb) for a specified market\\r\\n     * @param _id                   uint256 the ID of the bond market to update\\r\\n     * @param _discountRateBond     uint64 the new Discount Rate Return Bond (Drb), 9 decimals\\r\\n     */\\r\\n    function setDiscountRateBond(uint256 _id, int64 _discountRateBond) external override onlyPolicy {\\r\\n        terms[_id].discountRateBond = _discountRateBond;\\r\\n        emit SetDRB(_id, _discountRateBond);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                      update the Discount Rate Return Yield (Dyb) for a specified market\\r\\n     * @param _id                   uint256 the ID of the bond market to update\\r\\n     * @param _discountRateYield    uint64 the new Discount Rate Return Yield (Dyb), 9 decimals\\r\\n     */\\r\\n    function setDiscountRateYield(uint256 _id, int64 _discountRateYield) external override onlyPolicy {\\r\\n        terms[_id].discountRateYield = _discountRateYield;\\r\\n        emit SetDYB(_id, _discountRateYield);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate bond rate variable (Brv)\\r\\n     * @dev                     see marketPrice for calculation details.\\r\\n     * @param _id               ID of market\\r\\n     */\\r\\n    function bondRateVariable(uint256 _id) public view override returns (uint256) {\\r\\n        int256 bondRateVariable = int64(terms[_id].bondRateFixed) +\\r\\n            ((int64(terms[_id].discountRateBond) * ITreasury(treasury).deltaTokenPrice()) / 10**9) + //deltaTokenPrice is 9 decimals\\r\\n            ((int64(terms[_id].discountRateYield) * ITreasury(treasury).deltaTreasuryYield()) / 10**9); // deltaTreasuryYield is 9 decimals\\r\\n\\r\\n        if (bondRateVariable <= 0) {\\r\\n            return 0;\\r\\n        } else if (bondRateVariable >= terms[_id].maxBondRateVariable) {\\r\\n            return uint256(uint64(terms[_id].maxBondRateVariable));\\r\\n        } else {\\r\\n            return bondRateVariable.toUint256();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== EXTERNAL VIEW ======== */\\r\\n\\r\\n    /**\\r\\n     * @notice             calculate current market price of quote token in base token (i.e. quote tokens per THEO)\\r\\n     * @dev                uses the theoBondingCalculator.valuation method (using an amount of 1) to get the quote token value (Quote-Token per THEO).\\r\\n     * @param _id          ID of market\\r\\n     * @return             price for market in THEO decimals\\r\\n     *\\r\\n     * price is derived from the equation\\r\\n     *\\r\\n     * P = Cmv * (1 - Brv)\\r\\n     *\\r\\n     * where\\r\\n     * p = price\\r\\n     * cmv = current market value\\r\\n     * Brv = bond rate, variable. This is a proportion (that is, a percentage in its decimal form), with 9 decimals\\r\\n     *\\r\\n     * Brv = Brf + Bcrb + Bcyb\\r\\n     *\\r\\n     * where\\r\\n     * Brf = bond rate, fixed\\r\\n     * Bcrb = Drb * deltaTokenPrice\\r\\n     * Bcyb = Dyb * deltaTreasuryYield\\r\\n     *\\r\\n     *\\r\\n     * where\\r\\n     * Drb is a discount rate as a proportion (that is, a percentage in its decimal form) applied to the fluctuation in token price (deltaTokenPrice)\\r\\n     * Dyb is a discount rate as a proportion (that is a percentage in its decimal form) applied to the fluctuation of the treasury yield (deltaTreasuryYield)\\r\\n     * Drb, Dyb, deltaTokenPrice and deltaTreasuryYield are expressed as proportions (that is, they are a percentages in decimal form), with 9 decimals\\r\\n     */\\r\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\r\\n        IBondCalculator theoBondingCalculator = ITreasury(NoteKeeper.treasury).getTheoBondingCalculator();\\r\\n        if (address(theoBondingCalculator) == address(0)) {\\r\\n            revert(\\\"No bonding calculator\\\");\\r\\n        }\\r\\n        uint8 quoteTokenDecimals = IERC20Metadata(address(markets[_id].quoteToken)).decimals();\\r\\n        return\\r\\n            ((10**18 / (theoBondingCalculator.valuation(address(markets[_id].quoteToken), 10**quoteTokenDecimals))) *\\r\\n                (10**9 - bondRateVariable(_id))) / 10**9;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             payout due for amount of quote tokens\\r\\n     * @dev                accounts for debt and control variable decay so it is up to date\\r\\n     * @param _amount      amount of quote tokens to spend\\r\\n     * @param _id          ID of market\\r\\n     * @return             amount of THEO to be paid in THEO decimals\\r\\n     *\\r\\n     * @dev 1e18 = theo decimals (9) + market price decimals (9)\\r\\n     */\\r\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             calculate debt factoring in decay\\r\\n     * @dev                accounts for debt decay since last deposit\\r\\n     * @param _id          ID of market\\r\\n     * @return             current debt for market in THEO decimals\\r\\n     */\\r\\n    function currentDebt(uint256 _id) external view override returns (uint256) {\\r\\n        return markets[_id].totalDebt - debtDecay(_id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             amount of debt to decay from total debt for market ID\\r\\n     * @param _id          ID of market\\r\\n     * @return             amount of debt to decay\\r\\n     */\\r\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\r\\n        Metadata memory meta = metadata[_id];\\r\\n\\r\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\r\\n\\r\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             is a given market accepting deposits\\r\\n     * @param _id          ID of market\\r\\n     */\\r\\n    function isLive(uint256 _id) public view override returns (bool) {\\r\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns an array of all active market IDs\\r\\n     */\\r\\n    function liveMarkets() external view override returns (uint256[] memory) {\\r\\n        uint256 num;\\r\\n        for (uint256 i = 0; i < markets.length; i++) {\\r\\n            if (isLive(i)) num++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory ids = new uint256[](num);\\r\\n        uint256 nonce;\\r\\n        for (uint256 i = 0; i < markets.length; i++) {\\r\\n            if (isLive(i)) {\\r\\n                ids[nonce] = i;\\r\\n                nonce++;\\r\\n            }\\r\\n        }\\r\\n        return ids;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             returns an array of all active market IDs for a given quote token\\r\\n     * @param _token       quote token to check for\\r\\n     */\\r\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\r\\n        uint256[] memory mkts = marketsForQuote[_token];\\r\\n        uint256 num;\\r\\n\\r\\n        for (uint256 i = 0; i < mkts.length; i++) {\\r\\n            if (isLive(mkts[i])) num++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory ids = new uint256[](num);\\r\\n        uint256 nonce;\\r\\n\\r\\n        for (uint256 i = 0; i < mkts.length; i++) {\\r\\n            if (isLive(mkts[i])) {\\r\\n                ids[nonce] = mkts[i];\\r\\n                nonce++;\\r\\n            }\\r\\n        }\\r\\n        return ids;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns an array of market IDs for historical analysis\\r\\n     */\\r\\n    function getMarkets() external view override returns (uint256[] memory) {\\r\\n        uint256[] memory ids = new uint256[](markets.length);\\r\\n        for (uint256 i = 0; i < markets.length; i++) {\\r\\n                ids[i] = i;\\r\\n        }\\r\\n        return ids;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             returns an array of all market IDs for a given quote token\\r\\n     * @param _token       quote token to check for\\r\\n     */\\r\\n    function getMarketsFor(address _token) external view override returns (uint256[] memory) {\\r\\n        uint256[] memory mkts = marketsForQuote[_token];\\r\\n        uint256[] memory ids = new uint256[](mkts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < mkts.length; i++) {\\r\\n            ids[i] = mkts[i];\\r\\n        }\\r\\n        return ids;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xccee326e57b4285382e99fe364199b643cb364759c393f0975dc770917481f1b\",\"license\":\"AGPL-3.0\"},\"src/Types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"../Types/TheopetraAccessControlled.sol\\\";\\r\\nimport \\\"../Interfaces/IERC20.sol\\\";\\r\\n\\r\\nabstract contract FrontEndRewarder is TheopetraAccessControlled {\\r\\n    /* ========= STATE VARIABLES ========== */\\r\\n\\r\\n    uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\r\\n    uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\r\\n    mapping(address => uint256) public rewards; // front end operator rewards\\r\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\r\\n\\r\\n    IERC20 internal immutable theo; // reward token\\r\\n\\r\\n    event SetRewards(uint256 toRef, uint256 toDao);\\r\\n    constructor(ITheopetraAuthority _authority, IERC20 _theo) TheopetraAccessControlled(_authority) {\\r\\n        theo = _theo;\\r\\n    }\\r\\n\\r\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    // pay reward to front end operator\\r\\n    function getReward() external {\\r\\n        uint256 reward = rewards[msg.sender];\\r\\n\\r\\n        rewards[msg.sender] = 0;\\r\\n        theo.transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    /* ========= INTERNAL ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice add new market payout to user data\\r\\n     */\\r\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\r\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\r\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\r\\n        uint256 toRef = (_payout * refReward) / 1e4;\\r\\n\\r\\n        // and store them in our rewards mapping\\r\\n        if (whitelisted[_referral]) {\\r\\n            rewards[_referral] += toRef;\\r\\n            rewards[authority.guardian()] += toDAO;\\r\\n        } else {\\r\\n            // the DAO receives both rewards if referrer is not whitelisted\\r\\n            rewards[authority.guardian()] += toDAO + toRef;\\r\\n        }\\r\\n        return toDAO + toRef;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set rewards for front end operators and DAO\\r\\n     */\\r\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\r\\n        refReward = _toFrontEnd;\\r\\n        daoReward = _toDAO;\\r\\n\\r\\n        emit SetRewards(_toFrontEnd, _toDAO);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice add or remove addresses from the reward whitelist\\r\\n     */\\r\\n    function whitelist(address _operator) external onlyPolicy {\\r\\n        whitelisted[_operator] = !whitelisted[_operator];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6f61b8a07d3590e93e6a2913b5939dc6bb050d27aa96ec6f087cf64676f6900a\",\"license\":\"AGPL-3.0-only\"},\"src/Types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./FrontEndRewarder.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/IStakedTHEOToken.sol\\\";\\r\\nimport \\\"../Interfaces/IStaking.sol\\\";\\r\\nimport \\\"../Interfaces/ITreasury.sol\\\";\\r\\nimport \\\"../Interfaces/INoteKeeper.sol\\\";\\r\\n\\r\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\r\\n    mapping(address => Note[]) public notes; // user deposit data\\r\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\r\\n    mapping(address => mapping(uint256 => uint256)) private noteForClaim; // index of staking claim for a user's note\\r\\n\\r\\n    event TreasuryUpdated(address addr);\\r\\n    event PushNote(address from, address to, uint256 noteId);\\r\\n    event PullNote(address from, address to, uint256 noteId);\\r\\n\\r\\n    IStakedTHEOToken internal immutable sTHEO;\\r\\n    IStaking internal immutable staking;\\r\\n    ITreasury internal treasury;\\r\\n\\r\\n    constructor(\\r\\n        ITheopetraAuthority _authority,\\r\\n        IERC20 _theo,\\r\\n        IStakedTHEOToken _stheo,\\r\\n        IStaking _staking,\\r\\n        ITreasury _treasury\\r\\n    ) FrontEndRewarder(_authority, _theo) {\\r\\n        sTHEO = _stheo;\\r\\n        staking = _staking;\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    // if treasury address changes on authority, update it\\r\\n    function updateTreasury() external {\\r\\n        require(\\r\\n            msg.sender == authority.governor() ||\\r\\n                msg.sender == authority.guardian() ||\\r\\n                msg.sender == authority.policy(),\\r\\n            \\\"Only authorized\\\"\\r\\n        );\\r\\n        address treasuryAddress = authority.vault();\\r\\n        treasury = ITreasury(treasuryAddress);\\r\\n        emit TreasuryUpdated(treasuryAddress);\\r\\n    }\\r\\n\\r\\n    /* ========== ADD ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\r\\n     * @param _user        the user that owns the Note\\r\\n     * @param _payout      the amount of THEO due to the user\\r\\n     * @param _expiry      the timestamp when the Note is redeemable\\r\\n     * @param _marketID    the ID of the market deposited into\\r\\n     * @param _discount    the discount on the bond (that is, the bond rate, variable). This is a proportion (that is, a percentage in its decimal form), with 9 decimals\\r\\n     * @return index_      the index of the Note in the user's array\\r\\n     */\\r\\n    function addNote(\\r\\n        address _user,\\r\\n        uint256 _payout,\\r\\n        uint48 _expiry,\\r\\n        uint48 _marketID,\\r\\n        address _referral,\\r\\n        uint48 _discount,\\r\\n        bool _autoStake\\r\\n    ) internal returns (uint256 index_) {\\r\\n        // the index of the note is the next in the user's array\\r\\n        index_ = notes[_user].length;\\r\\n\\r\\n        // the new note is pushed to the user's array\\r\\n        notes[_user].push(\\r\\n            Note({\\r\\n                payout: _payout,\\r\\n                created: uint48(block.timestamp),\\r\\n                matured: _expiry,\\r\\n                redeemed: 0,\\r\\n                marketID: _marketID,\\r\\n                discount: _discount,\\r\\n                autoStake: _autoStake\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // front end operators can earn rewards by referring users\\r\\n        uint256 rewards = _giveRewards(_payout, _referral);\\r\\n\\r\\n        // mint and stake payout\\r\\n        treasury.mint(address(this), _payout + rewards);\\r\\n\\r\\n        if (_autoStake) {\\r\\n            // note that only the payout gets staked (front end rewards are in THEO)\\r\\n            // Get index for the claim to approve for pushing\\r\\n            (, uint256 claimIndex) = staking.stake(address(this), _payout, true);\\r\\n            // approve the user to transfer the staking claim\\r\\n            staking.pushClaim(_user, claimIndex);\\r\\n\\r\\n            // Map the index of the user's note to the claimIndex\\r\\n            noteForClaim[_user][index_] = claimIndex;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== REDEEM ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem notes for user\\r\\n     * @dev                adapted from Olympus V2. Olympus V2 either sends payout as gOHM\\r\\n     *                     or calls an `unwrap` function on the staking contract\\r\\n     *                     to convert the payout from gOHM into sOHM and then send as sOHM.\\r\\n     *                     This current contract sends payout as sTHEO.\\r\\n     * @param _user        the user to redeem for\\r\\n     * @param _indexes     the note indexes to redeem\\r\\n     * @return payout_     sum of payout sent, in sTHEO\\r\\n     */\\r\\n    function redeem(address _user, uint256[] memory _indexes) public override returns (uint256 payout_) {\\r\\n        uint48 time = uint48(block.timestamp);\\r\\n        uint256 sTheoPayout = 0;\\r\\n        uint256 theoPayout = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\r\\n            (uint256 pay, , , , bool matured, ) = pendingFor(_user, _indexes[i]);\\r\\n\\r\\n            if (matured) {\\r\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\r\\n                payout_ += pay;\\r\\n                if (notes[_user][_indexes[i]].autoStake) {\\r\\n                    uint256 _claimIndex = noteForClaim[_user][_indexes[i]];\\r\\n                    staking.pushClaimForBond(_user, _claimIndex);\\r\\n                    sTheoPayout += pay;\\r\\n                } else {\\r\\n                    theoPayout += pay;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (theoPayout > 0) theo.transfer(_user, theoPayout);\\r\\n        if (sTheoPayout > 0) sTHEO.transfer(_user, sTheoPayout);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             redeem all redeemable markets for user\\r\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\r\\n     * @param _user        user to redeem all notes for\\r\\n     * @return             sum of payout sent, in sTHEO\\r\\n     */\\r\\n    function redeemAll(address _user) external override returns (uint256) {\\r\\n        return redeem(_user, indexesFor(_user));\\r\\n    }\\r\\n\\r\\n    /* ========== TRANSFER ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice             approve an address to transfer a note\\r\\n     * @param _to          address to approve note transfer for\\r\\n     * @param _index       index of note to approve transfer for\\r\\n     */\\r\\n    function pushNote(address _to, uint256 _index) external override {\\r\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\r\\n        noteTransfers[msg.sender][_index] = _to;\\r\\n\\r\\n        emit PushNote(msg.sender, _to, _index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice             transfer a note that has been approved by an address\\r\\n     * @dev                if the note being pulled is autostaked then update noteForClaim as follows:\\r\\n     *                     get the relevant `claimIndex` associated with the note that is being pulled.\\r\\n     *                     Then add the claimIndex to the recipient's noteForClaim.\\r\\n     *                     After updating noteForClaim, the staking claim is pushed to the recipient, in order to\\r\\n     *                     update `claimTransfers` in the Staking contract and thereby change claim ownership (from the note's pusher to the note's recipient)\\r\\n     * @param _from        the address that approved the note transfer\\r\\n     * @param _index       the index of the note to transfer (in the sender's array)\\r\\n     */\\r\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\r\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\r\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\r\\n\\r\\n        newIndex_ = notes[msg.sender].length;\\r\\n\\r\\n        if (notes[_from][_index].autoStake) {\\r\\n            uint256 claimIndex = noteForClaim[_from][_index];\\r\\n            noteForClaim[msg.sender][newIndex_] = claimIndex;\\r\\n            staking.pushClaim(msg.sender, claimIndex);\\r\\n        }\\r\\n        notes[msg.sender].push(notes[_from][_index]);\\r\\n\\r\\n        delete notes[_from][_index];\\r\\n        emit PullNote(_from, msg.sender, _index);\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    // Note info\\r\\n\\r\\n    /**\\r\\n     * @notice             all pending notes for user\\r\\n     * @param _user        the user to query notes for\\r\\n     * @return             the pending notes for the user\\r\\n     */\\r\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\r\\n        Note[] memory info = notes[_user];\\r\\n\\r\\n        uint256 length;\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](length);\\r\\n        uint256 position;\\r\\n\\r\\n        for (uint256 i = 0; i < info.length; i++) {\\r\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\r\\n                indexes[position] = i;\\r\\n                position++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice                  calculate amount available for claim for a single note\\r\\n     * @param _user             the user that the note belongs to\\r\\n     * @param _index            the index of the note in the user's array\\r\\n     * @return payout_          the payout due, in sTHEO\\r\\n     * @return created_         the time the note was created\\r\\n     * @return expiry_          the time the note is redeemable\\r\\n     * @return timeRemaining_   the time remaining until the note is matured\\r\\n     * @return matured_         if the payout can be redeemed\\r\\n     */\\r\\n    function pendingFor(address _user, uint256 _index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 payout_,\\r\\n            uint48 created_,\\r\\n            uint48 expiry_,\\r\\n            uint48 timeRemaining_,\\r\\n            bool matured_,\\r\\n            uint48 discount_\\r\\n        )\\r\\n    {\\r\\n        Note memory note = notes[_user][_index];\\r\\n\\r\\n        payout_ = note.payout;\\r\\n        created_ = note.created;\\r\\n        expiry_ = note.matured;\\r\\n        timeRemaining_ = note.matured > block.timestamp ? uint48(note.matured - block.timestamp) : 0;\\r\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\r\\n        discount_ = note.discount;\\r\\n    }\\r\\n\\r\\n    function getNotesCount(address _user) external view returns (uint256) {\\r\\n        return notes[_user].length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1861128c47d87b07ca1c4e6e2d6ebde4a72f80edf862a6677fd2c84ff3a8d653\",\"license\":\"AGPL-3.0-only\"},\"src/Types/TheopetraAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"../Interfaces/ITheopetraAuthority.sol\\\";\\r\\n\\r\\nabstract contract TheopetraAccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(ITheopetraAuthority indexed authority);\\r\\n\\r\\n    string constant UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    ITheopetraAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(ITheopetraAuthority _authority) {\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian() {\\r\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy() {\\r\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == authority.manager(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function setAuthority(ITheopetraAuthority _newAuthority) external onlyGovernor {\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b24eccb8310ffc8bdc364d6cff67fb41dbfafcb279c116dbf2687051d34c155\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c8063b1283e7711610160578063d220c260116100d8578063e0b117ff1161008c578063e481b26511610071578063e481b265146106ea578063ec2c9016146106fd578063f3191a461461070557600080fd5b8063e0b117ff14610632578063e3684e391461068b57600080fd5b8063d6db4df8116100bd578063d6db4df8146105e9578063d936547e146105fc578063df4341781461061f57600080fd5b8063d220c260146105c3578063d2390aa2146105d657600080fd5b8063bf7e214f1161012f578063c0aa0e8a11610114578063c0aa0e8a14610508578063c3e0fb1c1461056b578063c9b67af5146105bb57600080fd5b8063bf7e214f146104ca578063c0680e20146104f557600080fd5b8063b1283e7714610425578063b6d8eee01461047b578063bcb29667146104a4578063be399be5146104b757600080fd5b8063654e51e7116101f35780637a9e5e4b116101c25780639c769787116101a75780639c769787146103de578063a4220610146103e6578063abbf4b17146103f957600080fd5b80637a9e5e4b146103b85780639b19251a146103cb57600080fd5b8063654e51e7146103515780636a6c575d14610364578063735bde2c14610377578063767c15db146103a557600080fd5b8063333d7d771161024a5780633d18b9121161022f5780633d18b912146103235780633f40f6c11461032b578063649144391461033e57600080fd5b8063333d7d77146102f05780633adec5a71461031057600080fd5b80630700037d1461027c5780630aebeb4e146102af5780631885f580146102c457806327507458146102cd575b600080fd5b61029c61028a3660046143b6565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6102c26102bd3660046143d3565b61070e565b005b61029c60015481565b6102e06102db3660046143d3565b61087e565b60405190151581526020016102a6565b6103036102fe3660046143b6565b6108f0565b6040516102a691906143ec565b61029c61031e3660046143d3565b6109fb565b6102c2610c90565b6102c2610339366004614447565b610d3b565b61030361034c3660046143b6565b610ea5565b6102c261035f366004614473565b611034565b61029c610372366004614473565b611149565b61038a6103853660046144a3565b61121f565b604080519384526020840192909252908201526060016102a6565b6102c26103b3366004614447565b6116a9565b6102c26103c63660046143b6565b611817565b6102c26103d93660046143b6565b611939565b6102c2611a4d565b61029c6103f436600461450a565b611d1e565b61040c6104073660046143d3565b6121e4565b60405167ffffffffffffffff90911681526020016102a6565b6104386104333660046143d3565b6122ca565b604080519788526001600160a01b039096166020880152931515948601949094526060850191909152608084015260a083019190915260c082015260e0016102a6565b61029c6104893660046143b6565b6001600160a01b031660009081526005602052604090205490565b61029c6104b23660046143d3565b612327565b61029c6104c53660046143b6565b61236b565b6000546104dd906001600160a01b031681565b6040516001600160a01b0390911681526020016102a6565b61029c61050336600461450a565b61237a565b61051b6105163660046143d3565b6123ab565b60408051981515895265ffffffffffff97881660208a01529590961694870194909452600792830b606087015290820b6080860152810b60a08501520b60c083015260e0820152610100016102a6565b61057e61057936600461450a565b612436565b6040805196875265ffffffffffff9586166020880152938516938601939093529083166060850152151560808401521660a082015260c0016102a6565b610303612576565b61029c6105d1366004614712565b61265f565b61029c6105e43660046147e4565b612e31565b6102c26105f736600461450a565b6131c8565b6102e061060a3660046143b6565b60046020526000908152604090205460ff1681565b61029c61062d3660046143d3565b6132cd565b61064561064036600461450a565b61353d565b6040805197885265ffffffffffff96871660208901529486169487019490945291841660608601528316608085015290911660a0830152151560c082015260e0016102a6565b61069e6106993660046143d3565b6135b9565b6040805165ffffffffffff97881681529587166020870152939095169284019290925267ffffffffffffffff908116606084015216608082015260ff90911660a082015260c0016102a6565b6103036106f83660046143b6565b61362f565b610303613877565b61029c60025481565b60008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610783919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906107e35760405162461bcd60e51b81526004016107da91906148ec565b60405180910390fd5b5042600a82815481106107f8576107f861491f565b906000526020600020906003020160000160076101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600982815481106108405761084061491f565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000600982815481106108935761089361491f565b9060005260206000209060060201600001546000141580156108ea575042600a83815481106108c4576108c461491f565b6000918252602090912060039091020154670100000000000000900465ffffffffffff16115b92915050565b6001600160a01b0381166000908152600c6020908152604080832080548251818502810185019093528083526060949383018282801561094f57602002820191906000526020600020905b81548152602001906001019080831161093b575b505050505090506000815167ffffffffffffffff81111561097257610972614536565b60405190808252806020026020018201604052801561099b578160200160208202803683370190505b50905060005b82518110156109f3578281815181106109bc576109bc61491f565b60200260200101518282815181106109d6576109d661491f565b6020908102919091010152806109eb8161494b565b9150506109a1565b509392505050565b600080600860009054906101000a90046001600160a01b03166001600160a01b031663817f76356040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a75919061489f565b90506001600160a01b038116610acd5760405162461bcd60e51b815260206004820152601560248201527f4e6f20626f6e64696e672063616c63756c61746f72000000000000000000000060448201526064016107da565b600060098481548110610ae257610ae261491f565b600091825260209182902060016006909202010154604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263313ce567926004808401938290030181865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b759190614966565b9050633b9aca00610b85856132cd565b610b9390633b9aca00614989565b836001600160a01b0316634249719f60098881548110610bb557610bb561491f565b60009182526020909120600160069092020101546001600160a01b0316610bdd86600a614a84565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190614a93565b610c7490670de0b6b3a7640000614ac2565b610c7e9190614ad6565b610c889190614ac2565b949350505050565b3360008181526003602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190614af5565b5050565b60008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db0919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b81525090610e075760405162461bcd60e51b81526004016107da91906148ec565b5080600a8381548110610e1c57610e1c61491f565b60009182526020918290206003919091020160010180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9390931692909217909155604051600783900b815283917f91432d56b1b346f9650a1d16d1ef98dce1edc96a28eccec7a711c9ad78ecfcb991015b60405180910390a25050565b6001600160a01b0381166000908152600c60209081526040808320805482518185028101850190935280835260609493830182828015610f0457602002820191906000526020600020905b815481526020019060010190808311610ef0575b50505050509050600080600090505b8251811015610f6357610f3e838281518110610f3157610f3161491f565b602002602001015161087e565b15610f515781610f4d8161494b565b9250505b80610f5b8161494b565b915050610f13565b5060008167ffffffffffffffff811115610f7f57610f7f614536565b604051908082528060200260200182016040528015610fa8578160200160208202803683370190505b5090506000805b845181101561102957610fcd858281518110610f3157610f3161491f565b1561101757848181518110610fe457610fe461491f565b6020026020010151838381518110610ffe57610ffe61491f565b6020908102919091010152816110138161494b565b9250505b806110218161494b565b915050610faf565b509095945050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a9919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906111005760405162461bcd60e51b81526004016107da91906148ec565b506002829055600181905560408051838152602081018390527f41ddb6f76c2aab8405d1cca4bd752e126ac8976c1203888790f8594c7ba3661191015b60405180910390a15050565b600080600b838154811061115f5761115f61491f565b60009182526020918290206040805160c0810182526002909302909101805465ffffffffffff808216855266010000000000008204811695850195909552600160601b81049094169183019190915267ffffffffffffffff600160901b9093048316606083015260010154918216608082015260ff680100000000000000009092049190911660a082018190529091506111fa90600a614a84565b611203846109fb565b61121586670de0b6b3a7640000614ad6565b610c7e9190614ac2565b6000806000806040518060c001604052808b81526020018a8152602001898152602001886001600160a01b03168152602001876001600160a01b031681526020018615158152509050600060098260000151815481106112815761128161491f565b906000526020600020906006020190506000600a8360000151815481106112aa576112aa61491f565b60009182526020808320604080516101008082018352600395909502909201805460ff81161515845294850465ffffffffffff90811684860152670100000000000000860481168484019081526d01000000000000000000000000008704600790810b6060870152600160a81b909704870b6080860152600183015480880b60a087015268010000000000000000900490960b60c085015260029091015460e0840152815180830190925285825292810194909452915191935042918116908216106113b85760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107da565b84516113c49082613907565b84516113cf906109fb565b808352604086015110156114255760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107da565b600b85600001518154811061143c5761143c61491f565b600091825260209091206002909102016001015461146a9068010000000000000000900460ff16600a614a84565b8251602087015161148390670de0b6b3a7640000614ad6565b61148d9190614ac2565b6114979190614ac2565b975083600501548811156114ed5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107da565b6001840154600160a01b900460ff16611506578761150c565b84602001515b84600001600082825461151f9190614989565b90915550508251611534578260200151611544565b8083602001516115449190614b12565b65ffffffffffff16965084602001518460030160008282546115669190614b3c565b92505081905550878460020160008282546115819190614b3c565b925050819055508784600401600082825461159c9190614b3c565b90915550508451602080870151845160408051928352928201527f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a284516115ec906132cd565b65ffffffffffff166020830181905260608601518651608088015160a089015161161e948d938d93909290919061399f565b60085460208701516001870154929850611648926001600160a01b03908116923392911690613d4a565b83600401548360e00151101561168c576000808555855160405190917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611698565b84516116989082613e9c565b505050505096509650969350505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906117755760405162461bcd60e51b81526004016107da91906148ec565b5080600a838154811061178a5761178a61491f565b6000918252602091829020600160039092020101805467ffffffffffffffff9390931668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff90931692909217909155604051600783900b815283917f3f00c068fb9dd0f23251ee130e08eb6cfa5762da4dca8129ede360b816ceff219101610e99565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b815250906118e35760405162461bcd60e51b81526004016107da91906148ec565b506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad91a250565b60008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b81525090611a055760405162461bcd60e51b81526004016107da91906148ec565b506001600160a01b0316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac2919061489f565b6001600160a01b0316336001600160a01b03161480611b66575060008054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b51919061489f565b6001600160a01b0316336001600160a01b0316145b80611bf6575060008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be1919061489f565b6001600160a01b0316336001600160a01b0316145b611c425760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107da565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba919061489f565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081529091507f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d19060200160405180910390a150565b6001600160a01b0382811660009081526006602090815260408083208584529091528120549091163314611d945760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107da565b6001600160a01b0383166000908152600560205260409020805483908110611dbe57611dbe61491f565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611e2e5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107da565b5033600090815260056020526040808220546001600160a01b03851683529120805483908110611e6057611e6061491f565b9060005260206000209060020201600101601e9054906101000a900460ff1615611f56576001600160a01b038381166000908152600760208181526040808420878552825280842054338086529383528185208786529092529283902081905591517f78f1f77800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905290917f000000000000000000000000000000000000000000000000000000000000000016906378f1f77890604401600060405180830381600087803b158015611f3c57600080fd5b505af1158015611f50573d6000803e3d6000fd5b50505050505b336000908152600560205260408082206001600160a01b03861683529120805484908110611f8657611f8661491f565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff948516908117835586546601000000000000908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b908190048516027fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff8216811783558654600160901b908190048616027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff9091167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff90921691909117178082558554600160c01b908190049094169093027fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff841681178255945460ff600160f01b91829004161515027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9095167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff909316929092179390931790556001600160a01b03851681526005909152604090208054839081106121535761215361491f565b60009182526020808320600292909202909101918255600190910180547fff00000000000000000000000000000000000000000000000000000000000000169055604080516001600160a01b0386168152339281019290925281018390527fac662197bb43cbfbf62b5caf539eb823ba3ee6f13941f9978304958a2c916ebf9060600160405180910390a192915050565b600080600b83815481106121fa576121fa61491f565b600091825260208083206040805160c0810182526002909402909101805465ffffffffffff8082168652660100000000000082048116948601859052600160601b8204169285019290925267ffffffffffffffff600160901b9092048216606085015260010154908116608084015260ff680100000000000000009091041660a083015290925061228b9042614989565b9050816040015165ffffffffffff1681600986815481106122ae576122ae61491f565b906000526020600020906006020160040154610c7e9190614ad6565b600981815481106122da57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b03831694600160a01b90930460ff16939192909187565b6000612332826121e4565b67ffffffffffffffff166009838154811061234f5761234f61491f565b9060005260206000209060060201600401546108ea9190614989565b60006108ea826105e48461362f565b600c602052816000526040600020818154811061239657600080fd5b90600052602060002001600091509150505481565b600a81815481106123bb57600080fd5b600091825260209091206003909102018054600182015460029092015460ff8216935065ffffffffffff61010083048116936701000000000000008404909116926d01000000000000000000000000008104600790810b93600160a81b909204810b9280820b926801000000000000000090910490910b9088565b6000806000806000806000600560008a6001600160a01b03166001600160a01b0316815260200190815260200160002088815481106124775761247761491f565b60009182526020918290206040805160e0810182526002909302909101805480845260019091015465ffffffffffff808216958501869052660100000000000082048116938501849052600160601b820481166060860152600160901b820481166080860152600160c01b82041660a085015260ff600160f01b90910416151560c08401529950919750909550905042851161251457600061252c565b42816040015165ffffffffffff1661252c9190614989565b9350806060015165ffffffffffff166000148015612556575042816040015165ffffffffffff1611155b80156125625750805115155b92508060a001519150509295509295509295565b60606000805b6009548110156125b45761258f8161087e565b156125a2578161259e8161494b565b9250505b806125ac8161494b565b91505061257c565b5060008167ffffffffffffffff8111156125d0576125d0614536565b6040519080825280602002602001820160405280156125f9578160200160208202803683370190505b5090506000805b600954811015612656576126138161087e565b15612644578083838151811061262b5761262b61491f565b6020908102919091010152816126408161494b565b9250505b8061264e8161494b565b915050612600565b50909392505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d7919061489f565b6001600160a01b0316336001600160a01b0316146040518060400160405280600c81526020016b15539055551213d49256915160a21b8152509061272e5760405162461bcd60e51b81526004016107da91906148ec565b506020840151600090612742904290614989565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a89190614966565b60ff1690506000878160200201516127c15788516127f9565b6127cc82600a614b54565b60208a01518a516127e590670de0b6b3a7640000614ad6565b6127ef9190614ac2565b6127f99190614ac2565b855190915060009084906128179067ffffffffffffffff1684614ad6565b6128219190614ac2565b90506000620186a08b6002602002015161283b9085614ad6565b6128459190614ac2565b61284f9084614b3c565b600980546040805160e0810190915290985091925090808d6000602002015181526020018e6001600160a01b031681526020018c6000600281106128955761289561491f565b60209081029190910151151582526000828201819052604080840182905260608085018a90526080948501899052865460018181018955978452928490208651600690940201928355928501518287018054878401511515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009091166001600160a01b039093169290921791909117905591840151600282015591830151600383015560a0830151600483015560c09092015160059091015580516101008101909152600a9181908d906020020151151581526020018b6000600281106129845761298461491f565b602002015165ffffffffffff1681526020018b6001600281106129a9576129a961491f565b602002015165ffffffffffff1681526020018a6000600481106129ce576129ce61491f565b602002015160070b81526020018a6001600481106129ee576129ee61491f565b602002015160070b81526020018a600260048110612a0e57612a0e61491f565b602002015160070b81526020018a600360048110612a2e57612a2e61491f565b6020908102919091015160070b825290810184905282546001808201855560009485529382902083516003909202018054848401516040808701516060808901516080808b01517fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000009097169815157fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000ff169890981761010065ffffffffffff96871602177fffffffffffffffffffffff0000000000000000000000000000ffffffffffffff16670100000000000000938616939093027fffffffffffffffffffffff0000000000000000ffffffffffffffffffffffffff16929092176d010000000000000000000000000067ffffffffffffffff93841602177fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff16600160a81b9583169590950294909417855560a0880151858a01805460c0808c01519385167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921691909117680100000000000000009385169390930292909217905560e09098015160029095019490945580519687018152428216808852958701959095528b16938501939093528b511691830191909152600b92908201908a90602002015167ffffffffffffffff1681526020018660ff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a81548160ff021916908360ff1602179055505050600c60008d6001600160a01b03166001600160a01b031681526020019081526020016000208690806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316877f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160038110612e0657612e0661491f565b6020020151604051612e1a91815260200190565b60405180910390a450505050509695505050505050565b6000428180805b855181101561308857600080612e6789898581518110612e5a57612e5a61491f565b6020026020010151612436565b50945050505091508015613073576001600160a01b038916600090815260056020526040902088518791908a9086908110612ea457612ea461491f565b602002602001015181548110612ebc57612ebc61491f565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508187612efb9190614b3c565b6001600160a01b038a166000908152600560205260409020895191985090899085908110612f2b57612f2b61491f565b602002602001015181548110612f4357612f4361491f565b9060005260206000209060020201600101601e9054906101000a900460ff1615613066576001600160a01b0389166000908152600760205260408120895182908b9087908110612f9557612f9561491f565b602002602001015181526020019081526020016000205490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3e504098b836040518363ffffffff1660e01b81526004016130109291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561302f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130539190614a93565b5061305e8387614b3c565b955050613073565b6130708285614b3c565b93505b505080806130809061494b565b915050612e38565b5080156131245760405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156130fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131229190614af5565b505b81156131bf5760405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015613199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131bd9190614af5565b505b50505092915050565b3360009081526005602052604090208054829081106131e9576131e961491f565b600091825260209091206001600290920201015465ffffffffffff166132515760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107da565b336000818152600660209081526040808320858452825291829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915582519384529083015281018290527f46a855c725ecb3b899b429c361a8e87ced35203a422c4324e83b6a43b0b70c239060600161113d565b600080633b9aca00600860009054906101000a90046001600160a01b03166001600160a01b0316639a5739d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015613328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334c9190614a93565b600a858154811061335f5761335f61491f565b600091825260209091206001600390920201015461338c919068010000000000000000900460070b614b60565b6133969190614c00565b600854604080517f192d57c50000000000000000000000000000000000000000000000000000000081529051633b9aca00926001600160a01b03169163192d57c59160048083019260209291908290030181865afa1580156133fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134209190614a93565b600a86815481106134335761343361491f565b6000918252602090912060016003909202010154613454919060070b614b60565b61345e9190614c00565b600a85815481106134715761347161491f565b60009182526020909120600390910201546134a091906d0100000000000000000000000000900460070b614c2e565b6134aa9190614c2e565b9050600081136134bd5750600092915050565b600a83815481106134d0576134d061491f565b6000918252602090912060039091020154600160a81b900460070b811261352d57600a83815481106135045761350461491f565b6000918252602090912060039091020154600160a81b900467ffffffffffffffff169392505050565b61353681614128565b9392505050565b6005602052816000526040600020818154811061355957600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff808216925066010000000000008204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1687565b600b81815481106135c957600080fd5b60009182526020909120600290910201805460019091015465ffffffffffff808316935066010000000000008304811692600160601b81049091169167ffffffffffffffff600160901b90920482169181169060ff680100000000000000009091041686565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609493849084015b828210156136fd5760008481526020908190206040805160e081018252600286029092018054835260019081015465ffffffffffff8082168587015266010000000000008204811693850193909352600160601b810483166060850152600160901b810483166080850152600160c01b810490921660a0840152600160f01b90910460ff16151560c08301529083529092019101613664565b505050509050600080600090505b825181101561378c578281815181106137265761372661491f565b60200260200101516060015165ffffffffffff16600014801561376757508281815181106137565761375661491f565b602002602001015160000151600014155b1561377a57816137768161494b565b9250505b806137848161494b565b91505061370b565b5060008167ffffffffffffffff8111156137a8576137a8614536565b6040519080825280602002602001820160405280156137d1578160200160208202803683370190505b5090506000805b8451811015611029578481815181106137f3576137f361491f565b60200260200101516060015165ffffffffffff16600014801561383457508481815181106138235761382361491f565b602002602001015160000151600014155b15613865578083838151811061384c5761384c61491f565b6020908102919091010152816138618161494b565b9250505b8061386f8161494b565b9150506137d8565b60095460609060009067ffffffffffffffff81111561389857613898614536565b6040519080825280602002602001820160405280156138c1578160200160208202803683370190505b50905060005b60095481101561390157808282815181106138e4576138e461491f565b6020908102919091010152806138f98161494b565b9150506138c7565b50919050565b613910826121e4565b67ffffffffffffffff166009838154811061392d5761392d61491f565b9060005260206000209060060201600401600082825461394d9190614989565b9250508190555080600b83815481106139685761396861491f565b906000526020600020906002020160000160066101000a81548165ffffffffffff021916908365ffffffffffff1602179055505050565b6001600160a01b03871660009081526005602090815260408083208054825160e0810184528b815265ffffffffffff4281168287019081528c8216958301958652606083018881528c8316608085019081528b841660a086019081528b151560c0870190815260018089018a55988c52998b209551600288029096019586559251949096018054975191519651925198511515600160f01b027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff998516600160c01b02999099167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff938516600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff988616600160601b02989098167fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff9386166601000000000000026bffffffffffffffffffffffff19909a16969095169590951797909717169190911793909317929092169190911792909217905590613b2a888661417e565b6008549091506001600160a01b03166340c10f1930613b49848c614b3c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613ba757600080fd5b505af1158015613bbb573d6000803e3d6000fd5b505050508215613d3e576040517f995846bd00000000000000000000000000000000000000000000000000000000815230600482015260248101899052600160448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063995846bd9060640160408051808303816000875af1158015613c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c789190614c86565b6040517f78f1f7780000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018390529193507f000000000000000000000000000000000000000000000000000000000000000090911691506378f1f77890604401600060405180830381600087803b158015613d0157600080fd5b505af1158015613d15573d6000803e3d6000fd5b505050506001600160a01b038a1660009081526007602090815260408083208684529091529020555b50979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691613ddc9190614caa565b6000604051808303816000865af19150503d8060008114613e19576040519150601f19603f3d011682016040523d82523d6000602084013e613e1e565b606091505b5091509150818015613e48575080511580613e48575080806020019051810190613e489190614af5565b613e945760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016107da565b505050505050565b6000600b8381548110613eb157613eb161491f565b60009182526020918290206040805160c0810182526002909302909101805465ffffffffffff80821680865266010000000000008304821696860196909652600160601b8204169284019290925267ffffffffffffffff600160901b90920482166060840152600101549081166080830181905260ff680100000000000000009092049190911660a0830152909250613f4991614cc6565b67ffffffffffffffff168265ffffffffffff161061412357600060098481548110613f7657613f7661491f565b600091825260208083206040805160e0810182526006949094029091018054845260018101546001600160a01b03811693850193909352600160a01b90920460ff161515908301526002810154606083015260038101546080830152600481015460a08301526005015460c0820152600a8054919350859187908110613ffe57613ffe61491f565b600091825260209091206003909102015461402c9190670100000000000000900465ffffffffffff16614ce9565b65ffffffffffff1690506000614041866109fb565b90506000836040015161405557835161408f565b60a085015161406590600a614a84565b8451839061407b90670de0b6b3a7640000614ad6565b6140859190614ac2565b61408f9190614ac2565b905082856060015167ffffffffffffffff16826140ac9190614ad6565b6140b69190614ac2565b600988815481106140c9576140c961491f565b90600052602060002090600602016005018190555085600b88815481106140f2576140f261491f565b60009182526020909120600290910201805465ffffffffffff191665ffffffffffff92909216919091179055505050505b505050565b60008082121561417a5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016107da565b5090565b600080612710600154856141929190614ad6565b61419c9190614ac2565b90506000612710600254866141b19190614ad6565b6141bb9190614ac2565b6001600160a01b03851660009081526004602052604090205490915060ff16156142c3576001600160a01b03841660009081526003602052604081208054839290614207908490614b3c565b9250508190555081600360008060009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015614265573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614289919061489f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546142b89190614b3c565b9091555061438b9050565b6142cd8183614b3c565b60008054604080517f452a93200000000000000000000000000000000000000000000000000000000081529051600393926001600160a01b03169163452a93209160048083019260209291908290030181865afa158015614332573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614356919061489f565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546143859190614b3c565b90915550505b6143958183614b3c565b95945050505050565b6001600160a01b03811681146143b357600080fd5b50565b6000602082840312156143c857600080fd5b81356135368161439e565b6000602082840312156143e557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561442457835183529284019291840191600101614408565b50909695505050505050565b8035600781900b811461444257600080fd5b919050565b6000806040838503121561445a57600080fd5b8235915061446a60208401614430565b90509250929050565b6000806040838503121561448657600080fd5b50508035926020909101359150565b80151581146143b357600080fd5b60008060008060008060c087890312156144bc57600080fd5b86359550602087013594506040870135935060608701356144dc8161439e565b925060808701356144ec8161439e565b915060a08701356144fc81614495565b809150509295509295509295565b6000806040838503121561451d57600080fd5b82356145288161439e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561456f5761456f614536565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561459e5761459e614536565b604052919050565b60006040516060810181811067ffffffffffffffff821117156145cb576145cb614536565b60405290508060608301848111156145e257600080fd5b835b818110156131bf5780358352602092830192016145e4565b600082601f83011261460d57600080fd5b61461561454c565b80604084018581111561462757600080fd5b845b81811015611029578035845260209384019301614629565b600082601f83011261465257600080fd5b6040516080810181811067ffffffffffffffff8211171561467557614675614536565b60405280608084018581111561468a57600080fd5b845b818110156146ab5761469d81614430565b83526020928301920161468c565b509195945050505050565b600082601f8301126146c757600080fd5b6146cf61454c565b8060408401858111156146e157600080fd5b845b8181101561102957803567ffffffffffffffff811681146147045760008081fd5b8452602093840193016146e3565b6000806000806000806101c0878903121561472c57600080fd5b86356147378161439e565b95506020603f8801891361474a57600080fd5b61475689828a016145a6565b955088609f89011261476757600080fd5b61476f61454c565b8060c08a018b81111561478157600080fd5b60808b015b818110156147a657803561479981614495565b8452928401928401614786565b508197506147b48c826145fc565b9650505050506147c8886101008901614641565b91506147d88861018089016146b6565b90509295509295509295565b600080604083850312156147f757600080fd5b82356148028161439e565b915060208381013567ffffffffffffffff8082111561482057600080fd5b818601915086601f83011261483457600080fd5b81358181111561484657614846614536565b8060051b9150614857848301614575565b818152918301840191848101908984111561487157600080fd5b938501935b8385101561488f57843582529385019390850190614876565b8096505050505050509250929050565b6000602082840312156148b157600080fd5b81516135368161439e565b60005b838110156148d75781810151838201526020016148bf565b838111156148e6576000848401525b50505050565b602081526000825180602084015261490b8160408501602087016148bc565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561495f5761495f614935565b5060010190565b60006020828403121561497857600080fd5b815160ff8116811461353657600080fd5b60008282101561499b5761499b614935565b500390565b600181815b808511156149db5781600019048211156149c1576149c1614935565b808516156149ce57918102915b93841c93908002906149a5565b509250929050565b6000826149f2575060016108ea565b816149ff575060006108ea565b8160018114614a155760028114614a1f57614a3b565b60019150506108ea565b60ff841115614a3057614a30614935565b50506001821b6108ea565b5060208310610133831016604e8410600b8410161715614a5e575081810a6108ea565b614a6883836149a0565b8060001904821115614a7c57614a7c614935565b029392505050565b600061353660ff8416836149e3565b600060208284031215614aa557600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082614ad157614ad1614aac565b500490565b6000816000190483118215151615614af057614af0614935565b500290565b600060208284031215614b0757600080fd5b815161353681614495565b600065ffffffffffff808316818516808303821115614b3357614b33614935565b01949350505050565b60008219821115614b4f57614b4f614935565b500190565b600061353683836149e3565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615614ba157614ba1614935565b600160ff1b6000871286820588128184161615614bc057614bc0614935565b60008712925087820587128484161615614bdc57614bdc614935565b87850587128184161615614bf257614bf2614935565b505050929093029392505050565b600082614c0f57614c0f614aac565b6000198314600160ff1b83141615614c2957614c29614935565b500590565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614c6857614c68614935565b82600160ff1b038412811615614c8057614c80614935565b50500190565b60008060408385031215614c9957600080fd5b505080516020909101519092909150565b60008251614cbc8184602087016148bc565b9190910192915050565b600067ffffffffffffffff808316818516808303821115614b3357614b33614935565b600065ffffffffffff83811690831681811015614d0857614d08614935565b03939250505056fea264697066735822122080dd05481cf8aaa3c1be89e03e66a1d556015065b31b34cad7b1386fe2896dec64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondRateVariable(uint256)": {
        "details": "see marketPrice for calculation details.",
        "params": {
          "_id": "ID of market"
        }
      },
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],int64[4],uint64[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in THEO or quote), initial price / THEO (9 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_rates": "[bondRateFixed, maxBondRateVariable, initial discountRateBond (Drb), initial discountRateYield (Dyb)]",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in THEO decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "deposit(uint256,uint256,uint256,address,address,bool)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of sTHEO due"
        }
      },
      "getMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "uses the theoBondingCalculator.valuation method (using an amount of 1) to get the quote token value (Quote-Token per THEO).",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in THEO decimals price is derived from the equation P = Cmv * (1 - Brv) where p = price cmv = current market value Brv = bond rate, variable. This is a proportion (that is, a percentage in its decimal form), with 9 decimals Brv = Brf + Bcrb + Bcyb where Brf = bond rate, fixed Bcrb = Drb * deltaTokenPrice Bcyb = Dyb * deltaTreasuryYield where Drb is a discount rate as a proportion (that is, a percentage in its decimal form) applied to the fluctuation in token price (deltaTokenPrice) Dyb is a discount rate as a proportion (that is a percentage in its decimal form) applied to the fluctuation of the treasury yield (deltaTreasuryYield) Drb, Dyb, deltaTokenPrice and deltaTreasuryYield are expressed as proportions (that is, they are a percentages in decimal form), with 9 decimals"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = theo decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of THEO to be paid in THEO decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "created_": "        the time the note was created",
          "expiry_": "         the time the note is redeemable",
          "matured_": "        if the payout can be redeemed",
          "payout_": "         the payout due, in sTHEO",
          "timeRemaining_": "  the time remaining until the note is matured"
        }
      },
      "pullNote(address,uint256)": {
        "details": "if the note being pulled is autostaked then update noteForClaim as follows:                     get the relevant `claimIndex` associated with the note that is being pulled.                     Then add the claimIndex to the recipient's noteForClaim.                     After updating noteForClaim, the staking claim is pushed to the recipient, in order to                     update `claimTransfers` in the Staking contract and thereby change claim ownership (from the note's pusher to the note's recipient)",
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "details": "adapted from Olympus V2. Olympus V2 either sends payout as gOHM                     or calls an `unwrap` function on the staking contract                     to convert the payout from gOHM into sOHM and then send as sOHM.                     This current contract sends payout as sTHEO.",
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in sTHEO"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in sTHEO"
        }
      },
      "setDiscountRateBond(uint256,int64)": {
        "params": {
          "_discountRateBond": "uint64 the new Discount Rate Return Bond (Drb), 9 decimals",
          "_id": "uint256 the ID of the bond market to update"
        }
      },
      "setDiscountRateYield(uint256,int64)": {
        "params": {
          "_discountRateYield": "uint64 the new Discount Rate Return Yield (Dyb), 9 decimals",
          "_id": "uint256 the ID of the bond market to update"
        }
      }
    },
    "title": "Theopetra Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondRateVariable(uint256)": {
        "notice": "calculate bond rate variable (Brv)"
      },
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],int64[4],uint64[2])": {
        "notice": "creates a new market type"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "deposit(uint256,uint256,uint256,address,address,bool)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "getMarkets()": {
        "notice": "returns an array of market IDs for historical analysis"
      },
      "getMarketsFor(address)": {
        "notice": "returns an array of all market IDs for a given quote token"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token (i.e. quote tokens per THEO)"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setDiscountRateBond(uint256,int64)": {
        "notice": "update the Discount Rate Return Bond (Drb) for a specified market"
      },
      "setDiscountRateYield(uint256,int64)": {
        "notice": "update the Discount Rate Return Yield (Dyb) for a specified market"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "notice": "Originally based off of Olympus Bond Depository V2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14683,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITheopetraAuthority)2818"
      },
      {
        "astId": 13617,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "daoReward",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13619,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "refReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13623,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13627,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13802,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Note)2436_storage)dyn_storage)"
      },
      {
        "astId": 13808,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 13814,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "noteForClaim",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13843,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITreasury)2928"
      },
      {
        "astId": 8801,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Market)1980_storage)dyn_storage"
      },
      {
        "astId": 8805,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Terms)1997_storage)dyn_storage"
      },
      {
        "astId": 8809,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Metadata)2010_storage)dyn_storage"
      },
      {
        "astId": 8814,
        "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)1980_storage)dyn_storage": {
        "base": "t_struct(Market)1980_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)2010_storage)dyn_storage": {
        "base": "t_struct(Metadata)2010_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)2436_storage)dyn_storage": {
        "base": "t_struct(Note)2436_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)1997_storage)dyn_storage": {
        "base": "t_struct(Terms)1997_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2315": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITheopetraAuthority)2818": {
        "encoding": "inplace",
        "label": "contract ITheopetraAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)2928": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_array(t_struct(Note)2436_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)2436_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)1980_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 1966,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1969,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2315"
          },
          {
            "astId": 1971,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1973,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1975,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1977,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1979,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)2010_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 1999,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2001,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2003,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2005,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2007,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "tuneInterval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2009,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "quoteDecimals",
            "offset": 8,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Note)2436_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 2423,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2425,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2427,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2429,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2431,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2433,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "discount",
            "offset": 24,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2435,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "autoStake",
            "offset": 30,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)1997_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 1982,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1984,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "vesting",
            "offset": 1,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1986,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "conclusion",
            "offset": 7,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1988,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "bondRateFixed",
            "offset": 13,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 1990,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "maxBondRateVariable",
            "offset": 21,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 1992,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "discountRateBond",
            "offset": 0,
            "slot": "1",
            "type": "t_int64"
          },
          {
            "astId": 1994,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "discountRateYield",
            "offset": 8,
            "slot": "1",
            "type": "t_int64"
          },
          {
            "astId": 1996,
            "contract": "src/Theopetra/BondDepository.sol:TheopetraBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}